; .petscii
;         .li 1,4,7

*= $c000
!src "..\godotlib.lib"

; ------------------------------------------------------------ 
;
; ldr.FLI-Designer
; loader for FLI-Designer Images
;
;    1.00, 07.10.16, first release
;
; ----------------------------------------- Equates
;
;
	stox		= $30
	stoy		= $31
	stoa		= $32
	dst0		= $35
	dst		= $37
	src		= dst
	byte		= $39
	cntwert		= $3a
	vrcnt		= $3b
	pack		= $3c
	pcnt		= $3d
	data		= $3e
	status		= $90
	offx		= $b2
	offy		= offx+1
	adcnt		= $ff

	ls_nambuf		= $0200
	gd_xopen		= $1458
	gd_xclose		= $145b
	gd_xmess		= $145e
	gd_xtxout2	= $1464
	gd_clrms		= $14f0

	bcbuf		= $bd00
	cbuf		= $ca00
	sprite		= $d015
;
; ------------------------------------------------------------- 

	jmp start

; ------------------------------------------------------------- Header

	!byte $80
	!byte $00,$00
	!word modend
	!byte $00,$00
	!pet "FLI-Designer    "
	!pet "1.00"
	!pet "07.10.16"
	!pet "A.Dettke/W.Kling"
;
; ------------------------------------------------------------- 

jerror	jmp error
;
start	ldx $20
	ldy $21
	stx dst0
	sty dst0+1
	jsr gd_xopen	; open file
	jsr onebyte
	bne jerror
	jsr onebyte	; skip start address ($3c00 or $3ff0)
	bne jerror
	jsr getname	; save filename
	jsr gd_clrms
	jsr tcopy

; ------------------------------------------------------------- Color RAM

	lda #7
	sta cntwert
	ldx #18
	jsr tcopy

	jsr getcram	; get color ram

; ------------------------------------------------------------- Video RAMs

	lda #50
	sta cntwert
	ldx #9
	jsr tcopy

	jsr setdst0
	lda #8		; get 8 video rams
	sta vrcnt
vloop	lda dst0
	ldy dst0+1
	sta dst
	sty dst+1
vloop0	jsr action
	jsr basin
	ldy #3
vloop1	sta (dst),y
	dey
	bpl vloop1
	lda dst
	clc
	adc #32
	sta dst
	bcc vskip0
	inc dst+1
vskip0	lda dst+1
	cmp #$bd
	bne vloop0
	ldy #24
	jsr dumy
	lda dst0
	clc
	adc #4
	sta dst0
	dec vrcnt
	bne vloop
;
; ------------------------------------------------------------- Bitmap

	ldx #27
	jsr tcopy
	lda #1
	sta adcnt

	jsr setdst0
bloop0	jsr basin		; get bitmap
	sta byte
	jsr action
	ldy #0
bloop1	lda #0
	asl byte
	rol
	asl byte
	rol
	beq null
	cmp #3
	beq drei
	cmp #1
	beq eins
	lda (dst0),y
	and #$0f
	ora #$20
	sta (dst0),y
	bne next
eins	lda (dst0),y
	lsr
	lsr
	lsr
	lsr
	ora #$10
	sta (dst0),y
	bne next
drei	lda #$30
	sta (dst0),y
	bne next
null	sta (dst0),y
next	iny
	cpy #4
	bne bloop1
	lda dst0
	clc
	adc #4
	sta dst0
	bcc bskip0
	inc dst0+1
bskip0	lda dst0+1
	cmp #$bd
	bne bloop0
	ldy #192
	jsr dumy

; ------------------------------------------------------------- Process Color RAM

	lda #7
	sta cntwert
	sta adcnt
	ldx #18
	jsr tcopy
;
	jsr setdst0
	lda #<(cbuf)	; process color ram
	ldx #>(cbuf)
	sta src
	stx src+1
cloop0	ldy #0
	lda (src),y
	inc src
	bne cskip00
	inc src+1
cskip00	and #$0f
	ora #$30
	sta byte
	jsr action
	ldy #31
cloop1	lda (dst0),y
	cmp #$30
	bne cskip0
	lda byte
	sta (dst0),y
cskip0	dey
	bpl cloop1
	lda dst0
	clc
	adc #32
	sta dst0
	bcc cskip1
	inc dst0+1
cskip1	lda dst0+1
	cmp #$bd
	bne cloop0
	ldy #24
	jsr dumy

; ------------------------------------------------------------- Background Color

	lda #200
	sta cntwert
	sta adcnt
	ldx #36
	jsr tcopy

	jsr setdst0
	lda #0		; process background color (black for all)
	and #$0f
	tax
	lda dnib,x
	sta byte
nloop0	jsr action
	ldy #0
	lda (dst0),y
	beq nskip0
	and #$0f
	tax
	lda dnib,x
	!byte $2c
nskip0	lda byte
	sta (dst0),y
	inc dst0
	bne nskip1
	inc dst0+1
nskip1	lda dst0+1
	cmp #$bd
	bne nloop0

; ------------------------------------------------------------- 

sk10	jsr gd_xmess	; end of processing
	jsr setinfo
	jsr gd_xclose
	lda #$03
	sta sprite
	sec
	rts

; ------------------------------------------------------------- 

getcram	lda #<(cbuf)	; read color ram bytes from disk
	ldx #>(cbuf)
	sta dst
	stx dst+1
	ldy #0
	ldx #4
gcl	jsr basin
	sta (dst),y
	jsr action
	iny
	bne gcl
	inc dst+1
	dex
	bne gcl
	rts

; ------------------------------------------------------------- 

dumy	jsr basin
	dey
	bne dumy
	rts
;
setdst0	lda #<($4000)
	ldy #>($4000)
	sta dst0
	sty dst0+1
	rts
;
onebyte	jsr basin
	ldx status
	rts
;
error	jsr gd_xclose
	jsr sk10
	clc
	rts

; ------------------------------------------------------------- 

messout	ldx #<(message)
	ldy #>(message)
	jmp gd_xtxout2
;
tcopy	ldy #0
tc0	lda txt,x
	beq clearmess
	sta message,y
	inx
	iny
	bne tc0
;
action	dec adcnt
	bne ld4
	stx stox
	sty stoy
	sta stoa
	lda cntwert
	sta adcnt
	ldy offy
	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld41
	inc offy
	lda #7
	sta offx
ld41	lda stoa
	ldy stoy
	ldx stox
ld4	rts

clearmess	ldx #20
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts

; ------------------------------------------------------------- 

dnib	!byte $00,$ff,$44,$cc,$55,$aa,$11,$dd
	!byte $66,$22,$99,$33,$77,$ee,$88,$bb
;
;
filltab	!byte 160,93,103,127,126,124,105,109
;
txt	!scr " Backgr @"	; 0 (not used)
          !scr " VRams  @"	; 9
	!scr " CRams  @"	; 18
	!scr " Bitmap @"	; 27
	!scr " Convert@"	; 36

message	!scr " Bitmap   "
mess 	!fill 22,32	; reserve 22 spaces
	!by 0

; ------------------------------------------------------------- 

	lastname	= $03dc
	movetab	= $0fd8
	picname	= $1fa8
	iloader	= picname+$16
	imode	= picname+$22
	idrive	= picname+$2e
;
getname	ldx #0
si0	lda lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts
;
getdatac	ldx #4
	!byte $2c
getdatag	ldx #9
	ldy #4
sinfo0	lda dtextc,x
	sta datatype,y
	dex
	dey
	bpl sinfo0
	rts
;
setinfo	jsr getdatac
	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata
;
setname	lda #0
	ldx #<(picname)
	ldy #>(picname)
	bne si3
setloader	lda #17
	ldx #<(iloader)
	ldy #>(iloader)
	bne si3
setmode	lda #25
	ldx #<(imode)
	ldy #>(imode)
	bne si3
setdata	lda #33
	ldx #<(idrive)
	ldy #>(idrive)
si3	stx dst0
	sty dst0+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (dst0),y
	inx
	iny
	bne si4
si5	rts
;
nbuf	!byte 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0
	!scr "FliDes @"
modetx	!scr "160x200@"
datatype	!scr "Color@"
ttext	!byte 84,5,24,20,32,32,32
htext	!byte 72,9,18,5,19,32,32
mtext	!byte $31,$36,$30,24,$32,$30,$30
dtextc	!byte 67,15,12,15,18
dtextg	!byte 71,18,5,25,32
modend	!eof
