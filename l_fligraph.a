
	!src "..\godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ------------------------------------------------------------ 
;
; ldr.FLIGraph
; Lader für Bilder des FLI-Editors der Demogruppe Blackmail
;
;    1.00, 21.11.99, bugfixes
;
; ------------------------------------------------------------ 

; ----------------------------------------- Equates

	stox		= $30
	stoy		= $31
	stoa		= $32
	adcnt		= $33
	dst0		= $35	; /$36
	dst		= $37	; /$38
	src		= dst
	byte		= $39
	cntwert		= $3a
	vrcnt		= $3b
	pack		= $3c
	pcnt		= $3d
	data		= $3e
	offx		= ls_adrmisc
	offy		= offx+1

	bcbuf		= sy_bigbuffer
	cbuf		= $ca00
	sprite		= $d015

; ----------------------------------------- Header

	jmp start
	!by $80
	!by $00,$00
	!wo modend
	!by $00,$00
	!tx "FLI by Blackmail"
	!tx "1.00"
	!tx "21.11.99"
	!tx "A.Dettke/W.Kling"

; ----------------------------------------- 

jerror	jmp error

; ----------------------------------------- Main

start	ldx #2
	stx cntwert
	dex
	stx adcnt
	ldx sc_vekt20
	ldy sc_vekt20+1
	stx dst0
	sty dst0+1
stt2	jsr getname	; save filename

	jsr gd_xopen	; open file
	jsr onebyte
	bne jerror
	jsr onebyte	; skip start address
	bne jerror
	jsr gd_clrms
; ------------------------------------------------------------- 

	jsr tcopy		; .x=0
	jsr getbckcol	; get background colors

	lda #7
	sta cntwert
	ldx #18
	jsr tcopy
	jsr getcram	; get color ram

; ------------------------------------------------------------- 

	lda #50
	sta cntwert
	ldx #9
	jsr tcopy
	jsr setdst0
	lda #8		; get 8 video rams
	sta vrcnt
vloop	lda dst0
	ldy dst0+1
	sta dst
	sty dst+1
vloop0	jsr action
	jsr basin
	ldy #3
vloop1	sta (dst),y
	dey
	bpl vloop1
	lda dst
	clc
	adc #32
	sta dst
	bcc vskip0
	inc dst+1
vskip0	lda dst+1
	cmp #$bd
	bne vloop0
	ldy #24
	jsr dumy
	lda dst0
	clc
	adc #4
	sta dst0
	dec vrcnt
	bne vloop

; ------------------------------------------------------------- 

	ldx #27
	jsr tcopy
	lda #1
	sta adcnt

	jsr setdst0
bloop0	jsr basin		; get bitmap
	sta byte
	jsr action
	ldy #0
bloop1	lda #0
	asl byte
	rol
	asl byte
	rol
	beq null
	cmp #3
	beq drei
	cmp #1
	beq eins
	lda (dst0),y
	and #$0f
	ora #$20
	sta (dst0),y
	bne next
eins	lda (dst0),y
	lsr
	lsr
	lsr
	lsr
	ora #$10
	sta (dst0),y
	bne next
drei	lda #$30
	sta (dst0),y
	bne next
null	sta (dst0),y
next	iny
	cpy #4
	bne bloop1
	lda dst0
	clc
	adc #4
	sta dst0
	bcc bskip0
	inc dst0+1
bskip0	lda dst0+1
	cmp #$bd
	bne bloop0
	ldy #192
	jsr dumy

; ------------------------------------------------------------- 

	lda #7
	sta cntwert
	sta adcnt
	ldx #18
	jsr tcopy

	jsr setdst0
	lda #<(cbuf)	; process color ram
	ldx #>(cbuf)
	sta src
	stx src+1
cloop0	ldy #0
	lda (src),y
	inc src
	bne cskip00
	inc src+1
cskip00	and #$0f
	ora #$30
	sta byte
	jsr action
	ldy #31
cloop1	lda (dst0),y
	cmp #$30
	bne cskip0
	lda byte
	sta (dst0),y
cskip0	dey
	bpl cloop1
	lda dst0
	clc
	adc #32
	sta dst0
	bcc cskip1
	inc dst0+1
cskip1	lda dst0+1
	cmp #$bd
	bne cloop0
	ldy #24
	jsr dumy

; ------------------------------------------------------------- 

	lda #200
	sta cntwert
	sta adcnt
	ldx #36
	jsr tcopy

	jsr setdst0
	lda #0		; process background color (black for all)
	and #$0f		; (in fact, we HAVE a buffer full of bkcols!)
	tax
	lda dnib,x
	sta byte
nloop0	jsr action
	ldy #0
	lda (dst0),y
	beq nskip0
	and #$0f
	tax
	lda dnib,x
	!by $2c
nskip0	lda byte
	sta (dst0),y
	inc dst0
	bne nskip1
	inc dst0+1
nskip1	lda dst0+1
	cmp #$bd
	bne nloop0

; ------------------------------------------------------------- 

sk10	jsr gd_xmess	; end of processing
	jsr setinfo
	jsr gd_xclose
	jsr gd_spron
	sec
	rts

; ------------------------------------------------------------- 

getcram	lda #<(cbuf)	; read color ram bytes from disk
	ldx #>(cbuf)
	sta dst
	stx dst+1
	ldy #0
	ldx #4
gcl	jsr basin
	sta (dst),y
	jsr action
	iny
	bne gcl
	inc dst+1
	dex
	bne gcl
	rts

; ------------------------------------------------------------- 

getbckcol	lda #<(bcbuf)	; read 256 background color bytes from disk
	ldx #>(bcbuf)
	sta dst
	stx dst+1
	ldy #0
	sty byte
gbc	jsr basin
	sta (dst),y
	ora byte
	sta byte
	jsr action
	iny
	bne gbc
	lda byte
	rts

; ------------------------------------------------------------- 

dumy	jsr basin
	dey
	bne dumy
	rts

; ----------------------------------------- 

setdst0	lda #<sy_4bit
	ldy #>sy_4bit
	sta dst0
	sty dst0+1
	rts

; ----------------------------------------- 

onebyte	jsr basin
	ldx status
	rts

; ----------------------------------------- 

error	jsr gd_xclose
	jsr sk10
	clc
	rts

; ------------------------------------------------------------- 

messout	ldx #<(message)
	ldy #>(message)
	jmp gd_xtxout2

tcopy	ldy #0
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0

action	dec adcnt
	bne ld4
	stx stox
	sty stoy
	sta stoa
	lda cntwert
	sta adcnt
	ldy offy
	cpy #22		; catch Gauge Overflow
	bne act0
	jsr clrmess
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld41
	inc offy
	lda #7
	sta offx
ld41	lda stoa
	ldy stoy
	ldx stox
ld4	rts

clrmess	ldx #20
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts

; ------------------------------------------------------------- 

dnib	!by $00,$ff,$44,$cc,$55,$aa,$11,$dd
	!by $66,$22,$99,$33,$77,$ee,$88,$bb


filltab	!by 160,93,103,127,126,124,105,109

txt	!scr " Backgr @"	; 0
	!scr " VRams  @"	; 9
	!scr " CRams  @"	; 18
	!scr " Bitmap @"	; 27
	!scr " Convert@"	; 36

message	!scr " Bitmap    "
mess	!fi 21,32
	!by 0

; ------------------------------------------------------------- 

getname	ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts

getdatac	ldx #4
	!by $2c
getdatag	ldx #9
	ldy #4
sinfo0	lda dtextc,x
	sta datatype,y
	dex
	dey
	bpl sinfo0
	rts

setinfo	jsr getdatac
	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata

setname	lda #0
	ldx #<(ls_picname)
	ldy #>(ls_picname)
	bne si3
setloader	lda #17
	ldx #<(ls_iloader)
	ldy #>(ls_iloader)
	bne si3
setmode	lda #25
	ldx #<(ls_imode)
	ldy #>(ls_imode)
	bne si3
setdata	lda #33
	ldx #<(ls_idrive)
	ldy #>(ls_idrive)
si3	stx dst0
	sty dst0+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (dst0),y
	inx
	iny
	bne si4
si5	rts

nbuf	!fi 16,32
	!by 0
	!scr "FLIGrph@"
modetx	!scr "160x200@"
datatype	!scr "Color@"
ttext	!scr "Text   "
htext	!scr "Hires  "
mtext	!scr "160x200"
dtextc	!scr "Color"
dtextg	!scr "Grey "

; ----------------------------------------- 

modend	!eof
