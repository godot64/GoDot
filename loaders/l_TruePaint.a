
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ------------------------------------------------ 
;
;    ldr.TruePaint
;
;
;    1.00:         , first release
;    1.01: 13.10.99, 
;
; ------------------------------------------------ 

; ------------------------------------------------ Equates

	pport		= $01

	ptype		= $30
	packed		= $31
	count		= $32
	pbyte		= $33
	gbyte		= $34
	dst0		= $35
	dst		= $37
	src		= $39
	cntwert		= $3b
	mx		= $3c
	my		= $3d
	page          	= $3e
	adcnt		= $3f

	stack		= sy_numbers
	offx		= ls_adrmisc
	offy		= offx+1

	global		=$8f40

	col0		= $c900
	colff		= col0-1
	cram		= $ca00
	ctab		= cram

	blank		= $d011
	sprite		= $d015
	ciacra		= $dc0e

; ------------------------------------------------ 

header	jmp start
	!by $80
	!by 0
	!by 0
	!wo modend
	!wo 0
	!tx "TruePaint MCI   "
	!tx "1.01"
	!tx "13.10.99"
	!tx "A.Dettke        "
;
; ------------------------------------------------ 

jerror	jmp error
jfaila	jmp faila
jfailb	ldx #105
	jmp failb
;
; ------------------------------------------------ 

start	ldx #1
	stx adcnt
	dex
	stx ptype
	stx page
	jsr getname

	jsr gd_xopen	; get first byte (must be $00)
	jsr onebyte
	bne jerror
	tax
	stx packed
	beq st0
	dex
	bne jfaila

st0 	jsr onebyte	; get second byte
	bne jerror
	and #$1f
	cmp #$08		; most probably compressed: $0801
	bne gm01
	jsr prepdecomp
	beq jfailb
gm01	cmp #$1c		; uncompressed: $1c00 or $9c00
	bne jfaila

gm0	jsr gd_clrms
	stx count		; .x=0
	jsr tcopy

; ------------------------------------------------ 
;
;        readmci
;
; ------------------------------------------------ 

readmci	lda #6		; get video RAM image 1
	jsr setcnt
	lda #<sy_4bit
	ldy #>sy_4bit
	jsr getvr

	ldx #12		; get bitmap 1
	jsr tcopy
	lda #52
	jsr setcnt
	lda #<(sy_4bit+1)
	ldx #>(sy_4bit+1)
	jsr getbm

	jsr getc0		; get background color

	ldx #12		; get bitmap 2
	jsr tcopy
	jsr scnt0
	lda #<(sy_4bit+3)
	ldx #>(sy_4bit+3)
	jsr getbm

	ldx #0		; get video ram image 1
	jsr tcopy
	lda #6
	jsr setcnt
	lda #<(sy_4bit+2)
	ldy #>(sy_4bit+2)
	jsr getvr

	ldx #24		; get color RAM
	jsr tcopy
	lda #7
	jsr setcnt
	jsr getcr

	lda col0+1
	sta col0

	ldx #48		; remap
	jsr tcopy
	lda #6
	jsr setcnt
	jsr render

	ldx #60
	jsr tcopy
	lda #200
	jsr setcnt
	jsr convcol

	jmp break

; ------------------------------------------------ 

getvr	sta dst0		; get video ram
	sty dst0+1
l1	sta dst
	sty dst+1
l0	ldy #0
	jsr unpack
	sta (dst),y	; get video 1, set to 8 'banks'
	ldy #4
	sta (dst),y
	ldy #8
	sta (dst),y
	ldy #12
	sta (dst),y
	ldy #16
	sta (dst),y
	ldy #20
	sta (dst),y
	ldy #24
	sta (dst),y
	ldy #28
	sta (dst),y
	jsr action
	lda dst
	clc
	adc #32
	sta dst
	bcc l0
	inc dst+1
	lda dst+1
	cmp #>sy_bigbuffer
	bcc l0

	ldy #0
l2	jsr unpack
	cpy #0
	bne skip1
	and #$0f		; get background color
	sta col0		; store it
	sta gr_fbkcol
skip1	iny
	cpy #24
	bne l2
	rts

; ------------------------------------------------ 

getbm	sta dst		; get bitmap 1
	stx dst+1
l3	ldy #0
	jsr unpack
	sta (dst),y
	jsr action
	lda dst
	clc
	adc #4
	sta dst
	bcc l3
	inc dst+1
	lda dst+1
	cmp #>sy_bigbuffer
	bcc l3

	ldy #192		; skip gap
l30	jsr unpack
	dey
	bne l30
	rts

; ------------------------------------------------ 

getc0	lda col0		; store bg color to buffer
	ldy #200
gc0	sta colff,y
	dey
	bne gc0
	rts

; ------------------------------------------------ 

getcr	lda ptype		; get color ram (according to draz format)
	beq gc2
	lda #<1000
	ldy #>1000
	bne gc3
gc2	lda #<1024
	ldy #>1024
gc3	sta ls_vekta8
	sty ls_vekta8+1
	lda #<cram
	ldx #>cram
	sta dst
	stx dst+1
	ldy #0
l5	jsr unpack
l50	and #$0f
	sta (dst),y	; store to buffer
	jsr action
	inc dst
	bne gc5
	inc dst+1

gc5	lda ls_vekta8	; count bytes
	bne gc4
	dec ls_vekta8+1
gc4	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	bne l5
	rts

getc02	lda pbyte
	beq gc6
	ldy #0
gc7	jsr unpack
	and #$0f
	sta col0+100,y
	iny
	cpy #100
	bne gc7
gc6	rts
;
; ------------------------------------------------ 

render	lda #0
	sta linenr
	lda #<sy_4bit
	ldx #>sy_4bit
	sta dst
	stx dst+1
	lda #<cram
	ldx #>cram
	sta src
	stx src+1

l8	lda #40
	sta blcnt
l10	lda #8
	sta lcnt
	jsr action
l9	ldy #0
	lda (src),y
	sta c31
	asl
	asl
	asl
	asl
	sta c30
	ldy linenr
	lda col0,y
	sta c01
	asl
	asl
	asl
	asl
	sta c00
	ldy #0
	lda (dst),y
	and #$f0
	sta c10
	lda (dst),y
	asl
	asl
	asl
	asl
	sta c20
	iny
	lda (dst),y
	sta bm1
	iny
	lda (dst),y
	lsr
	lsr
	lsr
	lsr
	sta c11
	lda (dst),y
	and #$0f
	sta c21
	iny
	lda (dst),y
	sta bm2
	jsr render1
	inc linenr
	lda dst
	clc
	adc #4
	sta dst
	bcc skip2
	inc dst+1
skip2	dec lcnt
	bne l9
	inc src
	bne skip3
	inc src+1
skip3	lda linenr
	sec
	sbc #8
	sta linenr
	dec blcnt
	bne l10
	lda linenr
	clc
	adc #8
	sta linenr
	lda dst+1
	cmp #>sy_bigbuffer
	bcs rok
	jmp l8
rok	rts

; ------------------------------------------------ 

unpack	lda packed
	beq no
	tya
	pha
	lda #$91
	jsr reu
	pla
	tay
	inc rm_werte+2
	bne getit1
	inc rm_werte+3
getit1	lda gbyte
	rts

no	jmp basin

; ------------------------------------------------ 

faila	ldx #72
failb	ldy #0
fl0	lda txt,x
	sta message,y
	inx
	iny
	cpy #32
	bne fl0
	jsr error
	jsr gd_clrms
	jsr messout
	clc
	rts

; ------------------------------------------------ 

prepdecomp
	lda ls_ramdrive	; test for REU
	and #7
	beq pd0		; 1750   : ok
	cmp #7		; Flash8 : not ok
	beq pd1
	and #4		; 1700/64: ok
	bne pd0
pd1	lda #0
	rts

pd0	sei		; stop interrupts
	jsr gd_sproff	; pointer off
	lda #0 		; blank screen
	sta blank
	sta ciacra	; stop interrupts definitely

	jsr setundo	; SetUndo
	lda #$90		; save system ($0800-$1fff)
	jsr reu

	lda #8		; get file
	sta ls_vekta8+1
	ldy #1
	sty ls_vekta8
	dey
pd3	jsr onebyte
	sta (ls_vekta8),y
	bne pd2
	inc ls_vekta8
	bne pd3
	inc ls_vekta8+1
	bne pd3
pd2	lda #$4c		; Patch: JMP continue
	sta $086f
	lda #<continue
	sta $0870
	lda #>continue
	sta $0871
	ldx #1
	lda $0803		; linenumber must be 9
	cmp #9
	beq pd20
	stx page
	bne pd51		; unconditional branch if not (skip decomp)
	
pd20	ldx #0		; save stack
pd21	lda stack,x
	sta modend,x
	inx
	bne pd21
	tsx
	stx modend+256

	jmp $080b		; decompress file (to $1c00), systems gets trashed here

continue	lda #$36
	sta pport

	ldx #0 		; restore stack
pd22	lda modend,x
	sta stack,x
	inx
	bne pd22
	ldx modend+256
	txs

pd51	lda #$e7		; move file to $4000
	sta ls_vekta8	; vekta8: $67e7
	sta sc_pos	; pos   : $8be7
	lda #$67
	sta ls_vekta8+1
	lda #$8b
	sta sc_pos+1

	ldy #0
pd6	lda (ls_vekta8),y
	sta (sc_pos),y
	lda ls_vekta8
	bne pd4
	dec ls_vekta8+1
	dec sc_pos+1
	lda sc_pos+1
	cmp #$3f
	beq pd5
pd4	dec ls_vekta8
	dec sc_pos
	jmp pd6

pd5	jsr setundo
	lda #$91		; restore system
	jsr reu
	ldx #$1b		; unblank screen
	stx blank
	jsr doundo	; file to undo
	jsr gd_spron	; pointer on
	lda #1
	sta ciacra
	cli		; allow interrupts
	jsr readundo
	lda page
	bne pd52
	lda #$1c		; flag: ok
pd52	rts		; now ready to process image

; ---------------------------------------------------------------------
; -------------------------------------------------------------- Undo
; ---------------------------------------------------------------------

doundo	lda #<undo	; eigentliche Routine verschieben
	ldx #>undo	; (weil das Modul ausgeblendet wird)
	sta ls_vekta8
	stx ls_vekta8+1
	ldy #setcnt-undo
sloop	lda (ls_vekta8),y
	sta global,y	; nach GLOBAL ('undo' at $8f40)
	dey
	bpl sloop
	jmp global	; und dann ausführen
;
undo 	jsr $8f77		; (Swapd) Ram einblenden
	ldx #10		; FirstInit
	jsr rm_ramvec
;
	lda #1		; Flag für 4Bit-Undo setzen
	sta rm_nextentry
;
getundo	ldx #9		; ($8f66) GetUndo (DoUndo bei #8)
	jsr rm_ramvec
	ldx #1		; danach ForceOff (Ram ausblenden)
	jsr rm_ramvec	
	lda #0		; und Sprite wieder aus, zurück
	sta sprite
	rts

setundo	ldx #6		; Parameter setzen ($8f5d)
	lda #0
md0	sta rm_werte,x
	dex
	bpl md0
md00	lda #8		; GoDot-Systembereich ($0800-$1fff)
	sta rm_werte+1
	lda #$10		; Undo4Bit im Ram ($01000)
	sta rm_werte+3
md01	lda #$18		; 6144 Bytes
	sta rm_werte+6
	rts

; ---------------------------------------------------------------------

swapd	lda #$92		; at $8f77, because system is corrupt now
	ldx #6
	!by $2c
reu	ldx #13
	sta rm_combuf
setreu	ldy #6
sre0	lda rm_swapw,x
	sta reubase+2,y
	dex
	dey
	bpl sre0
	lda rm_combuf
	sta reucom
	rts

; ------------------------------------------------ 

setcnt	sta cntwert
scnt0	lda #1
	sta adcnt
	rts

; ---------------------------------------------------------------------

readundo	ldx #6	
	lda #0
md8	sta rm_werte,x
	dex
	bpl md8
	lda #gbyte	; byte to read
	sta rm_werte  
	lda #$10		; Undo4Bit im Ram ($01000)
	sta rm_werte+3
	lda #1  		; 1 Byte
	sta rm_werte+5
	rts

; ------------------------------------------------ 

bm1	!by 0
bm2	!by 0
c00	!by 0
c10	!by 0
c20	!by 0
c30	!by 0
c01	!by 0
c11	!by 0
c21	!by 0
c31	!by 0

linenr	!by 0
lcnt	!by 0
blcnt	!by 0
bbuf	!by 0

; ------------------------------------------------ 

render1	ldy #0
l6	asl bm1
	rol
	asl bm1
	rol
	and #3
	tax
	lda c00,x
	sta bbuf
	asl bm2
	rol
	asl bm2
	rol
	and #3
	tax
	lda c01,x
	ora bbuf
	sta (dst),y
	iny
	cpy #4
	bne l6
	rts

; ------------------------------------------------ 

convcol	ldy #0
l11	tya
	and #$0f
	tax
	lda gdcols,x
	and #$0f
	sta bbuf
	tya
	lsr
	lsr
	lsr
	lsr
	tax
	lda gdcols,x
	and #$f0
	ora bbuf
	sta ctab,y
	iny
	bne l11

	lda #<sy_4bit
	ldx #>sy_4bit
	sta dst
	stx dst+1
	ldy #0
l12	lda (dst),y
	tax
	lda ctab,x
	sta (dst),y
	jsr action
	iny
	bne l12
	inc dst+1
	lda dst+1
	cmp #>sy_bigbuffer
	bcc l12
	rts

; ------------------------------------------------ 

gdcols	!by $00,$ff,$44,$cc
	!by $55,$aa,$11,$dd
	!by $66,$22,$99,$33
	!by $77,$ee,$88,$bb

; ------------------------------------------------ 

break	jsr gd_xmess
	jsr setinfo
	jsr gd_xclose
	jsr gd_spron
	cli
	sec
	rts
 
; ------------------------------------------------ 

onebyte	jsr basin
	sei
	ldx status
	rts

; ------------------------------------------------ 

error	jsr break
	clc
	rts

; ----------------------------------------- 

messout   ldx #<message	; display message and gauge
	ldy #>message
	jmp gd_xtxout2

tcopy	ldy #0		; Select message
tc0	lda txt,x		; in .x: offset to message
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0

clrmess   ldx #20		; clear gauge bar
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0		; init counters
	ldx #7	
	sty offy
	stx offx
	rts

action	stx mx
	sty my
	dec adcnt
	bne ld4
	lda cntwert
	sta adcnt
	ldy offy
	cpy #20
	bne act0
	jsr clrmess
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	ldy my
	ldx mx
	rts

filltab   !by 160,93,103,127,126,124,105,109

txt	!scr " VRam      @"		; Offset:    0
	!scr " BMap      @"	 	;            12
	!scr " CRam      @"		;            24
	!scr " Bckgrnd   @"		;            36
	!scr " ReMap     @"		;            48
	!scr " Colors    @"		;            60
	!scr "   ERROR: Not an MCI image.     " ;  72
	!scr "    ERROR: No REU detected.     " ; 105

message   !fill 11,32
mess	!fill 21,32
	!by 0

; ----------------------------------------- 

getname	ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts

setinfo	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata

setname	lda #0
	ldx #<ls_picname
	ldy #>ls_picname
	bne si3
setloader	lda #17
	ldx #<ls_iloader
	ldy #>ls_iloader
	bne si3
setmode	lda #25
	ldx #<ls_imode
	ldy #>ls_imode
	bne si3
setdata	lda #33
	ldx #<ls_idrive
	ldy #>ls_idrive
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts

nbuf	!fill 16,32
	!by 0
	!scr "TruePnt@"
modetx	!scr "160x200@"
datatype	!scr "Color@"

; ------------------------------------------------ 

modend	!eof
