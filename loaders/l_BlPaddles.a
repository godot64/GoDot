
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ---------------------------
;
;  ldr.BlPaddles
;  Loader for Blazing Paddles multicolor pictures
;
;  1.00: 03.10.91, first release
;  1.01: 30.10.05, store original bg color to system
;  1.02: 09.01.17, 
;  1.03: 13.02.92,
;  1.04: 05.10.18, optimized code
;  1.05: 12.09.21, added: break loading process with STOP key
;
; ---------------------------

; ----------------------------------------- Equates

	byte		= $34
	cnt		= byte
	gmode		= $35
	vr		= $36
	cr		= $38
	adcnt		= $3a

	offx		= ls_adrmisc
	offy		= offx+1

	vrbuf		= $c600
	crbuf		= vrbuf+1024
	col0		= crbuf+1024

; --------------------------- Header

	jmp start
	!by $80
	!by 0
	!by 0
	!wo modend
	!wo 0
	!tx "Blazing Paddles "
	!tx "1.05"
	!tx "12.09.21"
	!tx "W.Kling/A.Dettke"

; --------------------------- Main

jerror	jmp error

start	jsr getname	; store name

stt2	jsr gd_xopen	; open file
	jsr basin		; skip start address ($a000)
	bcs jerror
	jsr basin
	bcs jerror

; --------------------------- Get Multicolor Image

stt3	jsr gd_clrms	; clear message bar

	lda #50		; activity counter to 50
	sta cntwert
	ldx #1
	stx adcnt
	dex
	stx sc_stop	; init break by STOP	### 1.05
	ldx #30		; "Bitmap"
	jsr tcopy

	lda #<8064	; count 8064 bytes (bitmap)
	sta ls_vekta8
	lda #>8064
	sta ls_vekta8+1
	ldx #<sy_4bit	; destination $4000
	ldy #>sy_4bit
	stx sc_texttab
	sty sc_texttab+1

loop	jsr basin		; get bitmap
jerr2	bcs jerror
	ldx sc_stop	; STOP pressed?	### 1.05
	bne jerror
	sta byte
	jsr action
	ldy #0
	ldx #4		; convert to 4bit indexes
bloop	lda #0
	asl byte
	rol
	asl byte
	rol
	sta (sc_texttab),y
	inc sc_texttab
	bne sk
	inc sc_texttab+1
sk	dex
	bne bloop
	jsr count
	beq sk42
	lda status
	beq loop

; --------------------------- 

sk42	jsr basin		; get bg color
	bcs jerr2
	and #15		; isolate color value
	sta col0
 	sta gr_fbkcol

	lda #127		; skip rest of bitmap
	ldx #0
	sta ls_vekta8
	stx ls_vekta8+1
-	jsr basin
	bcs jerr2
	jsr action
	jsr count
	bne -

; --------------------------- 

sk2	lda #7		; get multi mode colors
	sta cntwert
	sta adcnt
	ldx #0		; out: "Colors 1"
	jsr tcopy

	lda #<1024	; count 1024 bytes (video RAM)
	sta ls_vekta8
	lda #>1024
	sta ls_vekta8+1
	lda #<vrbuf
	sta sc_texttab
	lda #>vrbuf
	sta sc_texttab+1

loop1	jsr basin		; get color RAM (no conversion)
jerr3	bcs jerr2
	ldx sc_stop	; STOP pressed?	### 1.05
	bne jerr2
	sta (sc_texttab),y
	jsr action
	ldy #0
	inc sc_texttab
	bne sk3
	inc sc_texttab+1
sk3	jsr count
	beq sk21
	jmp loop1

; --------------------------- 

sk21	lda #7		; out: "Colors 2"
	sta cntwert
	sta adcnt
	ldx #10
	jsr tcopy

	lda #<1024	; count 1024 bytes (color RAM)
	sta ls_vekta8
	lda #>1024
	sta ls_vekta8+1
	lda #<crbuf
	sta sc_texttab
	lda #>crbuf
	sta sc_texttab+1

loop2	jsr basin		; get color RAM (no conversion)
	bcs jerr3
	ldx sc_stop	; STOP pressed?	### 1.05
	bne jerr3
	sta (sc_texttab),y
	jsr action
	ldy #0
	inc sc_texttab
	bne sk31
	inc sc_texttab+1
sk31	jsr count
	beq sk5
	jmp loop2

; --------------------------- 

sk5	jsr gd_xclose	; close file

; --------------------------- 

	lda #<vrbuf	; convert to 4bit (set start addresses)
	sta vr
	lda #>vrbuf
	sta vr+1
	lda #<crbuf
	sta cr
	lda #>crbuf
	sta cr+1
	lda #<sy_4bit
	sta sc_texttab
	lda #>sy_4bit
	sta sc_texttab+1

	lda #<1000	; count 1000
	sta ls_vekta8
	lda #>1000
	sta ls_vekta8+1

	lda #200
	sta cntwert
	sta adcnt
	ldx #20
	jsr tcopy

loop3	lda (vr),y	; convert video RAM colors to 4bit
	pha
	lsr
	lsr
	lsr
	lsr
	sta col0+1
	pla
	and #$0f
	sta col0+2
	lda (cr),y	; convert color RAM colors to 4bit
	and #$0f
	sta col0+3

	lda #32
	sta cnt
bloop1	jsr action
	ldy #0
	lda (sc_texttab),y	; get values from 4bit (0-3)
	tax
	lda col0,x	; get color values from table
	tax
	lda dnib,x	; get conversion values to GoDot palette from table
	sta (sc_texttab),y	; write back to 4bit (double nibbles)
	inc sc_texttab	; advance
	bne sk6
	inc sc_texttab+1
sk6	dec cnt		; one tile
	bne bloop1

	inc vr		; next tile
	bne sk7
	inc vr+1
sk7	inc cr
	bne sk8
	inc cr+1

sk8	jsr count		; 1000 tiles
	bne loop3

; --------------------------- Close File

sk11	ldx #30		; reset text to default ("Bitmap")
	jsr tcopy
	jsr setinfo	; set filename

sk10	jsr gd_xmess	; error message from drive
	jsr gd_spron	; sprite pointer on
	sec		; leave loader
	rts

; --------------------------- 

error	jsr gd_xclose
	jsr sk10
	clc
	rts

; --------------------------- 

count 	lda ls_vekta8	; count bytes
	bne +
	dec ls_vekta8+1
+	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	rts

; --------------------------- Activity Display

messout	ldx #<message
	ldy #>message
	jmp gd_xtxout2

tcopy	ldy #0
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0

action	dec adcnt
	bne ld4
	lda cntwert
	sta adcnt
	ldy offy
	cpy #20
	bne act0
	jsr clrmess
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	rts

clrmess	ldx #20
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts

filltab	!by 160,93,103,127,126,124,105,109

cntwert	!by 50

txt	!scr " Colors 1@"	; 0
	!scr " Colors 2@"	; 10
	!scr " Convert @"	; 20
	!scr " Bitmap  @"   ; 30
	!scr " Move    @"   ; 40

message   !fill 11,32
mess	!fill 21,32
	!by 0

; --------------------------- Palette Table for MC double pixels

dnib	!by $00,$ff,$44,$cc,$55,$aa,$11,$dd
	!by $66,$22,$99,$33,$77,$ee,$88,$bb

; --------------------------- Save Filename

getname	ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts

; --------------------------- Image Information

setinfo	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata

setname	lda #0
	ldx #<ls_picname
	ldy #>ls_picname
	bne si3
setloader	lda #17
	ldx #<ls_iloader
	ldy #>ls_iloader
	bne si3
setmode	lda #25
	ldx #<ls_imode
	ldy #>ls_imode
	bne si3
setdata	lda #33
	ldx #<ls_idrive
	ldy #>ls_idrive
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts

nbuf	!fill 16,32
	!by 0
	!scr "BlzPads@"

modetx	!scr "160x200@"
datatype	!scr "Color@"

; ------------------------------------------------ 

modend	!eof
