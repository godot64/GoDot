
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ------------------------------------------------ 
;
;    ldr.DrazLace
;      loader for DrazLace or DrazPaint images
;
;
;    1.00: ?       , first release
;    1.01: 16.10.99, ?
;    1.02: 30.07.08, added storage of original bg color
;    1.03: 04.05.22, added: set render mode automatically
;
; ------------------------------------------------ 

; ------------------------------------------------ Equates

	ptype		= $30
	packed		= $31
	count		= $32
	pbyte		= $33
	gbyte		= $34
	dst0		= $35
	dst		= $37
	src		= $39
	cntwert		= $3b
	mx		= $3c
	my		= $3d
	page          	= $3e
	version		= $3f
	adcnt		= $40

	offx		= ls_adrmisc
	offy		= offx+1

	patch		= $17af
	col0		= $c900
	colff		= col0-1
	cram		= $ca00
	ctab		= cram

; ------------------------------------------------ 

header	jmp start
	!by $80
	!by 0
	!by 0
	!wo modend
	!wo 0
	!tx "DrazLace/Paint  "
	!tx "1.03"
	!tx "04.05.22"
	!tx "A.Dettke        "

; ------------------------------------------------ 

jerror	jmp error
jfail	jmp fail

; ------------------------------------------------ 

start	lda #1
	sta adcnt
	jsr getname

	jsr gd_xopen	; get first byte (must be $00)
	jsr onebyte
	bne jerror
	sta ptype
	sta packed
	sta page
	sta version
	tax
	bne jfail

	jsr onebyte	; get second byte (must be $58)
	bne jerror
	cmp #$58
	bne jfail

	jsr signature	; sets PACKED, PBYTE and VERSION if header present
			; sets PAGE with # of bytes already skipped if not

	jsr gd_clrms
	stx count
	jsr tcopy

; ------------------------------------------------ 
;
;	 read drazpaint
;
; ------------------------------------------------ 

readdraz	ldx #24		; get colorram
	jsr tcopy
	lda #7
	jsr setcnt
	jsr getcr

	ldx #0		; get video ram image 1
	jsr tcopy
	lda #6
	jsr setcnt
	lda #<sy_4bit
	ldy #>sy_4bit
	jsr getvr

	ldx #12		; get bitmap 1
	jsr tcopy
	lda #52
	jsr setcnt
	lda #<(sy_4bit+1)
	ldx #>(sy_4bit+1)
	jsr getbm

	jsr getc0		; get background color

	ldx version
	bne rd0

	ldx #12		; get bitmap 2
	jsr tcopy
	lda #52
	jsr setcnt
	lda #<(sy_4bit+3)
	ldx #>(sy_4bit+3)
	jsr getbm

rd0	ldx #48		; remap
	jsr tcopy
	lda #6
	jsr setcnt
	jsr render

	ldx #60
	jsr tcopy
	lda #200
	jsr setcnt
	jsr convcol

	jmp break

; ------------------------------------------------ 

getvr	sta dst0		; get video ram
	sty dst0+1
l1	sta dst
	sty dst+1
l0	ldy #0
	jsr unpack
	sta (dst),y	; and store it to the even scanlines
	ldy #2
	sta (dst),y
	ldy #4
	sta (dst),y
	ldy #6
	sta (dst),y
	ldy #8
	sta (dst),y
	ldy #10
	sta (dst),y
	ldy #12
	sta (dst),y
	ldy #14
	sta (dst),y
	ldy #16
	sta (dst),y
	ldy #18
	sta (dst),y
	ldy #20
	sta (dst),y
	ldy #22
	sta (dst),y
	ldy #24
	sta (dst),y
	ldy #26
	sta (dst),y
	ldy #28
	sta (dst),y
	ldy #30
	sta (dst),y
	jsr action
	lda dst
	clc
	adc #32
	sta dst
	bcc l0
	inc dst+1
	lda dst+1
	cmp #>sy_bigbuffer
	bcc l0

	ldy #0
	sty page
l2	jsr unpack
	iny
	cpy #24
	bne l2
	rts

; ------------------------------------------------ 

getbm	sta dst		; get bitmap 1
	stx dst+1
l3	ldy #0
	jsr unpack
	sta (dst),y
	ldx version
	beq l32
	ldy #2
	sta (dst),y	; and store it to the odd scanlines
l32	jsr action
	lda dst
	clc
	adc #4
	sta dst
	bcc l3
	inc dst+1
	lda dst+1
	cmp #>sy_bigbuffer
	bcc l3

	jsr unpack	; get background color
	ldx page
	bne l31
	sta col0
	sta gr_fbkcol	; store it
	inc page

l31	ldy #191		; skip gap
l30	jsr unpack
	dey
	bne l30
	rts

; ------------------------------------------------ 

getc0	lda col0		; store bg color to buffer
	ldy #200
gc0	sta colff,y
	dey
	bne gc0
	rts

; ------------------------------------------------ 

getcr	lda ptype		; get color ram (according to draz format)
	beq gc2
	lda #<1000
	ldy #>1000
	bne gc3
gc2	lda #<1024
	ldy #>1024
gc3	sta ls_vekta8
	sty ls_vekta8+1
	lda #<cram
	ldx #>cram
	sta dst
	stx dst+1
	ldy #0
l5	ldx packed	; packed image? 
	bne l51		; yes, ok
	ldx page		; header finished?
	bmi l51		; yes
	lda headbytes,x	; get headerbytes already skipped
	dec page
	jmp l50
l51	jsr unpack
l50	and #$0f
	sta (dst),y	; store to buffer
	jsr action
	inc dst
	bne gc5
	inc dst+1

gc5	lda ls_vekta8	; count bytes
	bne gc4
	dec ls_vekta8+1
gc4	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	bne l5
	rts

; ------------------------------------------------ 

render	lda #0
	sta linenr
	lda #<sy_4bit
	ldx #>sy_4bit
	sta dst
	stx dst+1
	lda #<cram
	ldx #>cram
	sta src
	stx src+1

l8	lda #40
	sta blcnt
l10	lda #8
	sta lcnt
	jsr action
l9	ldy #0
	lda (src),y
	sta c31
	asl
	asl
	asl
	asl
	sta c30
	ldy linenr
	lda col0,y
	sta c01
	asl
	asl
	asl
	asl
	sta c00
	ldy #0
	lda (dst),y
	and #$f0
	sta c10
	lda (dst),y
	asl
	asl
	asl
	asl
	sta c20
	iny
	lda (dst),y
	sta bm1
	iny
	lda (dst),y
	lsr
	lsr
	lsr
	lsr
	sta c11
	lda (dst),y
	and #$0f
	sta c21
	iny
	lda (dst),y
	sta bm2
	jsr render1
	inc linenr
	lda dst
	clc
	adc #4
	sta dst
	bcc skip2
	inc dst+1
skip2	dec lcnt
	bne l9
	inc src
	bne skip3
	inc src+1
skip3	lda linenr
	sec
	sbc #8
	sta linenr
	dec blcnt
	bne l10
	lda linenr
	clc
	adc #8
	sta linenr
	lda dst+1
	cmp #>sy_bigbuffer
	bcs rok
	jmp l8
rok	rts

; ------------------------------------------------ 

signature	ldy #0
sg0	jsr onebyte	; file begins with "draz"?
	sta headbytes,y
	cmp head,y
	bne sg1
	iny
	cpy #4
	bne sg0

	ldy #9		; yes, skip next 
sg2	jsr onebyte
	dey
	bne sg2
	and #15		; version 1.0 or 1.4?
	sta version
	jsr onebyte
	sta pbyte
	inc packed
	rts

sg1	sty page
	rts

; ------------------------------------------------ 

unpack	lda packed
	beq no
	lda count
	bne getit2
	inc count
	jsr basin
	cmp pbyte
	bne getit1
	jsr basin
	sta count
no	jsr basin
getit1	sta gbyte
getit2	dec count
	lda gbyte
	rts

; ------------------------------------------------ 

fail	ldx #72
	ldy #0
fl0	lda txt,x
	sta message,y
	inx
	iny
	cpy #32
	bne fl0
	jsr error
	jsr gd_clrms
	jsr messout
	clc
	rts

; ------------------------------------------------ 

setcnt	sta cntwert
scnt0	lda #1
	sta adcnt
	rts

; ------------------------------------------------ 

bm1	!by 0
bm2	!by 0
c00	!by 0
c10	!by 0
c20	!by 0
c30	!by 0
c01	!by 0
c11	!by 0
c21	!by 0
c31	!by 0

linenr	!by 0
lcnt	!by 0
blcnt	!by 0
bbuf	!by 0

; ------------------------------------------------ 

render1	ldy #0
l6	asl bm1
	rol
	asl bm1
	rol
	and #3
	tax
	lda c00,x
	sta bbuf
	asl bm2
	rol
	asl bm2
	rol
	and #3
	tax
	lda c01,x
	ora bbuf
	sta (dst),y
	iny
	cpy #4
	bne l6
	rts

; ------------------------------------------------ 

convcol	ldy #0
l11	tya
	and #$0f
	tax
	lda gdcols,x
	and #$0f
	sta bbuf
	tya
	lsr
	lsr
	lsr
	lsr
	tax
	lda gdcols,x
	and #$f0
	ora bbuf
	sta ctab,y
	iny
	bne l11

	lda #<sy_4bit
	ldx #>sy_4bit
	sta dst
	stx dst+1
	ldy #0
l12	lda (dst),y
	tax
	lda ctab,x
	sta (dst),y
	jsr action
	iny
	bne l12
	inc dst+1
	lda dst+1
	cmp #>sy_bigbuffer
	bcc l12
	rts

; ------------------------------------------------ 

gdcols	!by $00,$ff,$44,$cc
	!by $55,$aa,$11,$dd
	!by $66,$22,$99,$33
	!by $77,$ee,$88,$bb

; ------------------------------------------------ 

break	jsr gd_xmess
	jsr setinfo
	lda version
	bne +
	jsr tog2multi
+	jsr gd_xclose
	jsr gd_spron
	sec
	rts
; 
; ------------------------------------------------ 

onebyte	jsr basin
	ldx status
	rts

; ------------------------------------------------ 

error	jsr gd_xclose
	jsr break
	clc
	rts

; ----------------------------------------- Set Render Mode

tog2hires	lda #2		; für Umschalten auf Hires
	!by $2c
tog2multi	lda #0		; für Umschalten auf Multi    
	sta gr_cmode
	lda #16
	sta sc_br
	lda #$4c		; self modifying
	sta patch
	jsr ev_sccont	; Modus setzen und Anzeige anpassen
	lda #$20		; unpatch
	sta patch
	rts

; ----------------------------------------- 

messout   ldx #<message	; display message and gauge
	ldy #>message
	jmp gd_xtxout2

tcopy	ldy #0		; Select message
tc0	lda txt,x		; in .x: offset to message
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0

clrmess   ldx #20		; clear gauge bar
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0		; init counters
	ldx #7	
	sty offy
	stx offx
	rts

action	stx mx
	sty my
	dec adcnt
	bne ld4
	lda cntwert
	sta adcnt
	ldy offy
	cpy #20
	bne act0
	jsr clrmess
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	ldy my
	ldx mx
	rts

filltab   !by 160,93,103,127,126,124,105,109

head	!tx "draz"
headbytes	!tx "    "

txt	!scr " VRam      @"	; Offset: 0
	!scr " BMap      @"	;	12
	!scr " CRam      @"	;	24
	!scr " Bckgrnd   @"	;	36
	!scr " ReMap     @"	;	48
	!scr " Colors    @"	;	60
	!scr "  ERROR: Not a DrazLace image.  " ; 72

message   !fill 11,32
mess	!fill 21,32
	!by 0

; ----------------------------------------- 

getname	ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts

setinfo	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata

setname	lda #0
	ldx #<ls_picname
	ldy #>ls_picname
	bne si3
setloader	lda #17
	ldx #<ls_iloader
	ldy #>ls_iloader
	bne si3
setmode	lda #25
	ldx #<ls_imode
	ldy #>ls_imode
	bne si3
setdata	lda #33
	ldx #<ls_idrive
	ldy #>ls_idrive
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts

nbuf	!fill 16,32
	!by 0
	!scr "DrazLce@"

modetx	!scr "160x200@"
datatype	!scr "Color@"

; ------------------------------------------------ 

modend	!eof
