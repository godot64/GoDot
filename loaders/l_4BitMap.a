
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ----------------------------------------- 
;
; ldr.4Bit&Map
; Lader für die Arbeit mit Alphakanälen
;
; 1.00
; 1.01, 23.12.93:
; 1.02, 09.01.94: Bugfix (Mauszeiger aus)
; 1.03, 09.08.98:
; 1.04, 25.11.16: Image Info bleibt unverändert bei Clips und Compose
; 1.05, 18.07.17, added Preview
; 1.06, 13.12.17, bugfix: missing mouse pointer/open files
;                 when accessing bad files
; 1.07, 23.04.18, bugfix: couldn't change sources after Preview anymore
; 1.08, 14.02.20, bugfix: displaced distributor
; 1.09, 11.09.21: added: break loading process with STOP key
;
; ----------------------------------------- 


; ----------------------------------------- Equates

	packbyte	= $ad	; Konstante

	filetype	= $30
	counter	= $31
	gbyte	= $33
	pfvek	= $34
	pfbank	= $36
	brmerk	= $37
	readvek	= $38
	dst	= $3a
	bbreite	= $3c
	rrand	= $3e
	adcnt	= $3f
	skip	= $40
	doit	= $42

	offx	= $b2
	offy	= offx+1

	clip	= $033c

	vdc	= $d600
	vdcdata	= $d601
	bswitch	= $de80

; ----------------------------------------- Header
header	jmp start
	!by $80
	!by 4
	!by 1
	!wo modend
	!wo 0
	!pet "4Bit&Alpha&Add  "
	!pet "1.09"
	!pet "11.09.21"
	!pet "A.Dettke/W.Kling"
; ----------------------------------------- Leave
cancel	lda #$ff
	sta used
cn2	sec
	rts
; ----------------------------------------- Subs
jrequ	jmp requ
jerror	jmp error
; ----------------------------------------- Main
start	ldx used
	bmi jrequ
	beq cancel
	cpx #3
	bcs cancel
; ----------------------------------------- Einlesen
st0	ldy #0
	sty breite
	sty breite+1
	sty bbreite
	sty bbreite+1
	sty filetype
	sty sc_stop	; init break by STOP	### 1.09
	jsr setfull	; Startadressen setzen
	jsr gd_sproff	; Sprites aus
;
	jsr setsource
	beq ob7
	cmp #1
	bne ob6
	jsr srt2
	bcc ld61

ob6	cmp #3
	beq ld61
	jsr srt7
	bcc ld61

ob7	jsr getname
	jsr gd_xopen

	jsr onebyte	; Kennung einlesen: "G"
	bne jerror	; $00? Dann ungepackt, Startadresse überlesen
	tay		
	beq ld60
	jsr onebyte	; "O"
	bne jerror
	jsr onebyte	; "D"
	bne jerror
ld60	jsr onebyte	; Ziffer: "0" (Bild) oder "1" (Clip) oder Hi Startadresse
	bne jerror
	sta filetype
	tya		; war ungepackt ($00)?
	bne ld61
	sta filetype	; dann zum Filetype machen

ld61	asl filetype	; "lesbarer" machen (aus $30 wird $60, aus $31 wird $62)
	lda filetype
	and #2		; Clipfile?
	beq ob50

	jsr getfclip	; ja, Daten einlesen: Zeile, Spalte, Breite, Höhe
	lda clpbr		; neue Breite für Full
	sta brmerk
	jsr gbh2		; mal 32 für 4Bit

ob50	lda wclip		; wie soll verfahren werden?
	beq ob5		; 0: kein Clip

ob51	cmp #1
	bne ob52
	jsr set2clip	; 1: to Clip
	bne ob5

ob52	cmp #2
	bne ob53
	jsr setin2clip	; 2: into Clip
	bne ob5

ob53	jsr setorigin	; 3: to Origin

ob5	ldx which		; Modus:
	bne ld62		; Replace? (which=0)
	jsr setrplc	; ### 1.07 Distributor auf Replace setzen
	jsr getname	; Filenamen merken

ld62	jsr gd_clrms	; Messages und Activity initialisieren
	stx offy
	stx counter
	stx counter+1
	lda #200
	sta adcnt
	lda #7
	sta offx
; ----------------------------------------- Bild holen
ld0	ldx breite	; Bytezähler für Zeile
	stx ls_vekta8
	ldy breite+1
	sty ls_vekta8+1
	ldx bbreite
	stx skip
	ldy bbreite+1
	sty skip+1

ld01	ldy #0
	jsr readfile
	ldx status	; Floppyfehler?
	bne ld5		; ja, abbrechen
	ldx sc_stop	; STOP pressed?	### 1.09
	bne ld5		; yes, break

	jsr readbytes
	tax
	lda skip		; Skip?
	ora skip+1
	beq ld1
	txa
	sta (sc_texttab),y
	inc sc_texttab
	bne ld10
	inc sc_texttab+1
ld10	lda skip		; Skipzähler
	bne ld11
	dec skip+1
ld11	dec skip
ld1	lda ls_vekta8
	bne ld2
	dec ls_vekta8+1
ld2	dec ls_vekta8
; ----------------------------------------- Activity
	dec adcnt
	bne ld4
	lda #200
	sta adcnt
	ldy offy
	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
; ----------------------------------------- 
ld4	lda status
	bne ld5
	lda ls_vekta8
	ora ls_vekta8+1
	bne ld01		; Zeile fertig bei 0

	clc		; nächste Zeile $500 tiefer
	lda dst+1
	adc #5
	sta dst+1
	sta sc_texttab+1
	lda dst
	sta sc_texttab
	dec hoehe		; File fertig bei 0
	bne ld0
; ----------------------------------------- Abschluss
ld3	lda flag4		; RAM-Erweiterung?
	bne ld6		; ja, dort weiter

	ldx which		; Modus?
	bne ld5		; nicht Replace, dann skip

	lda wclip		; loading to Clips?			# 1.04
	bne ld5		; yes, don't create Image Info
	lda (doit,x)	; check for Replace/Compose
	cmp #$60		; Replace? (Code for RTS)
	bne ld5		; no, don't create Image Info 	# -- bis hier
	jsr setinfo

ld5	jsr gd_xclose	; File schließen
	jsr gd_xmess	; Floppy-Meldung

ld7	jsr gd_spron	; Mauszeiger an
	ldx #20		; reset der Messages
	lda #32
ld8	sta mess,x
	dex
	bpl ld8
	jmp cancel	; Abschluss
; ----------------------------------------- 
ld6	jsr srt4		; REU initialisieren
	jsr vw2		; Main-Screen aufbauen
	jmp ld7		; weiter wie oben
; ----------------------------------------- 
readbytes	jmp (doit)
; ----------------------------------------- 
messout	ldx #<(message)
	ldy #>(message)
	jmp gd_xtxout2
;
error	jsr ld5		; ### 1.06
	clc
	rts
;
onebyte	jsr basin
	ldx status
	rts
; ----------------------------------------- Variablen
mflag	!by 0
fflag	!by 0
flag4	!by 0
banks	!by $ff,$ff,0,0,3,7,$ff,$ff,1,0
bank	!by 7
ramtype	!by 0
abuf	!by 0
bbuf	!by 0
byte	!by 0
textoff	!by 0		; ### 1.07 Offset für Source-Textausgabe
list	!wo 0
clpzl	!by 0
clpsp	!by 0
clpbr	!by 40
clpho	!by 25
mclip	!by 0,0,40,25
full	!by 0,0,40,25
breite	!wo 0
hoehe	!by 25
ymerk	!by 0
used	!by $ff
which	!by 0
wclip	!by 0
clipoffs	!by 8,17,26,35
posneg	!scr "negpos"
ratenum	!pet " 25 50100"
wcliptx	!scr " to Full  to Clip into Clipto Origin"
fromwhich	!scr "ClipDiskTempUndoVDC2"

reuinit	!by <(gbyte),>(gbyte),0,$83,7,1,0
	!by 0,$c0,0,0,0,0,$10
; ----------------------------------------- 
filltab	!by 160,93,103,127,126,124,105,109
message	!scr " Reading  "
mess	!fill 22,32
	!by 0
; ----------------------------------------- 
requ	jsr setrplc	; ### 1.08, init distributor
	lda list+1
	bne rq1
	ldx sc_screenvek
	ldy sc_screenvek+1
	stx list
	sty list+1
rq1	inc used
	ldx #0
	stx status
	ldx #<(fourlst)
	ldy #>(fourlst)
	jsr gd_xmloop
rq0	jmp start
;
; ----------------------------------------- 
sevmod	inc used
sevrepl	inc used
	ldx used
	dex
	stx which
	bne modify
	lda flag4
	bne rq2
;
; ----------------------------------------- 
filereq	ldx #1
	jsr gd_xload
cn3	lda #3
	sta used
	sec
	rts
;
; ----------------------------------------- 
modify	ldx #<(modlst)
	ldy #>(modlst)
	jsr gd_screen
	jsr gd_eloop
	ldx used
	cpx #3
	bcs rq0
	lda flag4
	bne rq2
	jmp filereq
rq2	jmp gaugeout
;
; ----------------------------------------- 
setrplc	ldx #<(pureraw)	; ### 1.07 Distributor zugefügt
	ldy #>(pureraw)
	bne setdoit	; ### bis hier
; ----------------------------------------- 
sevadd	ldx #<(add)
	ldy #>(add)
	bne setdoit
; ----------------------------------------- 
sevbump	ldx #<(bump)
	ldy #>(bump)
	bne setdoit
; ----------------------------------------- 
sevalpha	ldx #<(alpha)
	ldy #>(alpha)

setdoit	stx doit
	sty doit+1
	sec
	rts
;
; ----------------------------------------- 
alpha	eor fflag
	pha
	and #$f0
	sta bbuf
	lda (sc_texttab),y
	pha
	lsr
	lsr
	lsr
	lsr
	ora bbuf
	tax
	lda atab,x
	and #$f0
	sta (sc_texttab),y
	pla
	and #$0f
	sta bbuf
	pla
	asl
	asl
	asl
	asl
	ora bbuf
	tax
	lda atab,x
	and #$0f
	ora (sc_texttab),y
	sta (sc_texttab),y
	rts
;
; ----------------------------------------- 
atab	!by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00,$00,$00,$00,$00,$00,$11,$11,$11,$11,$11,$11,$11,$11
	!by $00,$00,$00,$00,$11,$11,$11,$11,$11,$11,$11,$11,$22,$22,$22,$22
	!by $00,$00,$00,$11,$11,$11,$11,$11,$22,$22,$22,$22,$22,$33,$33,$33
	!by $00,$00,$11,$11,$11,$11,$22,$22,$22,$22,$33,$33,$33,$33,$44,$44
	!by $00,$00,$11,$11,$11,$22,$22,$22,$33,$33,$33,$44,$44,$44,$55,$55
	!by $00,$00,$11,$11,$22,$22,$22,$33,$33,$44,$44,$44,$55,$55,$66,$66
	!by $00,$00,$11,$11,$22,$22,$33,$33,$44,$44,$55,$55,$66,$66,$77,$77
	!by $00,$11,$11,$22,$22,$33,$33,$44,$44,$55,$55,$66,$66,$77,$77,$88
	!by $00,$11,$11,$22,$22,$33,$44,$44,$55,$55,$66,$77,$77,$88,$88,$99
	!by $00,$11,$11,$22,$33,$33,$44,$55,$55,$66,$77,$77,$88,$99,$99,$aa
	!by $00,$11,$11,$22,$33,$44,$44,$55,$66,$77,$77,$88,$99,$aa,$aa,$bb
	!by $00,$11,$22,$22,$33,$44,$55,$66,$66,$77,$88,$99,$aa,$aa,$bb,$cc
	!by $00,$11,$22,$33,$33,$44,$55,$66,$77,$88,$99,$aa,$aa,$bb,$cc,$dd
	!by $00,$11,$22,$33,$44,$55,$66,$77,$77,$88,$99,$aa,$bb,$cc,$dd,$ee
	!by $00,$11,$22,$33,$44,$55,$66,$77,$88,$99,$aa,$bb,$cc,$dd,$ee,$ff
;
; ----------------------------------------- 
bump	tax
	lda (sc_texttab),y
	and #$0f
	sta bbuf
	txa
	and #$0f
	clc
	adc bbuf
	sbc #6		;c=0 >-7
	bcs bs0
	lda #0
bs0	cmp #16
	bcc bs1
	lda #$0f
bs1	sta byte
	lda (sc_texttab),y
	lsr
	lsr
	lsr
	lsr
	sta bbuf
	txa
	lsr
	lsr
	lsr
	lsr
	clc
	adc bbuf
	sbc #6
	bcs bs2
	lda #0
bs2	cmp #16
	bcc bs3
	lda #$0f
bs3	asl
	asl
	asl
	asl
	ora byte
	rts
;
; ----------------------------------------- 
add	pha
	and #$0f
	ldx mflag
	beq div20
	bpl nodiv0
	lsr
div20	lsr
nodiv0	sta bbuf
	lda (sc_texttab),y
	and #$0f
	clc
	adc bbuf
	cmp #16
	bcc as0
	lda #15
as0	sta byte
	pla
	lsr
	lsr
	lsr
	lsr
	ldx mflag
	beq div21
	bpl nodiv1
	lsr
div21	lsr
nodiv1	sta bbuf
	lda (sc_texttab),y
	lsr
	lsr
	lsr
	lsr
	clc
	adc bbuf
	cmp #16
	bcc as1
	lda #15
as1	asl
	asl
	asl
	asl
	ora byte
pureraw	rts
;
; ----------------------------------------- 
sevmrate	lda mflag
	cmp #1
	bne mrt0
	lda #$fe
	sta mflag
mrt0	inc mflag
	lda mflag
	beq mrt1
	bmi mrt2
	ldx #8
	!by $2c
mrt1	ldx #5
	!by $2c
mrt2	ldx #2
	ldy #2
mrt3	lda ratenum,x
	sta ratetx,y
	dex
	dey
	bpl mrt3
	iny
mrt4	jsr setzeig
	jsr gettab
	ldy #6
	jmp gd_xtxout1
;
; ----------------------------------------- 
tabigad	!by <(rate),>(rate)
	!by <(pnpos),>(pnpos)
;
setzeig	lda #<(tabigad)
	sta ls_vekta8
	lda #>(tabigad)
	sta ls_vekta8+1
	rts
;
gettab	lda (ls_vekta8),y
	sta sc_screentab
	iny
	lda (ls_vekta8),y
gettab2	sta sc_screentab+1
	lda #0
	tax
	tay
gt0	jsr gd_setpos
	cpx #3
	bne gt0
	stx sc_ho
	jsr gd_trim
	jmp gd_initmove
;
; ----------------------------------------- 
sevposneg	lda fflag
	bmi spn0
	lda #$fe
	sta fflag
spn0	inc fflag
	beq spn1
	ldx #2
	!by $2c
spn1	ldx #5
	ldy #2
spn3	lda posneg,x
	sta posnegtx,y
	dex
	dey
	bpl spn3
	ldy #2
	jmp mrt4
; ----------------------------------------- 
gaugelst	!by 0,22,3,34,3,$02,0,0,$80
; ----------------------------------------- 
fourlst	!by 0
	!by 3,11,18,19,$81,0,0
	!scr "Load GoDot 4Bit@"
from4	!by 7,21,6,3,$c0,<(sev4from),>(sev4from)
fromtx4	!scr "Disk@"
clipgad	!by 10,18,11,3,$cf,<(evclip),>(evclip)
cliptxt	!scr " to Full @"
	!by 13,11,18,3,$ca,<(sevrepl),>(sevrepl)
	!scr "Replace@"
	!by 16,11,18,3,$ca,<(sevmod),>(sevmod)
	!scr "Modify Data@"
	!by 19,11,18,3,$c9,<(cn2),>(cn2)
	!scr "Cancel Load@"
	!by 11,29,11,7,$4d			; ### 1.05
	!wo ev_prviu
	!by $c0,5,16,6
	!scr "Select@"
	!by $c0,7,12,7
	!scr "Source:@"
	!by $c0,10,12,4
	!scr "Load@"
	!by $80
; ----------------------------------------- 
modlst	!by 0
	!by 3,11,18,19,$81,0,0
	!scr "Modify@"
	!by 9,11,18,3,$ca,<(sevbump),>(sevbump)
	!scr "Bump Map@"
	!by 12,11,11,3,$c8,<(sevalpha),>(sevalpha)
	!scr "AlphaCh@"
pnpos	!by 12,22,7,3,$cf,<(sevposneg),>(sevposneg),32
posnegtx	!scr "pos @"
	!by 15,11,11,3,$c8,<(sevadd),>(sevadd)
	!scr "Addition@"
rate	!by 15,22,7,3,$cf,<(sevmrate),>(sevmrate),32
ratetx	!scr " 50%@"
	!by 19,11,18,3,$c9,<(cn3),>(cn3)
	!scr "Cancel Load@"
	!by 11,29,11,7,$4d			; ### 1.05
	!wo ev_prviu
	!by $c0,6,15,8
	!scr "Apply as@"
	!by $80
; ----------------------------------------- 
	picname	= $1fa8
	iloader	= picname+$16
	imode	= picname+$22
	idrive	= picname+$2e
;
getname	ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts
;
getdatac	ldx #4
	!by $2c
getdatag	ldx #9
	ldy #4
sinfo0	lda dtextc,x
	sta datatype,y
	dex
	dey
	bpl sinfo0
	rts
;
setinfo	jsr getdatag
	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata
;
setname	lda #0
	ldx #<(picname)
	ldy #>(picname)
	bne si3
setloader	lda #17
	ldx #<(iloader)
	ldy #>(iloader)
	bne si3
setmode	lda #25
	ldx #<(imode)
	ldy #>(imode)
	bne si3
setdata	lda #33
	ldx #<(idrive)
	ldy #>(idrive)
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts
;
nbuf	!fill 16,32
	!by 0
	!scr "4BitGod@"
modetx	!scr "320x200@"
datatype	!scr "Color@"
ttext	!scr "Text   "
htext	!scr "320x200"
mtext	!scr "160x200"
dtextc	!scr "Color"
dtextg	!scr "Gray "
;
; ----------------------------------------- 
vw2	ldx list
	ldy list+1
	jsr gd_screen
	sec
	rts
;
; ----------------------------------------- 
setsource	lda flag4
	pha
	beq ob3
	cmp #3
	bne ob31
ob32	sei
	ldx #$12
	lda #$83
	jsr setvdc
	jsr clrlo
	cli
	ldx #<(readvdc)
	ldy #>(readvdc)
	bne ob4
ob31	lda ramtype
	cmp #4
	bcs ob30
	cmp #3
	bne ob32
	lda #$80
	ldx #0
	sta pfvek+1
	stx pfvek
	lda #8
	sta pfbank
	ldx #<(readpfox)
	ldy #>(readpfox)
	bne ob4
ob30	cmp #7		; SuperCPU?
	beq ob3		; noch nicht implementiert: Disk
	ldx #<(readreu)
	ldy #>(readreu)
	bne ob4
ob3	ldx #<(readdisk)
	ldy #>(readdisk)
ob4	stx readvek
	sty readvek+1
	pla
	rts
;
; ----------------------------------------- 
gaugeout	lda sc_screenvek
	pha
	lda sc_screenvek+1
	pha
	ldx #<(gaugelst)
	ldy #>(gaugelst)
	jsr gd_screen
	pla
	sta sc_screenvek+1
	sta gr_redisp
	pla
	sta sc_screenvek
	jmp st0
;
; ----------------------------------------- 
readfile	jmp (readvek)
; ----------------------------------------- 
readvdc	sei
	ldx #$1f
	stx vdc
tv2	bit vdc
	bpl tv2
	lda vdcdata
	cli
	rts
;
clrlo	inx
	lda #0
setvdc	stx vdc
tv5	bit vdc
	bpl tv5
	sta vdcdata
	rts
;
; ----------------------------------------- 
readpfox	sei
	sty ymerk
	inc 1
	ldy #0
	lda pfbank
	sta bswitch
	lda (pfvek),y
	sta gbyte
	lda #$ff
	sta bswitch
	inc pfvek
	bne pw0
	inc pfvek+1
pw0	lda pfvek+1
	cmp #$c0
	bne pw1
	lda pfbank
	cmp #10
	beq pw1
	lda #10
	sta pfbank
	lda #$80
	sta pfvek+1
pw1	dec 1
	cli
	ldy ymerk
	lda gbyte
	rts
; ----------------------------------------- Read REU
readreu	lda #$91
	jsr gd_reu
	inc rm_werte+2
	bne rr0
	inc rm_werte+3
rr0	iny
	lda gbyte
	rts
; ----------------------------------------- Read Floppy
readdisk	lda counter
	ora counter+1
	bne getit2
	inc counter
	jsr basin
	cmp #packbyte
	bne getit1
	bit filetype
	bvc getit1
	jsr basin
	sta counter
	beq rb2
	lda #0
	beq rb3
rb2	lda #1
rb3	sta counter+1
	jsr basin
getit1	sta gbyte
getit2	lda counter
	bne rb4
	dec counter+1
rb4	dec counter
	lda gbyte
	rts
;
; ----------------------------------------- 
sev4from	lda ls_drive+6
	and #15
	sta ramtype
	tay
	lda banks,y
	sta bank
	cpy #9		; ### 1.07 bugfix
	beq ok
next	lda flag4
	cmp #3
	bne srt0
	lda #$ff
	sta flag4
srt0	inc flag4
	beq srt1
	lda flag4
	cmp #1
	beq srt2
	cmp #3
	beq srt8
	lda rm_ramundo
	and #1
	beq next
srt7	ldx #$10
	lda #0
	jsr srt3
	ldx #15
	bne text4
;
srt3	stx reuinit+3
	sta reuinit+4
	ldx #6
	!by $2c
srt4	ldx #13
	ldy #6
srt5	lda reuinit,x
	sta rm_werte,y
	dex
	dey
	bpl srt5
ok	clc
	rts
;
srt2	lda rm_tmpsaved
	and #1
next1	beq next
	ldx #$83
	lda bank
	jsr srt3
	ldx #11
	bne text4
;
srt1	jsr srt4
	ldx #7
text4	stx textoff	; ### 1.07, ab hier --
	ldx #0		; check for being in Modify Mode 
	lda (doit,x)
	cmp #$60		; $60 is code for RTS ; bis hier --
	bne ok		; if .a=$60: we are in Replace Mode, leave 
	ldx textoff	; ### bis hier --
	ldy #3
srt6	lda fromwhich,x
	sta fromtx4,y
	dex
	dey
	bpl srt6
	lda #<(from4)
	sta sc_screentab
	lda #>(from4)
srt9	jsr gettab2
	ldy #6
	jmp gd_xtxout1
;
srt8	lda rm_tmpsaved
	and #2
	beq next1
	ldx #19
	bne text4
;
; ---------------------------------------- Clipeinstellungen
evclip	lda wclip
	cmp #3
	bne ecl0
	lda #$ff
	sta wclip
ecl0	inc wclip

	ldx wclip
	lda clipoffs,x
	tay
	ldx #8
ecl1	lda wcliptx,y
	sta cliptxt,x
	dey
	dex
	bpl ecl1
	lda #<clipgad
	sta sc_screentab
	lda #>clipgad
	jmp srt9
; ----------------------------------------- Clipdaten einlesen
jerror2	jmp error
getfclip	jsr onebyte	; Clipzeile holen
	bne jerror2	; bei Fehler: Abbruch
	sta clpzl
	jsr onebyte	; Clipspalte holen
	bne jerror2
	sta clpsp
	jsr onebyte	; Clipbreite holen
	bne jerror2
	sta clpbr
	jsr onebyte	; Cliphöhe holen
	bne jerror2
	sta clpho
	rts
; ----------------------------------------- Full setzen
setfull	lda filetype	; echter Clip?
	ldx full+2
	and #2
	beq gm9		; nein
	ldx brmerk	; sonst: Breite merken
gm9  	ldy #3
gm0	lda full,y
	sta mclip,y
	sta clpzl,y
	dey
	bpl gm0
	jsr setclip
	lda full+3	; Höhe 25
	sta hoehe
	txa
	sta rrand		; rechter Rand 40/Clipbreite
	jmp gbh2		; Breite und Skip
; ---------------------------------------- Startadresse des Clips
setclip	lda #$40		; $4000
	sta sc_texttab+1
	ldy #$00
	sty sc_texttab


stcl	lda mclip		; plus Clipzeile * 1280
	beq scp1
	sta clpzl
scp4	clc
	lda sc_texttab+1
	adc #5
	sta sc_texttab+1
	dec clpzl
	bne scp4

scp1	lda mclip+1	; plus Clipspalte * 32
	beq scp5
	sta clpsp
scp6	clc
	lda sc_texttab
	adc #$20
	sta sc_texttab
	bcc scp7
	inc sc_texttab+1
scp7	dec clpsp
	bne scp6		; ist Startadresse 

scp5	lda sc_texttab
	ldy sc_texttab+1
	sta dst
	sty dst+1
	rts 
; ----------------------------------------- Cliptop/File setzen
set2clip	ldy #3		; Breite/Höhe aus File
gm8	lda clpzl,y
	sta mclip,y
	dey
	bpl gm8
	lda full+2	; rechter Rand auf 40
	sta rrand
	ldy #1
gm1	lda clip,y	; Zeile/Spalte aus Clip
	sta mclip,y
	dey
	bpl gm1
gm4	lda clpho		; Höhe passt?
gm5	clc
	adc clip
	cmp #25
	bcc gm7
	lda #25		; zu hoch, begrenzen
	sbc clip
gm7	ldx clpbr		; Breite aus File
	sta hoehe
	jsr getbbr	; Überhang berechnen
gm6	jsr getbr
	beq setclip
; ----------------------------------------- Clip aus GoDot setzen
setin2clip
	ldy #3
gm2	lda clip,y
	sta mclip,y
	dey
	bpl gm2
	clc		; rechter Rand = clipsp+clipbr
	lda clip+1
	adc clip+2
	sta rrand
	lda clip+3	; Höhe aus Clip 
	bne gm7
; ----------------------------------------- Clip aus File setzen
setorigin	ldy #3		; Zeile und Spalte aus File
gm3	lda clpzl,y
	sta mclip,y
	dey
	bpl gm3
	lda full+2	; rechter Rand = 40
	sta rrand
	lda clip+1	; GoDotclip uninteressant
	pha
	lda clpsp		; mit Fileclip überschreiben
	sta clip+1
	lda clpho
	jsr gm7		; Breite und Höhe aus File
	pla		; GoDotclip zurück
	sta clip+1
	rts
; ----------------------------------------- Filebreite holen
getbr	ldy #0
	sty breite
	sty breite+1
gbh0	clc		; Breite * 32
	lda breite
	adc #$20
	sta breite
	bcc gbh1
	inc breite+1
gbh1	dex
	bne gbh0		; ist Zähler für Breite 
	rts
; ----------------------------------------- Wahre Breite des Clips
getbbr	stx brmerk	; Breite retten
	txa
	clc
	adc clip+1	; Breite plus Start zu breit?
	cmp rrand
	bcc gbh2
	lda rrand		; dann begrenzen
	sec
	sbc clip+1

gbh2	tax		; mal 32
	jsr getbr
	lda breite
	sta bbreite	; und merken
	lda breite+1
	sta bbreite+1

	ldx brmerk	; Breite wieder zurück
	rts

modend	!eof
