
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ----------------------------------------- 
;
; ldr.Diashow
; loader for graphics freezer module "Diashow Maker" files
; Diashow Maker is able to save all kinds of C64 screen contents,
; either graphics or text (in different modes). It also saves
; sprites and their positions and new character sets.
; 
; 1.04, 13.02.92, latest release
; 1.05: 30.07.08, added storage of original bg color
; 1.06, 12.09.21: added: break loading process with STOP key
; 1.07, 04.05.22: added: set render mode automatically
;
; ----------------------------------------- 

; ----------------------------------------- Equates

	byte	= $30
	cnt	= $31
	vr	= $32	; /$33
	cr	= $34	; /$35
	gbyte	= $36
	counter	= $37	; /$38
	cnttemp	= $39
	merk	= $3a
	vv	= $3b	; /$3c

	offx	= $b2
	offy	= $b3

	nambuf	= $0200
	patch	= $17af

	vrbuf	= $c600
	crbuf	= $ca00
	col0	= $ce00

	spriteon	= $d015

; ------------------------------------------------------------ 

	jmp start

	!by $80
	!by 0,0
	!wo modend
	!wo 0
	!tx "Diashow         "
	!tx "1.07"
	!tx "04.05.22"
	!tx "W.Kling/A.Dettke"
	
; ------------------------------------------------------------ 

jerror	jmp error

; ----------------------------------------- Main

start	jsr getname
	lda #$56
	sta cntwert
	sta cnttemp
	ldx sc_vekt20
	ldy sc_vekt20+1
	stx sc_texttab
	sty sc_texttab+1

	lda nambuf	; check if name is Koala name
	cmp #$c1		; Spades?
	bne stt1
	lda #$81
stt1	sta nambuf
	ldx $a7
	cpx #$10
	beq stt2
	lda #$2a		; add "*" (because of trailing spaces)
	sta nambuf,x
	inc $a7

stt2	lda #$00
	sta sc_stop	; init break by STOP	### 1.06
	sta counter
	sta counter+1
	jsr gd_xopen
	jsr onebyte
	bne jerror
	tax 
	beq rl0
	jsr over
	bne jerror
rl0	jsr onebyte
	bne jerror
	jsr gd_clrms

; ----------------------------------------- 

	ldx #$1b
	jsr tcopy

read	lda #$40		; 13632 Bytes einlesen (und dabei entpacken)
	sta ls_vekta8
	lda #$35
	sta ls_vekta8+1
rloop	jsr unpack
	sta (sc_texttab),y
	ldy sc_stop	; STOP pressed?	### 1.06
	bne jerror
	txa 
	and #$bf
	bne jerror
	jsr action
	ldy #$00
	inc sc_texttab
	bne rl1
	inc sc_texttab+1
rl1	lda ls_vekta8
	bne rl2
	dec ls_vekta8+1
rl2	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	bne rloop
rl3	jsr gd_xclose

; ----------------------------------------- 

	lda #63
	sta cntwert
	sta cnttemp
	ldx #36		; Offset to text "Move"
	jsr tcopy

mloop	ldx #8		; get 8 pages (2048 bytes colors)
	lda #>vrbuf	; write to $c600
	sta ls_vekta8+1
	lda #$42		; read from $4200
	sta sc_texttab+1
	jsr move

	lda $4a21		; background color (to $ce00)
	and #$0f
	sta col0
	sta gr_fbkcol	; store it to system

	ldx #32		; get 32 pages (8192 bytes bitmap)
	lda #$a0		; write to $a000
	sta ls_vekta8+1
	lda #$56		; read from $5600
	sta sc_texttab+1
	jsr move

; ----------------------------------------- 

	ldx #6		; prepare info text
cls0	lda mtext,x
	sta modetx,x
	dex 
	bpl cls0

	lda $4a11		; is graphics mode active? 
	and #$20
	bne cols0
	jsr context	; no, convert text to hires graphics

cols0	lda $4a16		; is it multicolor mode?
	and #$10
	bne cols
	jsr conhir	; no, process hires data
	jsr hires
	jsr setinfoc
	jsr tog2hires	; ### 1.07
	jmp sk11

; ----------------------------------------- Multicolor data

cols	lda #$32
	sta cntwert
	sta cnttemp
	ldx #$00		; "Colors"
	jsr tcopy

	lda #$40		; convert 8000 bytes at $a000 to 4bit
	sta ls_vekta8
	lda #$1f
	sta ls_vekta8+1
	lda #$00
	tay 
	sta cr
	sta sc_texttab
	lda #$a0
	sta cr+1
	asl
	sta sc_texttab+1

loop	lda (cr),y
	sta byte
	jsr action
	ldy #$00
	ldx #$04
bloop	lda #$00
	asl byte
	rol 
	asl byte
	rol 
	sta (sc_texttab),y
	inc sc_texttab
	bne sk
	inc sc_texttab+1
sk	dex 
	bne bloop
	inc cr
	bne bl1
	inc cr+1
bl1	lda ls_vekta8
	bne sk1
	dec ls_vekta8+1
sk1	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	bne loop

sk2	ldy #$00		; convert and write to $4000
	lda #<vrbuf
	sta vr
	lda #>vrbuf
	sta vr+1
	lda #<crbuf
	sta cr
	lda #>crbuf
	sta cr+1
	lda #$00
	sta sc_texttab
	lda #$40
	sta sc_texttab+1
	lda #$e8		; 1000 bytes
	sta ls_vekta8
	lda #$03
	sta ls_vekta8+1

; ----------------------------------------- 

	lda #$c8
	sta cntwert
	sta cnttemp
	ldx #$09		; "Convert"
	jsr tcopy

loop2	lda (vr),y
	pha 
	lsr 
	lsr 
	lsr 
	lsr 
	sta col0+1
	pla 
	and #$0f
	sta col0+2
	lda (cr),y
	and #$0f
	sta col0+3
	lda #32
	sta cnt
bloop1	jsr action
	ldy #$00
	lda (sc_texttab),y
	tax 
	lda col0,x
	tax 
	lda dnib,x
	sta (sc_texttab),y
	inc sc_texttab
	bne sk6
	inc sc_texttab+1
sk6	dec cnt
	bne bloop1
bl3	inc vr
	bne sk7
	inc vr+1
sk7	inc cr
	bne sk8
	inc cr+1
sk8	lda ls_vekta8
	bne sk9
	dec ls_vekta8+1
sk9	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	bne loop2
	jsr setinfoc
	jsr tog2multi	; ### 1.07

; ----------------------------------------- 

sk11	ldx #$12		; set back to "Bitmap"
	jsr tcopy

sk10	jsr gd_xmess	; finish 
	lda #$03
	sta spriteon
	sec 
	rts 

; ----------------------------------------- Service routines

onebyte	jsr basin
	ldx status
	rts 

; ----------------------------------------- 

error	jsr gd_xclose
	jsr sk10
	clc 
	rts 

; ----------------------------------------- 

unpack	lda counter	; packbits: 	$cf (+ amount of nullbytes),
	ora counter+1	; 		$bf counter byte
	bne getit2	; if indicator followed by $00, write indictator
	inc counter
	jsr basin
	cmp #$cf
	bne up0
	sta gbyte
	jsr basin
	beq getit2
	sta counter
	inc counter
	bne up2
	inc counter+1
up2	lda #$00
	beq getit1
up0	cmp #$bf
	bne getit1
	sta gbyte
	jsr basin
	beq getit2
	sta counter
	inc counter
	bne up3
	inc counter+1
up3	jsr basin
getit1	sta gbyte
getit2	lda counter
	bne up4
	dec counter+1
up4	dec counter
	lda gbyte
	ldx status
	rts 

; ----------------------------------------- 

messout	ldx #<message
	ldy #>message
	jmp gd_xtxout2

tcopy	ldy #$00
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx 
	iny 
	bne tc0

action	dec cnttemp
	bne ld4
	lda cntwert
	sta cnttemp
	ldy offy
	cpy #22
	bne act0
	jsr clrmess
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #$07
	sta offx
ld4	rts 

clrmess	ldx #22		; clear message buffer
	lda #$20
cl0	sta mess,x
	dex 
	bpl cl0
	ldy #$00
	ldx #$07
	sty offy
	stx offx
	rts 

; ----------------------------------------- 

over	lda #$13		; skip autorun header if present (275 bytes)
	sta ls_vekta8
	lda #$01
	sta ls_vekta8+1
ov0	jsr basin
	lda status
	bne leave
	lda ls_vekta8
	bne ov1
	dec ls_vekta8+1
ov1	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	bne ov0
leave	rts 

; ----------------------------------------- Move pages

move	stx merk		; move data, x-reg	: number of pages
	lda #$00		;		sc_texttab: source
	tay 		;		ls_vekta8 : destination 
	sta ls_vekta8
	sta sc_texttab
ml1	lda (sc_texttab),y
	sta (ls_vekta8),y
	tya 
	pha 
	jsr action
	pla 
	tay 
	iny 
	bne ml1
	inc ls_vekta8+1
	inc sc_texttab+1
	dec merk
	bne ml1
	rts 

; ----------------------------------------- Convert to hires

hires	lda #$32
	sta cntwert
	sta cnttemp
	ldx #$12		; "Bitmap"
	jsr tcopy

	lda #$40		; convert 8000 bytes from $a000 to $4000
	sta ls_vekta8
	lda #$1f
	sta ls_vekta8+1
	lda #$00
	tay 
	sta vr
	sta cr
	sta sc_texttab
	sta vv
	lda #$a0
	sta cr+1
	asl
	sta sc_texttab+1
	lda #>vrbuf
	sta vr+1
	lda #>crbuf
	sta vv+1

hloop1	ldx #$08
	stx merk
hilp	lda (cr),y
	sta byte
	jsr action
	ldy #$00
	ldx #$04
hl2	asl byte
	bcc hl3
	lda (vv),y
	!by $2c
hl3	lda (vr),y
	and #$0f
	tay 
	lda dnib,y
	and #$f0
	sta col0
	ldy #$00
	asl byte
	bcc hl4
	lda (vv),y
	!by $2c
hl4	lda (vr),y
	and #$0f
	tay 
	lda dnib,y
	and #$0f
	ora col0
	ldy #$00
	sta (sc_texttab),y
	inc sc_texttab
	bne lh5
	inc sc_texttab+1
lh5	dex 
	bne hl2
	inc cr
	bne hl6
	inc cr+1
hl6	lda ls_vekta8
	bne hl7
	dec ls_vekta8+1
hl7	dec ls_vekta8
	dec merk
	bne hilp
	inc vr
	bne hl8
	inc vr+1
hl8	inc vv
	bne hl9
	inc vv+1
hl9	lda ls_vekta8
	ora ls_vekta8+1
	bne hloop1
	rts 

; ----------------------------------------- 

conhir	ldx modetx	; mode: "t"ext?
	cpx #$54
	beq chi0
	ldx #$06		; no, hires
chi1	lda htext,x
	sta modetx,x
	dex 
	bpl chi1

chi0	lda #$07		; convert hires to 4bit
	sta cntwert
	sta cnttemp
	ldx #$00
	jsr tcopy

	ldx #$04		; convert colors
	stx merk
	lda #$00
	tay 
	sta ls_vekta8
	sta sc_texttab
	lda #>vrbuf
	sta ls_vekta8+1
	lda #>crbuf
	sta sc_texttab+1
ml2	lda (ls_vekta8),y
	sty vv
	asl
	rol vv
	asl
	rol vv
	asl
	rol vv
	asl
	rol vv
	ora vv
	sta (sc_texttab),y
	tya 
	pha 
	jsr action
	pla 
	tay 
	iny 
	bne ml2
	inc ls_vekta8+1
	inc sc_texttab+1
	dec merk
	bne ml2
	rts 

; ----------------------------------------- 

context	ldx #$06		; convert text to 4bit
ctx0	lda ttext,x
	sta modetx,x
	dex 
	bpl ctx0
	lda #$0d
	sta cntwert
	sta cnttemp
	ldx #$09		; "Text"
	jsr tcopy

	tya 
	ldx #$04		; move 4 pages (1024 bytes character set)
	stx merk
	tax 
	sta ls_vekta8
	sta sc_texttab
	lda #$a0		; chars at $4200 (to $a000)
	sta ls_vekta8+1
	lda #$42
	sta sc_texttab+1

ctl	txa 
	pha 
	jsr action
	pla 
	tax 
	ldy #$00
	sty sc_pos+1
	lda (sc_texttab),y
	sta sc_pos
	asl sc_pos
	rol sc_pos+1
	asl sc_pos
	rol sc_pos+1
	asl sc_pos
	rol sc_pos+1
	clc 
	lda sc_pos+1
	adc #$56
	sta sc_pos+1
	ldy #$07
ct0	lda (sc_pos),y
	sta (ls_vekta8),y
	dey 
	bpl ct0
	clc 
	lda ls_vekta8
	adc #$08
	sta ls_vekta8
	bcc ct1
	inc ls_vekta8+1
ct1	inc sc_texttab
	bne ct2
	inc sc_texttab+1
ct2	inx 
	bne ctl
	dec merk
	bne ctl

; ----------------------------------------- 

movecol	ldx #$04		; don't forget the colors
	stx merk
	lda #$00
	sta ls_vekta8
	sta sc_texttab
	tay 
	lda #>crbuf
	sta ls_vekta8+1
	lda #>vrbuf
	sta sc_texttab+1
mc0	lda (ls_vekta8),y
	asl
	asl
	asl
	asl
	ora col0
	sta (sc_texttab),y
	tya 
	pha 
	jsr action
	pla 
	tay 
	iny 
	bne mc0
	inc ls_vekta8+1
	inc sc_texttab+1
	dec merk
	bne mc0
	rts 

; ----------------------------------------- Set Render Mode

tog2hires	lda #2		; für Umschalten auf Hires
	!by $2c
tog2multi	lda #0		; für Umschalten auf Multi    
	sta gr_cmode
	lda #16
	sta sc_br
	lda #$4c		; self modifying
	sta patch
	jsr ev_sccont	; Modus setzen und Anzeige anpassen
	lda #$20		; unpatch
	sta patch
	rts

; ----------------------------------------- 

filltab	!by $a0,$5d,$67,$7f,$7e,$7c,$69,$6d

cntwert	!by $32

txt	!scr " Colors @"	; 0
	!scr " Convert@"	; 9
	!scr " Bitmap @"	; 18
	!scr " Expand @"	; 27
	!scr " Move   @"	; 36

message	!scr " Bitmap  "
mess	!fill 23,32
	!by $00

dnib	!by $00,$ff,$44,$cc,$55,$aa,$11,$dd,$66,$22
	!by $99,$33,$77,$ee,$88,$bb

; ----------------------------------------- Write Screen Info

getname  ldx #$00
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx 
	cpx #$10
	bcc si0
si1	rts 

getdatac	ldx #$04
	!by $2c
getdatag	ldx #$09
	ldy #$04
sinfo0	lda dtextc,x
	sta datatype,y
	dex 
	dey 
	bpl sinfo0
	rts 

setinfoh	jsr getdatag
	bmi si6
setinfoc	jsr getdatac
si6	jsr setname
	jsr setload
	jsr setmode
	jmp setdata

setname	lda #$00
	ldx #<ls_picname
	ldy #>ls_picname
	bne si3
setload	lda #$11
	ldx #<ls_iloader
	ldy #>ls_iloader
	bne si3
setmode	lda #$19
	ldx #<ls_imode
	ldy #>ls_imode
	bne si3
setdata	lda #$21
	ldx #<ls_idrive
	ldy #>ls_idrive
si3	stx sc_texttab
	sty sc_texttab+1
	tax 
	ldy #$00
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx 
	iny 
	bne si4
si5	rts 

nbuf	!fill 16,32
	!by $00

	!scr "Diashow@" 
modetx	!scr "160x200@"
datatype	!scr "Color@"

ttext	!scr "Text   "
htext	!scr "320x200"
mtext	!scr "160x200"
dtextc	!scr "Color"
dtextg	!scr "Grey "

; ----------------------------------------- 

modend	!eof
