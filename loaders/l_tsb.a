	!to "ldr.tsb.prg", cbm

	*= $c000
	!src "godotlib.lib"
	!ct pet
;	!sl "labels.txt"

; -----------------------------------------
;
;  ldr.TSB
;  Loader for TSB Format Images
;
;  1.00, 05.05.22: first release
;  1.01, 05.05.22: bugfix: missing GETNAME,
;                  shorter recognition of digits
;  1.02, 05.05.22: bugfix: digits not safely recognized
;  1.03, 08.10.24: reworked to general TSB format loader
;  1.04, 10.10.24: retrieving bg color from filename discarded
;
; -----------------------------------------


; ----------------------------------------- Equates

	int		= $14

	ifhires		= $30	; /$31
	gbyte		= $32
	byte		= $33
	cnt 		= $34
	vr    		= $35	; /$36
	cr	    	= $37	; /$38
	adcnt		= $39
	dst0		= $3a	; /$3b
	vv		= $3c	; /$3d
	cntmerk		= $3e
	bgmerk		= $3f
	cflag   		= $f7

	offx		= ls_adrmisc
	offy		= offx+1

	chkdigs		= $0084
	patch   		= $17af
	vrbuf		= $c600
	crbuf		= vrbuf+1024	; $ca00
	col0		= crbuf+1024	; $ce00
	bgcolor		= crbuf-1		; $c9ff

; ----------------------------------------- Header

	jmp start
	!by $80
	!by $00,$00
	!wo modend
	!wo $00
	!pet "TSB Multi/Hires "
	!pet "1.04"
	!pet "10.10.24"
	!pet "P.Hagemann/AD   "

; ----------------------------------------- Main

jerror	jmp error
wascancel	jmp sk11

start	lda #50		; activity counter
	sta cntwert
	ldx #1
	stx adcnt
	dex         	; init break by STOP
	stx sc_stop

	ldx sc_vekt20	; set destination address ($4000)
	ldy sc_vekt20+1
	stx sc_texttab
	sty sc_texttab+1

	ldy ls_flen	; was cancelled?
	beq wascancel	; yes, leave

; ----------------------------------------- Read Bitmap

	jsr getname	; save name for image info
	jsr gd_xopen	; open file
	jsr onebyte	; skip start address ($e000)
	bne jerror
	jsr onebyte
	bne jerror

	jsr gd_clrms	; init gauge
	ldx #18	    	; out: "Bitmap"
	jsr tcopy		; returns .y=0

	lda #$00
	ldx #$20    	; count $2000 = 8192 bytes
	sta ls_vekta8
	stx ls_vekta8+1
	sta ifhires	; store hires to $2000
	stx ifhires+1

; -----------------------------------------

loop	jsr onebyte	; read bitmap
l1	bne jerror
	ldx sc_stop	; STOP pressed?
c3	bne jerror
	sta byte
	sta (ifhires),y	; write to $a000
	inc ifhires
	bne +
	inc ifhires+1
+	jsr action	; activity
	ldy #0
	ldx #4		; make 4 bytes from 1 (= 8 pixels)
bloop	lda #0		; pre-convert to 4bit
	asl byte
	rol
	asl byte
	rol
	sta (sc_texttab),y	; write to $4000..
	inc sc_texttab
	bne sk
	inc sc_texttab+1
sk	dex
	bne bloop

	jsr count
	beq sk2

	lda status	; floppy error?
	beq loop		; no

; ----------------------------------------- Read Colors

sk2	lda #13	    	; out: "Colors"
	sta cntwert
	ldx #1
	sta adcnt
	dex
	jsr tcopy

	lda #<(2048)	; count 2*1024 bytes
	sta ls_vekta8
	lda #>(2048)
	sta ls_vekta8+1
	lda #<(vrbuf)	; set buffer address for videoram ($c600)
	sta vr
	lda #>(vrbuf)
	sta vr+1
	lda #<(crbuf)	; set buffer adress for colorram ($ca00)
	sta cr
	lda #>(crbuf)
	sta cr+1

	lda #0
	sta cflag
rcloop	ldy #0
	jsr onebyte	; get byte
	bit cflag
	bpl cram   	; each second byte is videoram
	sta (vr),y  	; store videoram
	inc vr		; proceed videoram
	bne c1
	inc vr+1
	bne c1  		; unconditionally
cram	sta (cr),y	; each first byte is colorram
	inc cr		; proceed colorram
	bne c1
	inc cr+1
c1	txa         	; disk error?
	and #$bf
	bne c3
	ldx sc_stop	; STOP pressed?
	bne c3
	jsr action	; no, activity (changes .y!)
	lda cflag
	eor #$ff    	; toggle cflag
	sta cflag
	jsr count
	bne rcloop	; loop if not all bytes retrieved

; ----------------------------------------- Convert to 4Bit

clf	jsr gd_xclose	; close file

	lda bgcolor	; check for bgcolor in file	### 1.03
	sta bgmerk
	bmi +
	jsr conhir
	jsr hires
	beq resettx	; uncond. branch

+	and #15		; if present: set bgcolor
	jsr setbg
	lda #<(vrbuf)	; init buffer addresses
	sta vr
	lda #>(vrbuf)
	sta vr+1
	lda #<(crbuf)
	sta cr
	lda #>(crbuf)
	sta cr+1
	lda #<($4000)	; set 4bit address
	sta sc_texttab
	lda #>($4000)
	sta sc_texttab+1
	lda #<(1000)	; count (to 1000)
	sta ls_vekta8
	lda #>(1000)
	sta ls_vekta8+1

	lda #200		; out: "Convert"
	sta cntwert
	ldx #9
	stx adcnt
	jsr tcopy

loop2	lda (vr),y	; convert video ram to VIC regs
	pha
	lsr
	lsr
	lsr
	lsr
	sta col0+1	; ink
	pla
	and #$0f
	sta col0+2	; paper
	lda (cr),y	; convert color ram to...
	and #$0f
	sta col0+3	; ...individual color

	lda #32		; one tile
	sta cnt
bloop1	jsr action
	ldy #0
	lda (sc_texttab),y	; get pre-rendered 4bit data
	tax
	lda col0,x	; convert to 4bit
	tax
	lda dnib,x	; (make double nibs)
	sta (sc_texttab),y
	inc sc_texttab	; proceed in tile
	bne sk6
	inc sc_texttab+1
sk6	dec cnt
	bne bloop1

	inc vr		; advance in buffers (next tile)
	bne sk7
	inc vr+1
sk7	inc cr
	bne sk8
	inc cr+1

sk8	jsr count
	bne loop2

resettx	ldx #18		; reset text output
	jsr tcopy

; ----------------------------------------- Abschluss

	lda bgmerk	; set graphics mode button (>127 = multi)
	bmi +
	jsr seth		; set image information
	jsr tog2hires	; hires
	bne sk10
+	jsr setm		; set image information
	jsr tog2multi	; multi

sk10	jsr gd_xmess	; floppy message
sk11	jsr gd_spron	; mouse pointer on
	sec		; leave loader
	rts

; ----------------------------------------- Hires

conhir	lda #7
	sta cntwert
	ldx #27		; "Move"
	jsr tcopy
	iny
	sty adcnt

	ldx #4		; 4 pages
	stx cntmerk
	lda #0
	tay
	sta ls_vekta8
	sta sc_texttab
	lda #>vrbuf	; separate ink
	sta ls_vekta8+1
	lda #>crbuf	; and paper
	sta sc_texttab+1

ml2	lda (ls_vekta8),y	; get colors, .y: 0..255
	sta vv		; exchange nibbles, get ink
	asl
	rol vv
	asl
	rol vv
	asl
	rol vv
	asl
	rol vv
	ora vv
	sta (sc_texttab),y	; write to paper
	tya		; save .y
	pha
	jsr action	; activity
	pla
	tay
	iny
	bne ml2		; one page
	inc ls_vekta8+1
	inc sc_texttab+1
	dec cntmerk	; count pages
	bne ml2
	rts

; ----------------------------------- Convert Hires to 4Bit

hires	lda #50
	sta cntwert
	ldx #9		; "Convert"
	jsr tcopy
	iny
	sty adcnt

	lda #<8000	; count 8000 bytes
	sta ls_vekta8
	lda #>8000
	sta ls_vekta8+1

	lda #0		; set vectors
	tay
	sta vr
	sta cr		; from cr: $2000
	sta sc_texttab
	sta vv
	lda #$20
	sta cr+1
	asl
	sta sc_texttab+1	; to $4000 (4Bit)
	lda #>vrbuf	; vr (ink): $c600
	sta vr+1
	lda #>crbuf	; vv (paper): $ca00
	sta vv+1

hloop1	ldx #8
	stx cntmerk
hilp	lda (cr),y	; Bitmap holen
	sta byte
	jsr action	; Activity
	ldy #0

	ldx #4		; isolate pixels
hl2	asl byte
	bcc hl3
	lda (vv),y	; pixel set (ink)
	!by $2c
hl3	lda (vr),y	; pixel not set (paper)
	and #$0f
	tay
	lda dnib,y	; assign to 4Bit color
	and #$f0		; first: ink
	sta col0		; and store

	ldy #0
	asl byte		; next pixel
	bcc hl4
	lda (vv),y	; set
	!by $2c
hl4	lda (vr),y	; not set
	and #$0f
	tay
	lda dnib,y	; assign
	and #$0f		; paper
	ora col0

	ldy #0		; store to 4Bit
	sta (sc_texttab),y

	inc sc_texttab	; proceed
	bne lh5
	inc sc_texttab+1
lh5	dex		; count 8 pixels
	bne hl2

	inc cr		; proceed in buffers
	bne hl6
	inc cr+1
hl6	lda ls_vekta8	; count bitmap
	bne hl7
	dec ls_vekta8+1
hl7	dec ls_vekta8
	dec cntmerk	; count lines per card
	bne hilp

	inc vr		; next card ink
	bne hl8
	inc vr+1
hl8	inc vv		; paper
	bne hl9
	inc vv+1
hl9	lda ls_vekta8	; finished?
	ora ls_vekta8+1
	bne hloop1

	rts		; yes

; ----------------------------------------- Hintergrundfarbe setzen

setbg	sta col0
	sta gr_fbkcol
	rts

; -----------------------------------------

count	lda ls_vekta8	; count
	bne sk1
	dec ls_vekta8+1
sk1	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	rts

; ----------------------------------- Read File

onebyte	jsr basin
	ldx status
	rts

; ----------------------------------------- File Error

error	jsr gd_xclose	; close file
	jsr sk10		; Abschluss
	clc		; stay in loader
	rts

; ----------------------------------------- Message Handling

messout	ldx #<(message)	; ausgeben
	ldy #>(message)
	jmp gd_xtxout2

tcopy	ldy #0		; anwählen
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0

action	dec adcnt		; Gauge-Bar bewegen
	bne ld4
	lda cntwert
	sta adcnt
	ldy offy
	cpy #22
	bne act0
	jsr clrmess
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	rts

clrmess	ldx #20		; Message initialisieren
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts

filltab	!by 160,93,103,127,126,124,105,109

txt	!scr " Colors @"	; 0
	!scr " Convrt @"	; 9
	!scr " Bitmap @"	; 18
	!scr " Move   @"    ; 27

message	!fill 11,32
mess	!fill 21,32
	!by 0

; ----------------------------------------- Data

dnib	!by $00,$ff,$44,$cc,$55,$aa,$11,$dd
	!by $66,$22,$99,$33,$77,$ee,$88,$bb

cntwert	!by 50

; ----------------------------------------- Set Graphics Mode

tog2hires	lda #2		; für Umschalten auf Hires
	!by $2c
tog2multi	lda #0		; für Umschalten auf Multi
	sta gr_cmode
	lda #16
	sta sc_br
	lda #$4c    	; self modifying
	sta patch
	jsr ev_sccont	; Modus setzen und Anzeige anpassen
	lda #$20    	; unpatch
	sta patch
	rts

; ----------------------------------------- Image Information Handler

getname	ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts

getdatac	ldx #4
	!by $2c
getdatag	ldx #9
	ldy #4
sinfo0	lda dtextc,x
	sta datatype,y
	dex
	dey
	bpl sinfo0
	rts

setm	jsr setmulti
	beq setinfo
seth	jsr sethires
setinfo	jsr getdatac
	jsr setname
	jsr setloader
	jmp setdata

setname	lda #0
	ldx #<(ls_picname)
	ldy #>(ls_picname)
	bne si3
setloader	lda #17
	ldx #<(ls_iloader)
	ldy #>(ls_iloader)
	bne si3
setmulti	lda #25
	ldx #<ls_imode
	ldy #>ls_imode
	bne si3
sethires	lda #33
	ldx #<ls_imode
	ldy #>ls_imode
	bne si3
setdata	lda #41
	ldx #<(ls_idrive)
	ldy #>(ls_idrive)
si3	stx dst0
	sty dst0+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (dst0),y
	inx
	iny
	bne si4
si5	rts

nbuf	!fill 16,32
	!by 0

	!scr "TSB    ",0

multitx	!scr "160x200",0
hirestx	!scr "320x200",0
datatype	!scr "Color",0
dtextc	!scr "ColorGray "

; -----------------------------------------

modend	!eof
