
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ----------------------------------------- 
;
; ldr.TSB-Screens
; loader for TSB text screen files
; 
; 1.00, 07.01.23, first release
; 1.01, 09.01.23, added requester
;
; ----------------------------------------- 

; ----------------------------------------- Equates

	pport	= $01

	cvector	= $30	; /$31
	cset	= $33
	vram	= $35	; /$36
	cram	= $37	; /$38

	cnttemp	= $3b
	merk	= $3c
	vv	= $3d	; /$3e
	byte	= $3f

	offx	= ls_adrmisc
	offy	= offx+1
	zeile	= sc_merk
	spalte	= zeile+1

	nambuf	= $0200
	patch	= $17af
	lsm1	= $194b	;         load
	bgcolor	= $47fe

	vrbuf	= $c600
	crbuf	= $ca00
	col0	= $ce00

; ------------------------------------------------------------ 

	jmp start

	!by $80
	!by 4		; has own requ
	!by 0
	!wo modend
	!wo 0
	!tx "TSB Screens     "
	!tx "1.01"
	!tx "09.01.23"
	!tx "A.Dettke        "
	
; ------------------------------------------------------------ 

start	ldx used		; uses file requester, too
	bmi +
	jmp evload	; 2nd launch: go to file requester

; 			  1st launch: show options requester:
+	jsr makechr	; create listbox indicator
	ldx #<tsblst	; show options requester
	ldy #>tsblst
	jsr gd_screen
	inc used		; set USED to 0
	dec bgrcolor
	jsr evbgcol	; show current bg color
	jsr colorize	; returns .x=0
	ldx chrset	; show current charset
	jsr cst0
	jsr gd_eloop	; wait for clicks

; ------------------------------------------------ Event: Leave

evleave	lda #$ff		; re-init loader
	sta used
leave	sec 
	rts 

; ----------------------------------------- 

jerror	jmp error

; ------------------------------------------------ Event: Load

evload	ldx ftype		; Filetype SCR (0) oder BYP (1)?
	beq +
	jmp loadbyp	; BYP: continue there

+	ldx used		; SCR: first time? (.x=0)
	bne lds0
	inc used		; yes, show requester

loadscr	lda #0		; USED now: 1
	sta ls_flen
	ldx #1
	jsr gd_xload	; requester
	bcs leave
lds0	lda ls_flen	; anything chosen?
	beq leave

	jsr getname	; yes, save name
	ldx #<sy_4bit	; $4000 (color ram)
	lda #>sy_4bit
	stx cvector
	sta cvector+1
	ora #$04		; $4400 
	stx sc_texttab	; as destination (video ram)
	sta sc_texttab+1

	lda #0
	sta sc_stop	; init break by STOP
	jsr gd_xopen

	jsr onebyte	; skip start address
	bne jerror
	jsr onebyte
	bne jerror

; ----------------------------------------- 

	jsr gd_clrms	; Activity vorbereiten
	lda #24
	sta cntwert
	jsr txmove

	lda #$ff		; (2x) 1024 Bytes einlesen
	sta ls_vekta8
	lda #$03
	sta ls_vekta8+1

read	ldy sc_stop	; STOP pressed?
	bne jerror
	jsr onebyte	; read color data
	and #15
	sta (cvector),y
	jsr onebyte	; read video data
	sta (sc_texttab),y
	bne jerror

	jsr action	; gauge

	inc sc_texttab	; inc destinations
	bne rl0
	inc sc_texttab+1
rl0	inc cvector
	bne rl1
	inc cvector+1
rl1	lda ls_vekta8	; count bytes
	bne rl2
	dec ls_vekta8+1
rl2	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	bne read		; until finished

rl3	jsr gd_xclose	; then close file

; ----------------------------------------- 

mloop	ldx #4		; get 4 pages (1000 bytes chars)
	lda #>vrbuf	; write to $c600
	sta ls_vekta8+1
	lda #$44		; read from $4400
	sta sc_texttab+1
	jsr move

	lda ftype
	bne +
	lda bgrcolor
	sta bgcolor
+	lda bgcolor	; background color (to $ce00)
	and #$0f
	sta col0
	sta gr_fbkcol	; store it to system
	sta bgrcolor

	ldx #4		; get 4 pages (1000 bytes colors)
	lda #>crbuf	; write to $ca00
	sta ls_vekta8+1
	lda #$40		; read from $4000
	sta sc_texttab+1
	jsr move

; ----------------------------------------- 

	jsr context	; convert text to hires graphics

cols0	jsr conhir	; process hires data
	jsr hires
	jsr setinfo
	jsr tog2hires	; set render mode to Hires
	jmp sk11

; ------------------------------------------------ Event: CSet

evcset	ldx chrset
	beq +
	ldx #$ff
+	inx
	stx chrset
cst0	lda csetw,x
	sta cset
	lda csetoff,x
	tax
	ldy #4
-	lda csettx,x
	sta txcset,y
	dex
	dey
	bpl -
	ldy #0
dpi2	jsr settab
	ldy #6
	jmp gd_xtxout1

; ------------------------------------------------ Event: BG Color

evbgcol	ldx bgrcolor
	lda spalte
	cmp #23
	bcc +
-	inx
	cpx #16
	bcc ++
	ldx #1
+	dex
	bpl ++
	ldx #15
++	stx bgrcolor
bgc1	stx sc_chgcol
bgc0	ldx #4
	ldy gdbgcol+1
	iny
	sty sc_sp
	jmp clr0		; returns .c=0

; ------------------------------------------------ Event: Type

evtype	ldx ftype		; Toggle Filetype
	beq +
	ldx #$ff
+	inx
	stx ftype
	lda typeoff,x	; set text
	tax
	ldy #2
-	lda typetx,x
	sta txtype,y
	dex
	dey
	bpl -
	ldx ftype		; gray out 
	bne +
	lda #$a0
	!by $2c
+	lda #96		; if BYP
	ldx #3
-	sta txbgcol,x
	dex
	bpl -
	ldy #4
	jsr dpi2
	ldy #2
	jsr dpi2
	ldx bgrcolor	
	jmp bgc1

; ----------------------------------------- Load BYP Data

loadbyp	ldx used		; first time? (.x=0)
	bne leave3
	inc used		; yes, show requester

	lda #0
	sta ls_flen
	jsr chgdrv
	jsr lddir
	jsr gd_eloop
	jsr chgdrv
	jmp lds0		; und Bild laden

lddir	lda #<prefix	; adresse des typ-kürzels über den 
	pha		; stack weitergeben
	lda #>prefix
	pha
	lda #8
	jmp gd_xloadm	; open file requester with file filter set

leave3	jmp sk11

; ----------------------------------------- Convert to hires

hires	lda #50
	sta cntwert
	jsr tx4bit

	lda #$40		; convert 8000 bytes from $a000 to $4000
	sta ls_vekta8
	lda #$1f
	sta ls_vekta8+1
	lda #$00
	tay 
	sta vram
	sta cram
	sta sc_texttab
	sta vv
	lda #$a0
	sta cram+1
	asl
	sta sc_texttab+1
	lda #>vrbuf
	sta vram+1
	lda #>crbuf
	sta vv+1

hloop1	ldx #$08
	stx merk
hilp	lda (cram),y
	sta byte
	jsr action
	ldy #$00
	ldx #$04
hl2	asl byte
	bcc hl3
	lda (vv),y
	!by $2c
hl3	lda (vram),y
	and #$0f
	tay 
	lda dnib,y
	and #$f0
	sta col0
	ldy #$00
	asl byte
	bcc hl4
	lda (vv),y
	!by $2c
hl4	lda (vram),y
	and #$0f
	tay 
	lda dnib,y
	and #$0f
	ora col0
	ldy #$00
	sta (sc_texttab),y
	inc sc_texttab
	bne lh5
	inc sc_texttab+1
lh5	dex 
	bne hl2
	inc cram
	bne hl6
	inc cram+1
hl6	lda ls_vekta8
	bne hl7
	dec ls_vekta8+1
hl7	dec ls_vekta8
	dec merk
	bne hilp
	inc vram
	bne hl8
	inc vram+1
hl8	inc vv
	bne hl9
	inc vv+1
hl9	lda ls_vekta8
	ora ls_vekta8+1
	bne hloop1
	rts 

; ----------------------------------------- 

conhir	ldx #$04		; convert colors
	stx merk
	lda #$00
	tay 
	sta ls_vekta8
	sta sc_texttab
	lda #>vrbuf
	sta ls_vekta8+1
	lda #>crbuf
	sta sc_texttab+1
ml2	lda (ls_vekta8),y
	sty vv
	asl
	rol vv
	asl
	rol vv
	asl
	rol vv
	asl
	rol vv
	ora vv
	sta (sc_texttab),y
	tya 
	pha 
	jsr action
	pla 
	tay 
	iny 
	bne ml2
	inc ls_vekta8+1
	inc sc_texttab+1
	dec merk
	bne ml2
	rts 

; ----------------------------------------- 

context	lda #20
	sta cntwert
	jsr txconv

	tya 
	ldx #4		; convert 4 pages (1000 bytes characters)
	stx merk
	tax 
	sta ls_vekta8
	sta sc_texttab
	lda #$a0		; chars at $c600 to $a000
	sta ls_vekta8+1
	lda #>vrbuf
	sta sc_texttab+1

ctl	txa 		; page counter
	pha 
	jsr action
	pla 
	tax
	ldy #$00
	lda ftype
	beq ct4
	jmp setchr60
ct4	sty sc_pos+1
	lda (sc_texttab),y	; get char
	sta sc_pos
	asl sc_pos
	rol sc_pos+1
	asl sc_pos
	rol sc_pos+1
	asl sc_pos
	rol sc_pos+1
	clc 
	lda sc_pos+1
	adc cset
	sta sc_pos+1
	sei
	lda #$33
	sta pport
ct3	ldy #$07
ct0	lda (sc_pos),y	; get char definition
	sta (ls_vekta8),y	; store
	dey 
	bpl ct0
	lda #$36
	sta pport
	cli
	clc 
	lda ls_vekta8	; next storage position
	adc #$08
	sta ls_vekta8
	bcc ct1
	inc ls_vekta8+1
ct1	inc sc_texttab	; next char
	bne ct2
	inc sc_texttab+1
ct2	inx 		; count bytes (256)
	bne ctl
	dec merk		; count pages (4)
	bne ctl

; ----------------------------------------- 

movecol	ldx #4		; don't forget the colors
	stx merk
	lda #0
	sta ls_vekta8
	sta sc_texttab
	tay 
	lda #>crbuf
	sta ls_vekta8+1
	lda #>vrbuf
	sta sc_texttab+1
mc0	lda (ls_vekta8),y
	asl
	asl
	asl
	asl
	ora col0
	sta (sc_texttab),y
	tya 
	pha 
	jsr action
	pla 
	tay 
	iny 
	bne mc0
	inc ls_vekta8+1
	inc sc_texttab+1
	dec merk
	bne mc0
	rts 

; ----------------------------------------- 

setchr60	lda (sc_texttab),y	; get char
	cmp #$60		; is 96?
	bne +
	lda #<char60	; yes, set
	sta sc_pos
	lda #>char60
	sta sc_pos+1
	jmp ct3
+	jmp ct4		; no, leave

; ----------------------------------------- 

sk11	jsr evleave

sk10	jsr gd_xmess	; finish 
	jsr gd_spron
	sec 
	rts 

; ----------------------------------------- Move pages

move	stx merk		; move data, x-reg	: number of pages
	lda #$00		;		sc_texttab: source
	tay 		;		ls_vekta8 : destination 
	sta ls_vekta8
	sta sc_texttab
ml1	lda (sc_texttab),y
	sta (ls_vekta8),y
	tya 
	pha 
	jsr action
	pla 
	tay 
	iny 
	bne ml1
	inc ls_vekta8+1
	inc sc_texttab+1
	dec merk
	bne ml1
	rts 

; ----------------------------------------- Set Render Mode

tog2hires	lda #2		; für Umschalten auf Hires
	!by $2c
tog2multi	lda #0		; für Umschalten auf Multi    
	sta gr_cmode
	lda #16
	sta sc_br
	lda #$4c		; self modifying
	sta patch
	jsr ev_sccont	; Modus setzen und Anzeige anpassen
	lda #$20		; unpatch
	sta patch
	rts

; ----------------------------------------- Service routines

onebyte	jsr basin
	ldx status
	rts 

; ----------------------------------------- 

error	jsr gd_xclose
	jsr sk10
	clc 
	rts 

; ----------------------------------------- 

txconv	ldx #0		; Text: "Convert"
	!by $2c
tx4bit	ldx #9		; Text: "4Bit"
	!by $2c
txmove	ldx #18		; Text: "Move"
	jmp tcopy

; ------------------------------------------------ Colorize

colorize	ldx #2		; Index auf sc_normtext
	lda #9		; an Zeile 9
	sta sc_zl
	lda #14		; Spalte 14
	sta sc_sp
	lda #4		; 4 breit, 5 hoch
	sta sc_br
	lda #5
	sta sc_ho
	jsr gd_fcol	; einfärben

	ldx #2		; auch an 11,15, Breite 5, Höhe 1
	inc sc_sp
	inc sc_br
clr0	lda #11
	sta sc_zl
	lda #1
	sta sc_ho
	jmp gd_fcol

; ----------------------------------------- 

makechr	ldx #7
-	lda chschr,x
	sta sc_undochar,x
	dex
	bpl -
	rts

; --------------------------- Bootdrive sicherstellen

chgdrv	lda ls_sysdrive
	ldx ls_bootdrive
	sta ls_bootdrive
	stx ls_sysdrive
	rts
	
; ----------------------------------------- Screenlist

tsblst	!by 0
	!by 6,13,13,11,$91
	!wo 0
	!scr "TSB Screens",0

gdtype	!by 8,20,6,3,$cd
	!wo evtype
	!by 223
txtype	!scr "SCR",0

gdbgcol	!by 10,20,6,3,$ce
	!wo evbgcol
txbgcol	!by $a0,$a0,$a0,$a0,0

gdcset	!by 12,18,8,3,$ce
	!wo evcset
	!by 223
txcset	!scr "Upper",0

	!by 14,19,7,3,$ce
	!wo evleave
	!scr "Leave",0

	!by 14,13,6,3,$c7
	!wo evload
	!scr "Load",0

	!by $c0,8,13,4
	!scr "Type",0
	!by $c0,10,13,6
	!scr "BG-Col",0
	!by $c0,12,13,4
	!scr "Cset",0
	!by $80

; ----------------------------------------- 

messout	ldx #<message
	ldy #>message
	jmp gd_xtxout2

tcopy	ldy #$00
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx 
	iny 
	bne tc0

action	dec cnttemp
	bne ld4
	lda cntwert
	sta cnttemp
	ldy offy
	cpy clrmess+1
	bne act0
	jsr clrmess
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #$07
	sta offx
ld4	rts 

clrmess	ldx #22		; clear message buffer
	lda #$20
cl0	sta mess,x
	dex 
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts 

; ------------------------------------ Output gadget text routines

tabigad	!wo gdcset
	!wo gdbgcol
	!wo gdtype

settab	lda #<tabigad	; address gadget descriptor
	sta ls_vekta8
	lda #>tabigad
	sta ls_vekta8+1
; ---	rts		; RTS could be useful

gettab	lda (ls_vekta8),y	; set working vector
	sta sc_screentab
	iny
	lda (ls_vekta8),y
	sta sc_screentab+1

	lda #0		; transfer gadget data (to compute them)
	tax
	tay
gt0	jsr gd_setpos
	cpx #3
	bne gt0
	stx sc_ho
	jsr gd_trim	; trim to inner area of gadget
	jmp gd_initmove	; compute screen address for display

; ----------------------------------------- 

used	!by $ff
bgrcolor	!by 0
ftype	!by 0
typeoff	!by 2,5
typetx	!scr "SCRBYP"
chrset	!by 0
csetoff	!by 4,9
csettx	!scr "UpperLower"
csetw	!by $d0,$d8
prefix	!pet "byp.*",0

chschr	!by $00,$3a,$46,$4e,$40,$40,$3c,$00

filltab	!by $a0,$5d,$67,$7f,$7e,$7c,$69,$6d

cntwert	!by 12

txt	!scr " Convert@"	; 0
	!scr " 4Bit   @"	; 9
	!scr " Move   @"	; 18

message	!scr " ......  "
mess	!fill 23,32
	!by $00

dnib	!by $00,$ff,$44,$cc,$55,$aa,$11,$dd,$66,$22
	!by $99,$33,$77,$ee,$88,$bb

char60	!by $aa,$55,$aa,$55,$aa,$55,$aa,$55

; ----------------------------------------- Write Screen Info

getname	ldx #$00
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx 
	cpx #$10
	bcc si0
si1	rts 

setinfo	jsr setname
	jsr setload
	jsr setmode
	beq setdata

setname	lda #$00
	ldx #<ls_picname
	ldy #>ls_picname
	bne si3
setload	lda #$11
	ldx #<ls_iloader
	ldy #>ls_iloader
	bne si3
setmode	lda #$19
	ldx #<ls_imode
	ldy #>ls_imode
	bne si3
setdata	lda #$21
	ldx #<ls_idrive
	ldy #>ls_idrive
si3	stx sc_texttab
	sty sc_texttab+1
	tax 
	ldy #$00
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx 
	iny 
	bne si4
si5	rts 

nbuf	!fill 16,32
	!by $00

	!scr "TSB-SCR@" 
modetx	!scr "320x200@"
datatype	!scr "Color@"

; ----------------------------------------- 

modend	!eof
