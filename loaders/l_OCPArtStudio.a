
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ----------------------------------------- 
;
; ldr.OCPArtStudio
;
; 1.00          : first release
; 1.01, 01.03.92:
; 1.02, 24.11.16: better recognition of Hires files
; 1.03, 09.01.17: saves original bg color
; 1.04, 05.12.19: Error reading some Hires images
; 1.05, 14.10.20: bugfix: retrieved wrong bgr color
; 1.06, 12.09.21: added: break loading process with STOP key
;
; ----------------------------------------- 

; ----------------------------------------- Equates

	cr		= $30
	vr		= $32
	vv		= $34
	byte		= $36
	cnt		= $37
	merk		= $38

	offx		= $b2
	offy		= offx+1
	
	vrbuf		= $c600
	crbuf		= vrbuf+$0400
	col0		= vrbuf+$0800
	sprite		= $d015

; ----------------------------------------- Header

	jmp start
	!by $80
	!by 0       
	!by 1
	!wo modend
	!wo 0 
	!pet "OCP Art Studio  "
	!pet "1.06"
	!pet "12.09.21"
	!pet "W.Kling/A.Dettke"

; ----------------------------------------- Main

jerror	jmp error

start	jsr getname	; Filenamen merken für Image Information
	lda #62
	sta cntwert
	sta $ff
	ldx $20
	ldy $21
	stx sc_texttab
	sty sc_texttab+1

stt2	lda #0		; Modusflag: Multi (0) oder Hires (1)?
	sta sc_stop	; init break by STOP	### 1.06
	sta flag
	jsr gd_xopen	; File Open
	jsr onebyte	; Skip start address
	bne jerror
	jsr onebyte
	bne jerror

; ----------------------------------------- Read File

	jsr gd_clrms	; Message: Reading
	ldx #27
	jsr tcopy

read	lda #<10016	; Read 10016 Bytes (das ist die Dateilänge bei Multi)
	sta ls_vekta8
	lda #>10016
	sta ls_vekta8+1

rloop	jsr onebyte	; Byte einlesen
	sta (sc_texttab),y
	ldy sc_stop	; STOP pressed?	### 1.06
	bne jerror
	txa 		; Status abchecken
	and #$bf		; EOF ausblenden
rl01	bne jerror
	cpx #$40		; Status war EOF?
	bne rl02

	ldx ls_vekta8	; ja, schon fertig? (vorzeitig!)
	dex 
	txa 
	ora ls_vekta8+1	; ja, Hiresbild?
	bne testhi

rl02	jsr action	; sonst: Activity (Gauge)
	ldy #0
	inc sc_texttab 
	bne rl1
	inc sc_texttab+1
rl1	lda ls_vekta8	; Bytes zählen
	bne rl2
	dec ls_vekta8+1
rl2	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	bne rloop		; bis 0

rl3	jsr gd_xclose	; File schließen, wenn fertig
	bcc rl0

; ----------------------------------------- Hires

testhi	jsr gd_xclose	; File schlie0en
	lda ls_vekta8+1	; 1016 Bytes Rest? (Bitmap: 8000, Farbram: 1000, dann Multi: Daten: 16, Colorram: 1000)
	cmp #>1017	; Hi-Byte passt schon nicht, also: kein OCP-Bild
	bne jerror
	lda ls_vekta8
	cmp #<1017	; Lo-Byte, Rest genau 1016? (Zähler steht noch eins mehr)
	beq rl00		; ok
	cmp #<1000	; Lo-Byte, Rest kleiner als 1000?
	bcc rl01		; ja, Fehler

rl00	inc flag		; sonst: OCP-Hires-Bild, Flag setzen (1) und verarbeiten

rl0	lda #63		; Message
	sta cntwert
	sta $ff
	ldx #36
	jsr tcopy

; ----------------------------------------- Verschieben

mloop	ldx #4		; 4 Pages Videoram verschieben
	lda #>vrbuf	; (Ram liegt an $5f40)
	sta ls_vekta8+1
	lda #$5f
	sta sc_texttab+1
	lda #$40
	sta sc_texttab 
	jsr move

	ldx #4		; 4 Pages Colorram verschieben
	lda #>crbuf
	sta ls_vekta8+1
	lda #$63		; (an $6338)
	sta sc_texttab+1
	lda #$38
	sta sc_texttab 
	jsr move

	lda $6329		; Hintergrundfarbe holen ### 1.05
	and #$0f
	sta col0
	sta gr_fbkcol	; v1.03: store original file background color

	ldx #32		; nun 32 Pages ab $4000 nach $a000
	lda #$a0
	sta ls_vekta8+1
	lda #$00
	sta sc_texttab 
	lda #$40
	sta sc_texttab+1
	jsr move

; ----------------------------------------- Verarbeitung

cols0	lda flag		; Hires?
	beq cols		; nein, Sprung

	jsr conhir	; Hires anders verarbeiten
	jsr hires
	jmp sk11

cols	ldx #6		; Image Information setzen
cls0	lda mtext,x
	sta modetx,x
	dex 
	bpl cls0

	lda #50		; Message
	sta cntwert
	sta $ff
	ldx #0
	jsr tcopy

cols2	lda #<8000	; 8000 Bytes Pixels
	sta ls_vekta8
	lda #>8000
	sta ls_vekta8+1
	lda #$00		; Adressen: $a000 (Colorram)
	tay 
	sta cr
	sta sc_texttab 
	lda #$a0
	sta cr+1
	asl		; und $4000 (Bitmap)
	sta sc_texttab+1

loop	lda (cr),y	; konvertieren nach 4Bit: zuerst Colorram-Bitmap
	sta byte
	jsr action
	ldy #0
	ldx #4
bloop	lda #0
	asl byte
	rol
	asl byte
	rol
	sta (sc_texttab ),y
	inc sc_texttab 
	bne sk
	inc sc_texttab+1
sk	dex 
	bne bloop
	inc cr
	bne bl1
	inc cr+1
bl1	lda ls_vekta8	; Bytes zählen
	bne sk1
	dec ls_vekta8+1
sk1	dec ls_vekta8
	lda ls_vekta8	; bis 0
	ora ls_vekta8+1
	bne loop

sk2	ldy #0		; dann Videoram mit Coloram und Bitmap verknüpfen
	lda #<vrbuf
	sta vr
	lda #>vrbuf
	sta vr+1
	lda #<crbuf
	sta cr
	lda #>crbuf
	sta cr+1
	lda #<sy_4bit
	sta sc_texttab 
	lda #>sy_4bit
	sta sc_texttab+1
	lda #<1000	; Zähler neu setzen (1000)
	sta ls_vekta8
	lda #>1000
	sta ls_vekta8+1

	lda #200		; Activity und Message
	sta cntwert
	sta $ff
	ldx #9
	jsr tcopy

loop2	lda (vr),y	; verarbeiten (endgültig nach 4Bit konvertieren)
	pha 
	lsr
	lsr
	lsr
	lsr
	sta col0+1 
	pla 
	and #$0f
	sta col0+2
	lda (cr),y
	and #$0f
	sta col0+3
	lda #32
	sta cnt
bloop1	jsr action
	ldy #0
	lda (sc_texttab ),y
	tax 
	lda col0,x
	tax 
	lda dnib,x
	sta (sc_texttab ),y
	inc sc_texttab 
	bne sk6
	inc sc_texttab+1
sk6	dec cnt
	bne bloop1
bl3	inc vr
	bne sk7
	inc vr+1
sk7	inc cr
	bne sk8
	inc cr+1
sk8	lda ls_vekta8	; Bytes zählen
	bne sk9
	dec ls_vekta8+1
sk9	dec ls_vekta8
	lda ls_vekta8	; bis 0
	ora ls_vekta8+1
	bne loop2

sk11	ldx #18		; Message initialisieren
	jsr tcopy
	jsr setinfo	; Image Information
sk10	jsr gd_xmess
	lda #3		; Mauszeiger an
	sta sprite
	sec 		; fertig
	rts 

; ----------------------------------------- Hilfsroutinen

onebyte	jsr basin
	ldx status
	rts 

; ----------------------------------------- 

error	jsr gd_xclose
	jsr sk10
	clc 
	rts 

; ----------------------------------------- Messages

messout	ldx #<message
	ldy #>message
	jmp gd_xtxout2

tcopy	ldy #0
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx 
	iny 
	bne tc0

action	dec $ff
	bne ld4
	lda cntwert
	sta $ff
	ldy offy		; bar at maximum?
	cpy clrmess+1
	bne act0
	jsr clrmess	; yes, clear
act0	ldx offx		; write bar to output
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	rts 

clrmess	ldx #20
	lda #32
cl0	sta mess,x
	dex 
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts 

; ----------------------------------------- Verschieberoutine

move	stx merk
	lda #0
	tay 
	sta ls_vekta8
ml1	lda (sc_texttab ),y
	sta (ls_vekta8),y
	tya 
	pha 
	jsr action
	pla 
	tay 
	iny 
	bne ml1
	inc ls_vekta8+1
	inc sc_texttab+1
	dec merk
	bne ml1
	rts 

; ----------------------------------------- Hiresbild verarbeiten

hires	lda #50		; Message
	sta cntwert
	sta $ff
	ldx #18
	jsr tcopy

	lda #<8000	; Zähler auf 8000 Bytes
	sta ls_vekta8
	lda #>8000
	sta ls_vekta8+1
	lda #0
	tay 
	sta vr
	sta cr
	sta sc_texttab 
	sta vv
	lda #$a0		; liegt an $a000 (Quelle)
	sta cr+1
	asl
	sta sc_texttab+1	; und $4000 (Ziel)
	lda #>vrbuf
	sta vr+1
	lda #>crbuf
	sta vv+1

hloop1	ldx #8
	stx merk
hilp	lda (cr),y
	sta byte
	jsr action
	ldy #0
	ldx #4
hl2	asl byte
	bcc hl3
	lda (vv),y
	!by $2c
hl3	lda (vr),y
	and #$0f
	tay 
	lda dnib,y
	and #$f0
	sta col0
	ldy #0
	asl byte
	bcc hl4
	lda (vv),y
	!by $2c
hl4	lda (vr),y
	and #$0f
	tay 
	lda dnib,y
	and #$0f
	ora col0
	ldy #0
	sta (sc_texttab ),y

	inc sc_texttab 
	bne lh5
	inc sc_texttab+1
lh5	dex 
	bne hl2
	inc cr
	bne hl6
	inc cr+1
hl6	lda ls_vekta8	; zählen
	bne hl7
	dec ls_vekta8+1
hl7	dec ls_vekta8
	dec merk
	bne hilp
	inc vr
	bne hl8
	inc vr+1
hl8	inc vv
	bne hl9
	inc vv+1
hl9	lda ls_vekta8	; bis 0
	ora ls_vekta8+1
	bne hloop1
	rts 

; ----------------------------------------- Hires nach 4Bit

conhir	ldx modetx	; Image Information setzen
	cpx #$33		; "3"? (Ist Hires gesetzt?)
	beq chi0		; ja

	ldx #6		; nein, eintragen
chi1	lda htext,x
	sta modetx,x
	dex 
	bpl chi1

chi0	lda #7		; Message
	sta cntwert
	sta $ff
	ldx #0
	jsr tcopy

	ldx #4		; konvertieren
	stx merk
	lda #0
	tay 
	sta ls_vekta8
	sta sc_texttab 
	lda #>vrbuf
	sta ls_vekta8+1
	lda #>crbuf
	sta sc_texttab+1
ml2	lda (ls_vekta8),y
	sty vv
	asl
	rol vv
	asl
	rol vv
	asl
	rol vv
	asl
	rol vv
	ora vv
	sta (sc_texttab ),y
	tya 
	pha 
	jsr action
	pla 
	tay 
	iny 
	bne ml2
	inc ls_vekta8+1
	inc sc_texttab+1
	dec merk
	bne ml2
	rts 

; ----------------------------------------- Daten für Messages und Gauge

filltab 	!by $a0,$5d,$67,$7f,$7e,$7c,$69,$6d 

cntwert	!by 50

txt	!scr " Colors @"
	!scr " Convert@"
	!scr " Bitmap @"
	!scr " Reading@"
	!scr " Move   @"

message	!scr " Bitmap    "
mess	!fill 21,32

; ----------------------------------------- 

dnib 	!by $00,$ff,$44,$cc,$55,$aa,$11,$dd
	!by $66,$22,$99,$33,$77,$ee,$88,$bb 

; ----------------------------------------- 

flag	!by 0

; ----------------------------------------- Image Information

getname	ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx 
	cpx #16
	bcc si0
si1	rts 

getdatac	ldx #4
	!by $2c
getdatag	ldx #9
	ldy #4
sinfo0	lda dtextc,x
	sta datatype,y
	dex 
	dey 
	bpl sinfo0
	rts 

setinfo	jsr getdatac
	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata

setname	lda #0
	ldx #<ls_picname
	ldy #>ls_picname
	bne si3
setloader	lda #17
	ldx #<ls_iloader 
	ldy #>ls_iloader 
	bne si3
setmode	lda #25
	ldx #<ls_imode
	ldy #>ls_imode
	bne si3
setdata	lda #33
	ldx #<ls_idrive
	ldy #>ls_idrive
si3	stx sc_texttab 
	sty sc_texttab+1
	tax 
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx 
	iny 
	bne si4
si5	rts 

nbuf	!fill 16,32
	!by 0
	!scr "OCP ASt@"
modetx	!scr "160x200@"
datatype	!scr "Color@"
ttext	!scr "Text   "
htext	!scr "320x300"
mtext	!scr "160x200"
dtextc	!scr "Color"
	!scr "Gray "

modend	!eof
