
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ---------------------------
;
;    ldr.MCSdat
;    Lader für Daten des Fraktalgenerators Mandelbrot Construction Set (MCS)
;
;    0.99: 28.10.93, first release
;    1.00: 08.12.19, shorter now
;
; ---------------------------

; --------------------------- Equates

	adcnt		= $30
	dst0		= $35
	dst		= $37
	lcnt		= $39
	vrcnt		= $3b
	pack		= $3c
	pcnt		= $3d
	data		= $3e
	bcnt		= $3f

	offx		= ls_adrmisc
	offy		= offx+1

; ------------------------------------------------ 

	jmp start
	!by $80
	!wo 0
	!wo modend
	!wo 0
	!tx "M.C.S. FracGen  "
	!tx "1.00"
	!tx "08.12.19"
	!tx "W.Kling/A.Dettke"

; ------------------------------------------------ 

jerror	jmp error

; ------------------------------------------------ 

start	lda #63
	sta cntwert

	jsr getname	; Namen sichern
	jsr gd_clrms

	jsr gd_xopen	; Datei öffnen
	jsr onebyte	; Startadresse überlesen
	bne jerror
	jsr onebyte
	bne jerror
	jsr basin		; Packindikator einlesen
	sta pack		; und merken

	ldx #0
	stx pcnt
	jsr tcopy
	iny
	sty adcnt

	ldy #0		; Parameter-Page überlesen
	jsr dumy
	jsr setdst0

	lda #25		; 25 Kachelzeilen
	sta lcnt
vloop0	lda #8		; 8 Rasterlinien
	sta vrcnt
vloop	lda dst0
	ldy dst0+1
	sta dst
	sty dst+1

	lda #40		; 40 Kacheln
	sta bcnt
vloop1	jsr action

	ldy #0
bloop1	jsr pload		; Byte aus Datei holen
	and #$0f
	tax 
	lda dnib,x	; otherwise: redefine to GoDot
	sta (dst),y
	iny 
	cpy #4
	bne bloop1

	lda dst		; nächste Kachel
	clc 
	adc #32
	sta dst
	bcc vskip0
	inc dst+1
vskip0	dec bcnt		; 40 Stück
	bne vloop1

	lda dst0		; dann nächste Rasterzeile anwählen
	clc 
	adc #4
	sta dst0
	dec vrcnt		; 8 Stück
	bne vloop		; eine Kachelzeile eingelesen

	lda dst0		; nächste Kachelzeile (1280-32 Bytes weiter)
	clc 
	adc #<1248
	sta dst0
	lda dst0+1
	adc #>1248
	sta dst0+1
	dec lcnt		; 25 Stück
	bne vloop0	; Datei eingelesen

; ------------------------------------------------ Abschluss

	jsr setinfo	; Image Information
sk10	jsr gd_xmess	; (kurz) Floppymeldung
	jsr gd_xclose	; Datei schließen
	jsr gd_spron	; Mauszeiger an
	sec 		; Modul verlassen
	rts 

; ------------------------------------------------ Decode File

pload	lda pcnt		; Wiederholungszähler läuft noch?
	beq pskip0
	lda data		; ja, Byte aufnehmen und zurück
	dec pcnt
	rts 

pskip0	jsr basin		; nein, neues Byte einlesen und dekodieren
	cmp pack
	bne pskip1
	jsr basin
	sta pcnt
	cmp #4
	lda pack
	bcc pskip2
	jsr basin
pskip2	sta data
	dec pcnt
pskip1	rts 

; ------------------------------------------------ Überlesen

dumy	jsr pload		; skip .y Bytes
	dey 
	bne dumy
	rts 

; ------------------------------------------------ Zeiger auf 4Bit setzen

setdst0	lda #<sy_4bit
	ldy #>sy_4bit
	sta dst0
	sty dst0+1
	rts 

; ------------------------------------------------ Byte und Status lesen

onebyte	jsr basin
	ldx status
	rts 

; ------------------------------------------------ Disk-Error

error	jsr sk10
	clc 
	rts 

; --------------------------- Message Display Handler

messout   ldx #<message	; display message and gauge
	ldy #>message
	jmp gd_xtxout2

tcopy	ldy #0		; Select message
tc0	lda txt,x		; in .x: offset to message
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0

action	dec adcnt
	bne ld4
	lda cntwert
	sta adcnt
	ldy offy
	cpy #20
	bne act0
	jsr clrmess
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	rts

clrmess   ldx #20		; clear gauge bar
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0		; init counters
	ldx #7	
	sty offy
	stx offx
	rts

filltab   !by 160,93,103,127,126,124,105,109
cntwert   !by 50

txt	!scr " Data @"	, 0

message   !fill 11,32
mess	!fill 21,32
	!by 0

dnib	!by $00,$11,$22,$33,$44,$55,$66,$77
	!by $88,$99,$aa,$bb,$cc,$dd,$ee,$ff

; ----------------------------------------- Image Information Handler

getname	ldx #0
si0	lda ls_lastname,x	; name of loaded picture
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts

setinfo	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata

setname	lda #0
	ldx #<ls_picname
	ldy #>ls_picname
	bne si3
setloader	lda #17
	ldx #<ls_iloader
	ldy #>ls_iloader
	bne si3
setmode	lda #25
	ldx #<ls_imode
	ldy #>ls_imode
	bne si3
setdata	lda #33
	ldx #<ls_idrive
	ldy #>ls_idrive
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4 	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts

nbuf	!fill 16,32	; 16 Bytes Puffer für "Filename"
	!by 0

modname	!scr "MCSdat @"
modetx	!scr "160x200@"	; resolution "Multi"
datatype	!scr "Color@"	; datatype "Color"

; ------------------------------------------------ 

modend	!eof 
