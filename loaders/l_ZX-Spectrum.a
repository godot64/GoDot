
	*= $c000
	!src "godotlib.lib"
	!ct pet
;	!sl "labels.txt"

; --------------------------------------
;
;    ldr.ZX-Spectrum
;    Lader für Screen-Dumps des ZX-Spectrum,
;    Format 256x192, Kürzel ".scr"
;
;    1.00, 27.09.00, first release
;    1.01, 13.10.16, bugfix, section deint didn't display activity
;    1.02, 13.09.21, added: break loading process with STOP key
;    1.03, 04.05.22, added: set render mode automatically
;
; --------------------------------------

; -------------------------------------- Equates

	ftype		= $30
	counter		= $31
	gbyte		= $32
	byte		= $33
	press		= $34
	cnt		= $35
	src		= $36
	dest		= $38
	dest0		= $3a
	blcnt		= $3c
	lncnt		= $3d
	thirds		= $3e
	cntmerk		= $3f
	adcnt		= $40
	vr		= $45
	cr		= $47

	vv		= sc_merk
	offx		= ls_adrmisc
	offy		= offx+1

	patch		= $17af
	bmbuffer		= $6000
	buildbuf		= $a000
	vrbuf		= $c600
	crbuf		= vrbuf+$0400
	col0		= vrbuf+$0800

; -------------------------------------- Header

	jmp start
	!by $80
	!by $00,$00
	!wo modend
	!by $00,$00
	!tx "ZX-Spectrum.scr "
	!tx "1.03"
	!tx "04.05.22"
	!tx "A.Dettke        "

; -------------------------------------- Main

jerror	jmp error

; -------------------------------------- 

start	lda #52		; Activity vorbereiten
	sta cntwert
	sta adcnt
	jsr getname	; Filenamen merken

stt2	jsr gd_xopen	; File öffnen
	jsr gd_clrms	; Gauge vorbereiten

; -------------------------------------- 

	ldx #18		; Text anwählen ("Bitmap")
	jsr tcopy

read1	lda #0		; $1800 nach ls_vekta8 (Zähler=6144)
	sta sc_stop	; init break by STOP ### 1.02
	sta sc_texttab
	sta ls_vekta8
	lda #$18
	sta ls_vekta8+1
	lda #>buildbuf	; $a000 nach sc_texttab (Zielbereich)
	sta sc_texttab+1
	jsr rloop		; read 6144 Bytes (Bitmap)
	bne jerror	; bei Fehler: Ende

; -------------------------------------- 

	lda #5
	sta cntwert
	sta adcnt
	ldx #0		; nächsten Text anwählen ("Colors")
	jsr tcopy

read2	lda #0		; neuen Zähler setzen ($300=768)
	sta ls_vekta8
	sta sc_texttab
	lda #3
	sta ls_vekta8+1
	lda #>vrbuf	; neues Ziel ($c600) für Videoram
	sta sc_texttab+1
	jsr rloop		; read 768 Bytes
	bne jerror	; bei Fehler Ende

; -------------------------------------- 

	jsr gd_xclose	; File schließen
	jsr prepcols	; prepare for color conversion
	jsr deint		; Daten de-interleaven
	bne sk11
	jsr conhir	; GoDot-Hires vorbereiten (Nibbles tauschen)
	bne sk11
	jsr hires		; in Hires wandeln

; -------------------------------------- Abschluss

sk11	ldx #18		; Re-Init der Messages ("Bitmap")
	jsr tcopy

sk10	jsr gd_xmess	; Floppy-Meldung
	jsr setinfo	; Image Information
	jsr tog2hires	; ### 1.03
	jsr gd_spron	; Mauszeiger an
	sec		; fertig, File-Requester verlassen
	rts

; -------------------------------------- Fehler beim Einlesen

error	jsr gd_xclose
	jsr sk11
	clc
	rts

; -------------------------------------- Read Bitmap

rloop	jsr basin		; 1 Byte einlesen
	sta (sc_texttab),y	; puffern
	lda status	; Statusbyte:
	and #$bf		; was anderes als EOF?
	bne rl3		; ja, skip den Rest
	ldx sc_stop	; STOP pressed?	### 1.02
	bne rl3
	jsr action	; Activity (ändert .y)

	ldy #0		; .y wieder auf 0
	inc sc_texttab	; Zeiger vorrücken
	bne rl1
	inc sc_texttab+1
rl1	lda ls_vekta8	; Zähler herunterzählen
	bne rl2
	dec ls_vekta8+1
rl2	dec ls_vekta8
	lda ls_vekta8	; bis auf 0
	ora ls_vekta8+1
	bne rloop
rl3	rts

; -------------------------------------- De-Interleave SCR Data

deint	lda #39
	sta cntwert
	sta adcnt
	ldx #27		; nächster Text ("EnTile")
	jsr tcopy

	ldx #32		; erase buffer at $6000 (32 pages)
	lda #>bmbuffer
	ldy #0
	sty dest
	sta dest+1
	tya
dei0	sta (dest),y
	iny
	bne dei0
	inc dest+1
	dex 
	bne dei0

	lda #>bmbuffer	; .y=0, tranfer from $a000 to $6000
	sta dest+1	; and re-organize to c64 tiles
	sta dest0+1
	lda #>buildbuf
	sta src+1
	sty dest
	sty dest0
	sty src

	lda #3		; 3 Drittel
	sta thirds

lpf	lda #8		; 8 Mal pro blockline
	sta lncnt

lp6	lda #8		; 8 blocklines
	sta blcnt

lp3	ldx #32		; 1 pixel line (256 pixels)
lp0	lda (src),y
	sta (dest),y
	txa
	pha
	jsr action
	pla
	tax
	ldy sc_stop	; STOP pressed?	### 1.02
	bne rl3
	ldy #0
	inc src
	bne lp4
	inc src+1
lp4	clc
	lda dest
	adc #8
	sta dest
	bcc lp1
	inc dest+1
lp1	dex
	bne lp0

	clc		; next blockline
	lda dest
	adc #$40		; skip rest of line (64 bytes)
	sta dest
	bcc lp2
	inc dest+1
lp2	dec blcnt
	bne lp3

	inc dest0		; 8 lines per blockline
	bne lp5
	inc dest0+1
lp5	lda dest0
	sta dest
	lda dest0+1
	sta dest+1
	dec lncnt
	bne lp6

	clc		; next third (advance $a00 bytes)
	lda dest0
	adc #$f8
	sta dest0
	sta dest
	lda dest0+1
	adc #$09
	sta dest0+1
	sta dest+1
	dec thirds
	bne lpf
	
; -------------------------------------- 

	lda #>buildbuf	; write back to $a000 as c64 bitmap
	sta dest+1
	lda #>bmbuffer
	sta src+1
	sty dest
	sty src

	ldx #32		; 32 pages nach $a000
lp7	lda (src),y
	sta (dest),y
	iny
	bne lp7
	inc dest+1
	inc src+1
	dex 
	bne lp7

	lda #24		; now the colors, 24 blocklines
	sta lncnt

	lda #>bmbuffer	; from $c600 to $6000
	sta dest+1
	lda #>vrbuf
	sta src+1
	sty dest
	sty src

	ldx #4		; first clear buffer (4 pages)
	tya		; .y=0
lpe	sta (dest),y
	iny
	bne lpe
	inc dest+1
	dex
	bne lpe
	lda #>bmbuffer
	sta dest+1

lpc	ldx #32		; .y=0, build transfer buffer
lpa	lda (src),y	; transfer 32 bytes
	sta (dest),y
	inc src
	bne lp8
	inc src+1
lp8	inc dest
	bne lp9
	inc dest+1
lp9	dex
	bne lpa

	clc		; and skip 8 bytes (right border)
	lda dest
	adc #8
	sta dest
	bcc lpb
	inc dest+1
lpb	dec lncnt
	bne lpc

	ldx #4		; transfer 4 pages to $c600
	lda #>vrbuf
	sta dest+1
	lda #>bmbuffer
	sta src+1
	sty dest
	sty src
lpd	lda (src),y
	sta (dest),y
	iny
	bne lpd
	inc src+1
	inc dest+1
	dex
	bne lpd

	rts		; fertig, Bitmap und Farben gepuffert

; -------------------------------------- Farben umorganisieren
;
; Aufbau: Bit: Inhalt
;           7: Blinken
;           6: Brightness
;         5-3: Ink
;         2-0: Paper

prepcols	lda #>vrbuf	; videobuffer at $c600
	sta src+1
	ldy #0
	sty src
	ldx #3		; 3 pages
pc0	lda (src),y	; get color byte
	pha		; store
	lsr
	lsr
	lsr
	and #$0f		; isolate ink
	sta byte		; store
	pla		; re-get byte
	pha
	and #$40		; => isolate brightness bit
	asl
	sta gbyte		; store
	bpl pc1
	lda #8
	ora byte
	sta byte
pc1	pla		; re-get byte
	and #7		; => isolate paper color
	asl		; shift to upper nibble
	asl
	asl
	asl
	ora gbyte		; enter brightness bit
	ora byte		; enter ink color
	sta (src),y	; store color byte back to buffer
	iny
	bne pc0
	inc src+1
	dex
	bne pc0
	rts

; ----------------------------------------- Set Render Mode

tog2hires	lda #2		; für Umschalten auf Hires
	!by $2c
tog2multi	lda #0		; für Umschalten auf Multi    
	sta gr_cmode
	lda #16
	sta sc_br
	lda #$4c		; self modifying
	sta patch
	jsr ev_sccont	; Modus setzen und Anzeige anpassen
	lda #$20		; unpatch
	sta patch
	rts

; -------------------------------------- Message Handler

messout	ldx #<message
	ldy #>message
	jmp gd_xtxout2

tcopy	ldy #0
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0

action	dec adcnt
	bne ld4
	lda cntwert
	sta adcnt
	ldy offy
	cpy #20		; Wert wie bei clrmess
	bne act0
	jsr clrmess
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	rts

clrmess	ldx #20
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts

filltab	!by 160,93,103,127,126,124,105,109

cntwert	!by 50

txt	!scr " Colors @"
	!scr " Convert@"
	!scr " Bitmap @"
	!scr " EnTile @"
	!scr " Move   @"

message	!scr " Bitmap    "
mess	!fill 21,32
	!by 0

; -------------------------------------- Convert to GoDot Hires

hires	lda #50
	sta cntwert
	sta adcnt
	ldx #9		; nächster Text ("Convert")
	jsr tcopy

	lda #<(8000)	; Zähler für 8000 Bytes
	sta ls_vekta8
	lda #>(8000)
	sta ls_vekta8+1
	lda #0		; initialisieren der Arbeitspuffer
	tay
	sta vr
	sta cr
	sta sc_texttab
	sta vv
	lda #>buildbuf	; Quelldaten in $a000
	sta cr+1
	asl		; Ziel in $4000
	sta sc_texttab+1
	lda #>vrbuf	; Videoram in $c600
	sta vr+1
	lda #>crbuf
	sta vv+1

hloop1	ldx #8		; 8 Mal (eine Kachel)
	stx cntmerk
hilp	lda (cr),y	; hol Byte aus Bitmap
	sta byte
	jsr action
	ldx sc_stop	; STOP pressed?	### 1.02
	bne je0

	ldy #0		; wandeln nach 4Bit
	ldx #4
hl2	asl byte
	bcc hl3
	lda (vv),y
	!by $2c
hl3	lda (vr),y
	and #$0f
	tay
	lda dnib,y	; Farbe zuweisen (Pixel links)
	and #$f0
	sta col0
	ldy #0
	asl byte
	bcc hl4
	lda (vv),y
	!by $2c
hl4	lda (vr),y
	and #$0f
	tay
	lda dnib,y	; Farbe zuweisen (Pixel rechts)
	and #$0f
	ora col0
	ldy #0
	sta (sc_texttab),y	; speichern
	inc sc_texttab	; nächstes Byte
	bne lh5
	inc sc_texttab+1
lh5	dex
	bne hl2

	inc cr		; vorrücken in der Bitmap
	bne hl6
	inc cr+1
hl6	lda ls_vekta8	; zählen
	bne hl7
	dec ls_vekta8+1
hl7	dec ls_vekta8

	dec cntmerk	; Kachel durch?
	bne hilp		; nein, Loop

	inc vr		; dann vorrücken in den Farben
	bne hl8
	inc vr+1
hl8	inc vv
	bne hl9
	inc vv+1
hl9	lda ls_vekta8	; 8000 Bytes durch?
	ora ls_vekta8+1
	bne hloop1	; nein, von vorn

je0	rts

; -------------------------------------- 

conhir	lda #7
	sta cntwert
	sta adcnt
	ldx #36		; nächster Text (Move")
	jsr tcopy

	ldx #4		; 4 Pages (1024 Bytes):
	stx cntmerk
	lda #0
	tay
	sta ls_vekta8
	sta sc_texttab
	lda #>vrbuf	; Vektor auf Videoram setzen
	sta ls_vekta8+1
	lda #>crbuf
	sta sc_texttab+1	; Vektor auf (leeres) Colorram setzen
ml2	lda (ls_vekta8),y	; Videoram holen
	sty vv
	asl		; Nibbles tauschen
	rol vv
	asl
	rol vv
	asl
	rol vv
	asl
	rol vv
	ora vv
	sta (sc_texttab),y	; zurückspeichern ins Colorram
	tya
	pha
	jsr action	; Activity
	pla
	tay
	ldx sc_stop	; STOP pressed?	### 1.02
	bne je0
	iny
	bne ml2

	inc ls_vekta8+1	; nächste Page
	inc sc_texttab+1
	dec cntmerk	; bis alle durch
	bne ml2
	rts

; -------------------------------------- Spectrum-Farbzuweisung

dnib	!by $00,$11,$44,$55,$aa,$cc,$dd,$bb
	!by $00,$11,$99,$55,$ee,$cc,$dd,$ff

; -------------------------------------- Image Information Handler 

getname	ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts

getdatac	ldx #4
	!by $2c
getdatag	ldx #9
	ldy #4
sinfo0	lda dtextc,x
	sta datatype,y
	dex
	dey
	bpl sinfo0
	rts

setinfo	jsr getdatac
	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata

setname	lda #0
	ldx #<(ls_picname)
	ldy #>(ls_picname)
	bne si3
setloader	lda #17
	ldx #<(ls_iloader)
	ldy #>(ls_iloader)
	bne si3
setmode	lda #25
	ldx #<(ls_imode)
	ldy #>(ls_imode)
	bne si3
setdata	lda #33
	ldx #<(ls_idrive)
	ldy #>(ls_idrive)
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts

nbuf	!fill 16,32
	!by 0
	!scr "SpecSCR@"
	!scr "256x192@"
datatype	!scr "Color@"

ttext	!scr "Text   "
htext	!scr "256x192"
mtext	!scr "160x200"
dtextc	!scr "Color"
dtextg	!scr "Grey "

; --------------------------------------

modend	!eof
