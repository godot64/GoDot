
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ------------------------------------------------------------ 
;
; ldr.4Bit&Mask
; Lader für 4Bit mit der Möglichkeit, Flächen per (Hires-) Maske
; auszusparen und damit zu schützen
;
;    1.04, 18.12.93, bugfixes
;    1.05
;    1.06, 09.01.94, added: RAM support
;    1.07, 11.01.99, added: Clips (not successfully)
;    1.08, 20.01.02, finished: Clips
;    1.09, 09.10.03, added: ignore mask
;    1.10, 28.08.04, added: preview
;    1.11, 07.09.16, added: get mask from undo
;    1.12, 18.01.18, added: merge mask from undo
;    1.13, 21.06.19, added init keyboard for SuperCPU
;
; ------------------------------------------------------------ 

	 filetype		= $30
	 counter		= $31
	 gbyte		= $33
	 ymerk		= $34
	 adcnt		= $35
	 offx		= $36
	 offy		= $37
	 readvek		= $38
	 pfvek		= $3a
	 brmerk		= $3c
	 dst		= $3d
	 bbreite   	= $3f
	 rrand		= $40
	 skip		= $41
	 mask		= $43
	 maskcnt		= $44
	 byte1		= $45
	 byte2		= $46
	 masksrc		= $47
	 masksrcw		= $49

	 colors		= $0400

	 execarea		= $c000
	 y2		= $d005
	 vdc		= $d600
	 vdcdata		= $d601

; ----------------------------------------- Header

header 	jmp start
	!by $80
	!by 4
	!by 1
	!wo modend
	!wo 0
	!pet "4Bit+BmMask+Clip"
	!pet "1.13"
	!pet "21.06.19"
	!pet "A.Dettke/W.Kling"

; ----------------------------------------- Leave Loader

cancel 	lda #$ff
	sta used
	lda msstore
	sta gd_modswitch
cn2 	sec
	rts

; ----------------------------------------- Main

jrequ 	jmp requ
jinst 	jmp install
jmerge 	jmp merge
jerror 	jmp error

start 	ldx used		; build Requester?
	bmi jrequ		; yes
	beq cancel
	cpx #1		; read mask
	beq jinst
	cpx #3		; add another mask
	beq jmerge
	cpx #4
	bcs cancel

st0 	lda #200
	sta cntwert
 	ldx #0		; read 4bit
	stx breite
	stx breite+1
	stx bbreite
	stx bbreite+1
	stx brmerk
	stx filetype
	jsr tcopy

	jsr setfull
	ldy #0
	sty $d015

setsource	lda flag4		; Which source? (0=disk)
	pha
	beq ob3
	cmp #3
	bne ob31

ob32 	sei		; 3=VDC2
	ldx #$12
	lda #$83
	jsr setvdc
	jsr clrlo
	cli
	ldx #<(readvdc)
	ldy #>(readvdc)
	bne ob4

ob31 	lda ramtype	; Art des Extra-RAM?
	cmp #4		; REU bzw. SuperRAM?
	bcs ob30		; yes
	cmp #3		; Pagefox?
	bne ob32		; no, VDC2

	lda #$80		; on Pagefox
	ldx #0
	sta pfvek+1
	stx pfvek
	lda #8
	sta pfbank
	ldx #<(readpfox)
	ldy #>(readpfox)
	bne ob4

ob30 	cmp #7		; SuperRAM?
	beq ob3		; yes, but not yet implemented, so: disk

	ldx #<(readreu)	; on REU (Typ 4, 5 oder 8)
	ldy #>(readreu)
	bne ob4

ob3 	ldx #<(readdisk)	; on disk
	ldy #>(readdisk)

ob4 	stx readvek
	sty readvek+1
	pla		; flag4: from disk?
	beq ob7		; yes

	cmp #2		; from Temp?
	bne ob6
	jsr srt2		; yes
	bcc ld61

ob6 	cmp #3		; from VDC?
	beq ld61
	jsr srt7		; no, Undo
	bcc ld61
; ----------------------------------------- 
ob7	jsr getname	; save filename
	jsr gd_xopen	; open file
	jsr onebyte	; packed/raw 4bit?
	beq ld64
ld63 	jmp error
ld64 	tay
	beq ld60
	jsr onebyte
	bne ld63
	jsr onebyte
	bne ld63
ld60 	jsr onebyte
	bne ld63
	sta filetype
	tya
	bne ld61
	sta filetype	; set type
; ----------------------------------------- 
ld61 	asl filetype
	lda filetype	; 4Bit Clip?
	and #2
	beq ob50

	jsr getfclip	; yes, get clip data from file
	lda clpbr
	sta brmerk
	jsr gbh2

ob50 	lda wclip		; which clipmode?
	beq ld62

ob51 	cmp #1		; 1: To Clip
	bne ob52
	jsr set2clip
	bne ld62

ob52 	cmp #2		; 2: Into Clip
	bne ob53
	jsr setin2clp
	bne ld62

ob53 	jsr setorigin	; 3: To Origin

ld62 	jsr gd_clrms	; 0: To Full
	stx offy
	stx counter
	stx counter+1
	lda #7
	sta offx

	inx
	stx adcnt
	lda masksrc
	ldy masksrc+1
	sta masksrcw
	sty masksrcw+1
; ----------------------------------------- 
ld0 	ldx breite	; set counters
	stx ls_vekta8
	ldy breite+1
	sty ls_vekta8+1
	ldx bbreite
	stx skip
	ldy bbreite+1
	sty skip+1
	ldx #0
	stx maskcnt

ld01 	ldy #0		; get mask for current position
	lda maskcnt
	bne ld1
	lda #4
	sta maskcnt
	lda usemskflg
	beq ld03
	lda (masksrcw),y
ld03 	sta mask
	inc masksrcw
	bne ld1
	inc masksrcw+1

ld1 	jsr readfile	; get byte from image
	ldx $90
	bne ld5

	tax
	lda skip		; must be skipped?
	ora skip+1
	beq ld02		; yes

	txa		; no, split byte into 2 pixels:
	and #$f0		; ****....
	sta byte1
	txa
	and #$0f		; ....****
	sta byte2

	asl mask		; left mask pixel set?
	bcs sk1		; yes, skip
	lda (sc_texttab),y	; no, replace 4bit pixel
	and #$0f
	ora byte1		; with pixel from file
	sta (sc_texttab),y
sk1 	asl mask		; right mask pixel set?
	bcs sk2		; yes, skip
	lda (sc_texttab),y	; no, replace 4bit pixel
	and #$f0
	ora byte2		; with pixel from file
	sta (sc_texttab),y

sk2 	inc sc_texttab
	bne sk22
	inc sc_texttab+1

sk22 	dec maskcnt
	lda skip		; decrement skip counter
	bne ld11
	dec skip+1
ld11 	dec skip

ld02 	jsr cou6		; inc image pointer/ dec byte counter

	jsr action	; activity display

	lda $90
	bne ld5

sk4 	lda ls_vekta8	; byte counter finished?
	ora ls_vekta8+1
	bne ld01

	clc		; yes, proceed to next blockline
	lda dst+1
	adc #5
	sta dst+1
	sta sc_texttab+1
	lda dst
	sta sc_texttab
	clc
	lda masksrc
	adc #<320
	sta masksrc
	sta masksrcw
	lda masksrc+1
	adc #>320
	sta masksrc+1
	sta masksrcw+1
	dec hoehe		; and decrement height
	bne jld0

ld3 	lda flag4		; from disk?
	bne ld6		; no

	ldx which
	bne ld5
	jsr setinfo

ld5 	jsr gd_xclose	; close files
	jsr gd_xmess

ld7 	jsr gd_spron	; mouse pointer on
	ldx #20		; re-init activity display
	lda #32
ld8 	sta mess,x
	dex
	bpl ld8
	jmp cancel	; leave

jld0 	jmp ld0

ld6 	jsr srt4		; reset REU record
	jsr vw2		; generate main screen
	jmp ld7

; ----------------------------------------- Requester

requ  	lda list+1
	bne rq0
	ldx sc_screenvek	; 1st time: store address
	ldy sc_screenvek+1
	stx list
	sty list+1
	lda gd_modswitch	; (v1.10)
	sta msstore
rq0 	inc used
	ldx #0
	stx $90
	ldx #<(fbitlst)	; display requester
	ldy #>(fbitlst)
	jsr gd_xmloop	; wait...
	jmp start		; then start over

; ----------------------------------------- Gauge

action 	dec adcnt
	bne ld40
	lda cntwert
	sta adcnt
	ldy offy
	cpy #22
	bne act0
	jsr clrmess
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld40
	inc offy
	lda #7
	sta offx
ld40 	rts

tcopy 	ldy #0
tc0 	lda txt,x
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0

clrmess 	ldx #21
	lda #32
cl0 	sta mess,x
	dex
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts

messout 	ldx #<(message)
	ldy #>(message)
	jmp gd_xtxout2

; ----------------------------------------- 

error 	jsr ld3
	clc
	rts

; ----------------------------------------- Read 1 byte from disk

onebyte 	jsr basin
	ldx $90
	rts

; ----------------------------------------- 

filltab 	!by 160,93,103,127,126,124,105,109
cntwert 	!by 200

txt 	!scr " 4Bit   @"
	!scr " Mask   @"
message 	!scr " Reading  "
mess 	!fill 22,32		; reserve 22 spaces
	!by 0

; ----------------------------------------- Gauge when in RAM mode

gaugelst 	!by 0,22,3,34,3,$02,0,0,$80

; ----------------------------------------- Screenlist

fbitlst 	!by 0
	!by 11,29,11,7,$4d
	!wo ev_prviu
	!by 2,10,20,23,$91,0,0
	!scr "Select Operation@"
	!by 4,10,10,3,$c8,<(sevinst),>(sevinst)
	!scr "Get Mask@"
from 	!by 4,24,6,3,$cf,<(sevfrom),>(sevfrom)
fromtx 	!scr "Disk@"
	!by 7,10,10,3,$c8,<(sevmerge),>(sevmerge)
	!scr "Mrge Msk@"
mfrom 	!by 7,24,6,3,$cf,<(sevmfrom),>(sevmfrom)
mfromtx 	!scr "Disk@"
	!by 10,10,20,3,$ca,<(sevview),>(sevview)
	!scr "View Mask@"
	!by 13,10,20,3,$ca,<(sevinv),>(sevinv)
	!scr "Invert Mask@"
	!by 16,10,10,3,$c8,<(sevget),>(sevget)
	!scr "Get 4Bit@"
from4 	!by 16,24,6,3,$cf,<(sev4from),>(sev4from)
fromtx4 	!scr "Disk@"
usemskgad	!by 19,25,5,3,$cf,<(evusemask),>(evusemask)
usemsktxt	!scr "yes@"
	!by 22,10,20,3,$c9,<(cn2),>(cn2)
	!scr "Leave@"

	!by $c0,4,19,4
	!scr "from@"
	!by $c0,7,19,4
	!scr "from@"
	!by $c0,16,19,4
	!scr "from@"
	!by $c0,19,12,9
	!scr "Use Mask:@"
	!by $80

; ----------------------------------------- 

fromwhich	!scr "ClipDiskUndoTempVDC2"
used 	!by $ff
msstore	!by 0
which 	!by 0
fflag 	!by $00
mflag	!by $00
list 	!wo $00
clpzl 	!by 0
clpsp 	!by 0
clpbr 	!by 0
clpho 	!by 0
mclip 	!by 0,0,40,25
full 	!by 0,0,40,25
breite 	!wo 0
hoehe 	!by 25
wclip 	!by 0
wcliptx 	!scr " to Full  to Clip into Clipto Origin"
clipoffs 	!by 8,17,26,35
ramtype 	!by 9
banks 	!by $ff,$ff,0,0,3,7,$ff,$ff,1,0
bank 	!by 7
pfbank 	!by 8
usemskflg	!by 1
yesno	!scr " noyes"
flag4 	!by $00
reuinit 	!by <(gbyte),>(gbyte),0,$83,7,1,0
	!by 0,$c0,0,0,0,0,$10

; ----------------------------------------- Event: Merge another Mask

sevmerge	lda mflag
	beq +
	jmp merge

+ 	inc used
	jsr srt1
	stx flag4

; ----------------------------------------- Event: Get 4Bit

sevget 	inc used
	lda flag4		; from REU?
	beq sss
	jsr gaugeout	; yes, gauge
	jmp st0
sss 	jmp sin1		; no, requester

; ----------------------------------------- Event: View Mask

sevview 	lda #$1b		; hires on
	sta $d018
	lda #$3b
	sta $d011
	lda #$f0		; lt gray/ black
	ldy #250
	ldx #0
	stx sc_stop
	stx sc_keyprs	; ### 1.13
vw0 	sta colors-1,y
	sta colors+249,y
	sta colors+499,y
	sta colors+749,y
	dey
	bne vw0

vw1 	lda sc_keyprs	; wait for keypress
	ora sc_stop
	beq vw1

	ldx #$13		; text on
	lda #$1b
	stx $d018
	sta $d011
vw3 	dec used
vw2 	ldx list		; display main screen
	ldy list+1
	jsr gd_screen
	sec
	rts

; ----------------------------------------- Event: Invert Mask

sevinv 	lda #200
	jsr initad
	ldy #0
	lda #<($2000)
	ldx #>($2000)
	sta sc_vekt20
	stx sc_vekt20+1
	lda #<(8000)
	ldx #>(8000)
	sta ls_vekta8
	stx ls_vekta8+1
sin0  	lda (sc_vekt20),y
	eor #$ff
	sta (sc_vekt20),y
	dec adcnt		; activity bar
	bne sin2
	lda #200
	sta adcnt
	inc y2
	inc y2+2
sin2 	jsr count
	bne sin0
	jsr clearad
	clc
	rts

; ----------------------------------------- Counters

count 	inc sc_vekt20
	bne cou5
	inc sc_vekt20+1
cou5 	inc sc_texttab
	bne cou6
	inc sc_texttab+1
cou6 	lda ls_vekta8
	bne cou7
	dec ls_vekta8+1
cou7 	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	rts

; ----------------------------------------- Event: Set Source of Mask for Merge

sevmfrom	ldx mflag
	beq +
	ldx #$ff
+	inx
	stx mflag
	beq +
	lda rm_ramundo	; Undo rendered vorhanden?
	and #2
	beq sevmfrom	; nein, zurückstellen
	ldx #11		; Undo (1)
	!by $2c
+	ldx #7		; oder Disk (0)
	ldy #3
-	lda fromwhich,x
	sta mfromtx,y
	dex
	dey
	bpl -
	jsr getmtab
	jmp mrt4

; ----------------------------------------- Event: Set Source of Mask for Load

sevfrom 	lda fflag
	cmp #1		; Obergrenze? 
	bne mrt0
	lda #$fe		; ja, zurück auf Anfang (#$ff)
	sta fflag
mrt0 	inc fflag		; nächste Einstellung
	lda fflag	
	beq mrt1		; fflag=0 ?
	bmi mrt2		; fflag=$ff ?
	lda rm_ramundo	; nein, dann fflag=1 (Undo), Undo rendered vorhanden?
	and #2
	beq sevfrom	; nein, nächste
	ldx #11		; ja, eintragen
	!by $2c
mrt1 	ldx #7		; 0: Disk
	!by $2c
mrt2	ldx #3		; $ff: Clip
	ldy #3
mrt3 	lda fromwhich,x
	sta fromtx,y
	dex
	dey
	bpl mrt3
	jsr gettab
mrt4	ldy #6
	jmp gd_xtxout1

; ----------------------------------------- 

getmtab	lda #<mfrom
	sta sc_screentab
	lda #>mfrom
	bne gettab2
gettab 	lda #<(from)
	sta sc_screentab
	lda #>(from)
gettab2 	sta sc_screentab+1
	lda #0
	tax
	tay
gt0 	jsr gd_setpos
	cpx #3
	bne gt0
	stx sc_ho
	jsr gd_trim
	jmp gd_initmove

; ----------------------------------------- Event: Get Mask

sevinst 	lda fflag
	bne sin3
sin1 	inc used		; 0: from Disk
	ldx #1
	jsr gd_xload
	jsr vw2
	jmp cancel
	
sin3	cmp #1
	beq install	; 1: from Undo
	jmp instclip	; $ff: from Clip

; ----------------------------------------- display REU Gauge

gaugeout 	inc used
	lda sc_screenvek
	pha
	lda sc_screenvek+1
	pha
	ldx #<(gaugelst)
	ldy #>(gaugelst)
	jsr gd_screen
	pla
	sta sc_screenvek+1
	sta gr_redisp
	pla
	sta sc_screenvek
	rts

; ----------------------------------------- Open Mask file

openumask	ldx #9
	jsr tcopy
	jsr srt4		; Init REU
	ldx #$8d		; Hi of Undo Rendered
	lda #0		; Bank
	jsr srt3		; set parameters
	bcc in10		; unbed. Sprung

openmask 	ldx #9
	jsr tcopy
	jsr gd_xopen
	jsr onebyte	; skip start address of file
	beq in0
in1 	jmp ld66
in0 	jsr onebyte
	bne in1

in10	jsr gd_clrms	; prepare status bar and activity
	stx offy
	lda #7
	sta offx
	inx
	stx adcnt
	lda #50
	sta cntwert
	ldx #$00		; set address of Rendered ($2000)
	ldy #$20
	stx sc_texttab
	sty sc_texttab+1
	lda #<(8000)	; set counter
	ldx #>(8000)
	sta ls_vekta8
	stx ls_vekta8+1
	rts

; ----------------------------------------- Read Mask

install	lda fflag		; mask from Undo?
	cmp #1
	beq in02		; ja
	jsr openmask	; nein, dann Disk (Clip schon	abgefangen)
in2 	ldy #0
	jsr basin
	sta (sc_texttab),y
	jsr action
	jsr cou5
	bne in2
	jmp ld5

; ----------------------------------------- Get UndoRendered

in02	ldx #(merge-in00)	; Aufrufroutine umkopieren, weil
in01	lda in00,x	; sie durch das RAM-Device
	sta sy_global,x	; ausgeblendet wird
	dex
	bpl in01
	jmp sy_global	; und dort ausführen:

in00	jsr gd_swapd	; RAM einblenden
	inx		; .x=0
	stx rm_werte+2	; Rendered low
	stx rm_werte+4	; Bank
	ldx #$8d		; Rendered high
	stx rm_werte+3
	ldx #10		; set .x=10: FirstInit
	jsr rm_ramvec
	lda #2		; fake: so tun, als ob
	sta rm_nextentry	; Undo Rendered geklickt wäre
	ldx #8		; FetchUndo
	jsr rm_ramvec
	ldx #1		; ForceOff, RAM ausblenden
	jsr rm_ramvec
	jmp ld6		; zurück zum Requester

; ----------------------------------------- Merge Mask

merge	lda mflag		; from Undo?
	beq +

	jsr gaugeout
	jsr openumask	; yes, set parameters
in30	ldy #0
	jsr readreu	; and process data
	ora (sc_texttab),y
	sta (sc_texttab),y
	jsr action
	jsr cou5
	bne in30
	jmp ld6

+ 	jsr openmask	; from Disk
in3 	ldy #0
	jsr basin
	ora (sc_texttab),y
	sta (sc_texttab),y
	jsr action
	jsr cou5
	bne in3
	jmp ld5

; ----------------------------------------- Read Error

ld66 	pla
	pla
	jmp ld5

; ----------------------------------------- Generate Mask from Clip

instclip 	jsr initad
	jsr clrmap
	lda #$20
	sta dst+1
	ldy #0
	sty dst
	lda sc_clipzl
	beq scp1
	sta sc_zl
scp4 	clc
	lda dst
	adc #$40
	sta dst
	lda dst+1
	adc #1
	sta dst+1
	dec sc_zl
	bne scp4
scp1 	lda sc_clipsp
	beq scp5
	sta sc_sp
scp8 	clc
	lda dst
	adc #8
	sta dst
	bcc scp6
	inc dst+1
scp6 	dec sc_sp
	bne scp8
scp5 	ldx sc_clipho
	ldy #0
cc2 	sty ls_vekta8+1
	clc
	lda sc_clipbr
	asl
	asl
	asl
	bcc cc3
	inc ls_vekta8+1
cc3 	sta ls_vekta8
	lda dst
	pha
	lda dst+1
	pha
cc0 	tya
	sta (dst),y
	inc dst
	bne cc1
	inc dst+1
cc1 	jsr cou6
	bne cc0
	pla
	sta dst+1
	pla
	clc
	adc #$40
	sta dst
	lda dst+1
	adc #1
	sta dst+1
	dex
	bne cc2
	jsr sevinv
	jmp cancel

; ----------------------------------------- Clear Hires area (Mask)

clrmap 	ldy #0
	sty sc_texttab
	lda #$20
	sta sc_texttab+1
	lda #<(8000)
	ldx #>(8000)
	sta ls_vekta8
	stx ls_vekta8+1
clm0 	lda #$ff
	sta (sc_texttab),y
	jsr cou5
	bne clm0
	rts

; ----------------------------------------- Activity Bar

initad 	sta adcnt
	ldy #60
	lda #0
adl0 	sta $3fc3,y
	dey
	bpl adl0
	sty $3fc0
	sty $3fc1
	sty $3fc2
	lda #15
	sta $d029
	sta $d02a
	lda $d01d
	ora #12
	sta $d01d
	lda $d010
	ora #12
	sta $d010
	lda #8
	sta $d004
	lda #32
	sta $d006
	lda #146
	sta y2
	sta y2+2
	sty $07fa
	sty $07fb
	lda $d015
	ora #12
	sta $d015
	rts

; ----------------------------------------- 

clearad 	lda $d015
	and #243
	sta $d015
	lda $d010
	and #243
	sta $d010
	rts

; ----------------------------------------- distributor

readfile 	jmp (readvek)

; ----------------------------------------- Read from VDC

readvdc 	sei
	ldx #$1f
	stx vdc
tv2 	bit vdc
	bpl tv2
	lda vdcdata
	cli
	rts

clrlo 	inx
	lda #0
setvdc 	stx vdc
tv5 	bit vdc
	bpl tv5
	sta vdcdata
	rts

; ----------------------------------------- Read from Pagefox

readpfox 	sei
	sty ymerk
	inc 1
	ldy #0
	lda pfbank
	sta $de80
	lda (pfvek),y
	sta gbyte
	lda #$ff
	sta $de80
	inc pfvek
	bne pw0
	inc pfvek+1
pw0 	lda pfvek+1
	cmp #$c0
	bne pw1
	lda pfbank
	cmp #10
	beq pw1
	lda #10
	sta pfbank
	lda #$80
	sta pfvek+1
pw1 	dec 1
	cli
	ldy ymerk
	lda gbyte
	rts

; ----------------------------------------- Read from REU

readreu 	lda #$91
	jsr gd_reu
	inc rm_werte+2
	bne rr0
	inc rm_werte+3
rr0 	iny
	lda gbyte
	rts

; ----------------------------------------- Read from Disk

readdisk 	lda counter
	ora counter+1
	bne getit2
	inc counter
	jsr basin
	cmp #$ad
	bne getit1
	bit filetype
	bvc getit1
	jsr basin
	sta counter
	beq rb2
	lda #0
	beq rb3
rb2 	lda #1
rb3 	sta counter+1
	jsr basin
getit1 	sta gbyte
getit2 	lda counter
	bne rb4
	dec counter+1
rb4 	dec counter
	lda gbyte
	rts

; ----------------------------------------- Event: Determine which RAM

sev4from 	lda ls_drive+6
	and #15
	sta ramtype
	tay
	lda banks,y
	sta bank
	cpy #9
	beq ok

next 	lda flag4		; toggle gadget
	cmp #3
	bne srt0
	lda #$ff
	sta flag4
srt0 	inc flag4
	beq srt1

	lda flag4
	cmp #2		; Temp?
	beq srt2
	cmp #3		; VDC?
	beq srt8

	lda rm_ramundo	; dann Undo
	and #1		; Undo vorhanden?
	beq next		; nein, nächste

srt7 	ldx #$10		; Undo
	lda #0
	jsr srt3
	ldx #11
	bne text4

srt3 	stx reuinit+3	; init REU
	sta reuinit+4
	ldx #6
	!by $2c
srt4 	ldx #13
	ldy #6
srt5 	lda reuinit,x
	sta rm_werte,y
	dex
	dey
	bpl srt5
ok 	clc
	rts

srt2 	lda rm_tmpsaved	; Temp
	and #1
next1 	beq next
	ldx #$83
	lda bank
	jsr srt3
	ldx #15
	bne text4

srt1 	jsr srt4		; Disk
	ldx #7

text4 	ldy #3
srt6 	lda fromwhich,x
	sta fromtx4,y
	dex
	dey
	bpl srt6
	lda #<(from4)
	sta sc_screentab
	lda #>(from4)
srt9 	jsr gettab2
	ldy #6
	jmp gd_xtxout1

srt8 	lda rm_tmpsaved	; VDC2
	and #2
	beq next1
	ldx #19
	bne text4

; ----------------------------------------- Image Info

getname 	ldx #0
si0 	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1 	rts

setinfo 	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata

setname 	lda #0
	ldx #<(ls_picname)
	ldy #>(ls_picname)
	bne si3
setloader	lda #17
	ldx #<(ls_iloader)
	ldy #>(ls_iloader)
	bne si3
setmode 	lda #25
	ldx #<(ls_imode)
	ldy #>(ls_imode)
	bne si3
setdata 	lda #33
	ldx #<(ls_idrive)
	ldy #>(ls_idrive)
si3 	stx dst
	sty dst+1
	tax
	ldy #0
si4 	lda nbuf,x
	beq si5
	sta (dst),y
	inx
	iny
	bne si4
si5 	rts

nbuf 	!fill 16,32
	!by 0
	!scr "4BitGod@"
	!scr "320x200@"
datatype 	!scr "Color@"

; ----------------------------------------- Event: Set Load Mode 

evusemask	ldx usemskflg
	beq em0
	ldx #$ff
em0	inx
	stx usemskflg
	bne em1
	ldy #2
	!by $2c
em1	ldy #5
	ldx #2
em2	lda yesno,y
	sta usemsktxt,x
	dey
	dex
	bpl em2
	lda #<(usemskgad)
	sta sc_screentab
	lda #>(usemskgad)
	jmp srt9

; ----------------------------------------- Read Clip data from File

jerror2	jmp error
getfclip	jsr onebyte	; fetch Clip row
	bne jerror2	; on error: exit
	sta clpzl
	jsr onebyte	; fetch Clip column
	bne jerror2
	sta clpsp
	jsr onebyte	; get width of Clip
	bne jerror2
	sta clpbr
	jsr onebyte	; get height of Clip
	bne jerror2
	sta clpho
	rts

; ----------------------------------------- set Full

setfull	lda filetype	; true Clip?
	ldx full+2
	and #2
	beq gm9	; no
	ldx brmerk	; else: save width
gm9 	ldy #3
gm0	lda full,y
	sta mclip,y
	sta clpzl,y
	dey
	bpl gm0
	jsr setclip
	lda full+3	; height 25
	sta hoehe
	txa
	sta rrand		; right border 40/ width of Clip
	jmp gbh2		; Width and Skip

; ---------------------------------------- Start address of Clip

setclip	lda #$40		; $4000 (4bit)
	sta sc_texttab+1
	lda #$20		; $2000 (Mask)
	sta masksrc+1
	ldy #0
	sty sc_texttab 
	sty masksrc
stcl	lda mclip		; plus Clip row * 1280
	beq scp11
	sta clpzl
scp41	clc
	lda sc_texttab+1
	adc #5
	sta sc_texttab+1
	clc		; * 320 in Mask
	lda masksrc
	adc #<320
	sta masksrc
	lda masksrc+1
	adc #1
	sta masksrc+1
	dec clpzl
	bne scp41

scp11	lda mclip+1	; plus Clip column * 32
	beq scp51
	sta clpsp
scp61	clc
	lda sc_texttab
	adc #$20
	sta sc_texttab
	bcc scp7
	inc sc_texttab+1
scp7	lda masksrc	; * 8 in Mask
	adc #8
	sta masksrc
	bne scp71
	inc masksrc+1
scp71	dec clpsp
	bne scp61		; is Start address

scp51	lda sc_texttab
	ldy sc_texttab+1
	sta dst
	sty dst+1
	rts 

; ----------------------------------------- Set Cliptop/File

set2clip	ldy #3		; width/height from File
gm8	lda clpzl,y
	sta mclip,y
	dey
	bpl gm8
	lda full+2	; right border to 40
	sta rrand
	ldy #1
gm1	lda sc_lastclpzl,y	; row/column from Clip
	sta mclip,y
	dey
	bpl gm1
gm4	lda clpho		; height matches?
gm5	clc
	adc sc_lastclpzl
	cmp #25
	bcc gm7
	lda #25		; too high, delimit
	sbc sc_lastclpzl
gm7	ldx clpbr		; width from File
	sta hoehe
	jsr getbbr	; compute hangover
gm6	jsr getbr
	jmp setclip

; ----------------------------------------- Set Clip from GoDot

setin2clp	ldy #3
gm2	lda sc_lastclpzl,y
	sta mclip,y
	dey
	bpl gm2
	clc		; right border = sc_clipsp+sc_clipbr
	lda sc_lastclpzl+1
	adc sc_lastclpzl+2
	sta rrand
	lda sc_lastclpzl+3	; height from Clip 
	bne gm7

; ----------------------------------------- Set Clip from File

setorigin	ldy #3		; row and column from File
gm3	lda clpzl,y
	sta mclip,y
	dey
	bpl gm3
	lda full+2	; right border = 40
	sta rrand
	lda sc_lastclpzl+1	; GoDot clip of no interest
	pha
	lda clpsp		; overwrite with clip from File
	sta sc_lastclpzl+1
	lda clpho
	jsr gm7		; width and height from File
	pla		; GoDot clip back
	sta sc_lastclpzl+1
	rts

; ----------------------------------------- fetch width from File

getbr	ldy #0
	sty breite
	sty breite+1
gbh0	clc		; width * 32
	lda breite
	adc #$20
	sta breite
	bcc gbh1
	inc breite+1
gbh1	dex
	bne gbh0		; is counter for width
	rts

; ----------------------------------------- true width of Clip

getbbr	stx brmerk	; save width
	txa
	clc
	adc sc_lastclpzl+1	; width plus Start too wide?
	cmp rrand
	bcc gbh2
	lda rrand		; then delimit
	sec
	sbc sc_lastclpzl+1

gbh2	tax		; times 32
	jsr getbr
	lda breite
	sta bbreite	; and store
	lda breite+1
	sta bbreite+1

	ldx brmerk	; width back again
	rts

modend    !eof
