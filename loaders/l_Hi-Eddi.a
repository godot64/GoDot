
	*= $c000
	!src "godotlib.lib"
	!ct pet
;	!sl "labels.txt"

; ----------------------------------- 
;
; ldr.Hi-Eddi
;   loader for colored Hires Images
;   format created by Hans Haberl (of Pagefox)
;
; 1.00, 16.01.99, first release
; 1.01, 17.08.18, reorganized
; 1.02, 13.09.21, added: break loading process with STOP key
; 1.03, 04.05.22, added: set render mode automatically
;
; ----------------------------------- 

; ----------------------------------- Equates

	adcnt	= $30
	byte	= $31
	cntmerk	= $32
	vv	= $33
	vr	= $35
	cr	= $37

	offy	= $b3
	offx	= $b2

	patch	= $17af
	vrbuf	= $c600
	crbuf	= vrbuf+$0400
	col0	= vrbuf+$0800

; ----------------------------------- 

	jmp start
	!by $80
	!wo 0
	!wo modend
	!wo 0
	!tx "Hi-Eddi Scanntr."
	!tx "1.03"
	!tx "04.05.22"
	!tx "A.Dettke        "

; ----------------------------------- 

jerror	jmp error

; ----------------------------------- 

start	lda #52
	sta cntwert
	ldx sc_vekt20	; set 4Bit address ($4000)
	ldy sc_vekt20+1
	stx sc_texttab
	sty sc_texttab+1

	jsr getname	; save filename
stt2	jsr gd_xopen	; open file
	jsr onebyte	; skip start address
	bne jerror
	jsr onebyte
	bne jerror
	stx sc_stop	; init break by STOP ### 1.02

; ----------------------------------- Get Bitmap

	jsr gd_clrms	; text output
	ldx #18		; "Bitmap"
	jsr tcopy		; .y=0
	iny
	sty adcnt

read1	lda #0
	sta sc_texttab	; count 8192 bytes
	sta ls_vekta8
	lda #$20
	sta ls_vekta8+1
	lda #$a0		; and write to $a000
	sta sc_texttab+1
	jsr rloop		; read bitmap
	bne jerror

; ----------------------------------- Get Colors

	lda #7
	sta cntwert
	ldx #0
	jsr tcopy
	iny
	sty adcnt

read2	lda #0
	sta ls_vekta8	; count 1024 bytes
	sta sc_texttab
	lda #4
	sta ls_vekta8+1
	lda #>vrbuf	; and write to vrbuf
	sta sc_texttab+1
	jsr rloop		; read colors
	bne jerror

	jsr gd_xclose	; close file
	jsr conhir
	bne sk11
	jsr hires

; ----------------------------------- 

sk11	ldx #18		; reset text to "Bitmap"
	jsr tcopy

sk10	jsr gd_xmess	; show disk error message
	jsr setinfo	; set image information
	jsr tog2hires	; ### 1.03
	jsr gd_spron	; mouse pointer on
	sec		; leave loader
	rts

; ----------------------------------- Read File

onebyte	jsr basin
	ldx status
	rts

; ----------------------------------- Error

error	jsr gd_xclose	; close file
	jsr sk11
	clc
	rts

; ----------------------------------- Read File Data

rloop	ldy #0
	jsr onebyte	; get byte
	sta (sc_texttab),y	; store
	txa		; disk error?
	and #$bf
	bne rl3
	ldx sc_stop	; STOP pressed?	### 1.02
	bne rl3
	jsr action	; no, activity
	inc sc_texttab	; proceed
	bne rl1
	inc sc_texttab+1
rl1	lda ls_vekta8	; and count
	bne rl2
	dec ls_vekta8+1
rl2	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	bne rloop
rl3	rts

; ----------------------------------------- Set Render Mode

tog2hires	lda #2		; für Umschalten auf Hires
	!by $2c
tog2multi	lda #0		; für Umschalten auf Multi    
	sta gr_cmode
	lda #16
	sta sc_br
	lda #$4c		; self modifying
	sta patch
	jsr ev_sccont	; Modus setzen und Anzeige anpassen
	lda #$20		; unpatch
	sta patch
	rts

; ----------------------------------- Message Handler

messout	ldx #<message	; output message
	ldy #>message
	jmp gd_xtxout2

tcopy	ldy #0
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0

action	dec adcnt		; show gauge
	bne ld4
	lda cntwert
	sta adcnt
	ldy offy		; ### 1.01 ab hier --
	cpy #20		; catch Gauge Overflow
	bne act0
	jsr clrmess
act0	ldx offx		; ### 1.01 bis hier --
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	rts

clrmess	ldx #20
	lda #32		; init message and gauge
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts

filltab	!by 160,93,103,127,126,124,105,109

cntwert	!by 50

txt	!scr " Colors @"	; 0
	!scr " Convert@"	; 9
	!scr " Bitmap @"	; 18
	!scr " Expand @"
	!scr " Move   @"	; 36

message	!fill 11,32
mess	!fill 21,32
	!by 0

; ----------------------------------- Convert Hires to 4Bit

hires	lda #50
	sta cntwert
	ldx #9		; "Convert"
	jsr tcopy
	iny
	sty adcnt

	lda #<8000	; count 8000 bytes
	sta ls_vekta8
	lda #>8000
	sta ls_vekta8+1

	lda #0		; set vectors
	tay
	sta vr
	sta cr		; from cr: $a000
	sta sc_texttab
	sta vv
	lda #$a0
	sta cr+1
	asl
	sta sc_texttab+1	; to $4000 (4Bit)
	lda #>vrbuf	; vr (ink): $c600
	sta vr+1
	lda #>crbuf	; vv (paper): $ca00
	sta vv+1

hloop1	ldx #8
	stx cntmerk
hilp	lda (cr),y	; Bitmap holen
	sta byte
	jsr action	; Activity
	ldx sc_stop	; STOP pressed?	### 1.02
	bne je1
	ldy #0

	ldx #4		; isolate pixels
hl2	asl byte
	bcc hl3
	lda (vv),y	; pixel set (ink)	
	!by $2c
hl3	lda (vr),y	; pixel not set (paper)
	and #$0f
	tay
	lda dnib,y	; assign to 4Bit color
	and #$f0		; first: ink
	sta col0		; and store

	ldy #0
	asl byte		; next pixel
	bcc hl4
	lda (vv),y	; set
	!by $2c
hl4	lda (vr),y	; not set
	and #$0f
	tay
	lda dnib,y	; assign
	and #$0f		; paper
	ora col0

	ldy #0		; store to 4Bit
	sta (sc_texttab),y

	inc sc_texttab	; proceed
	bne lh5
	inc sc_texttab+1
lh5	dex		; count 8 pixels
	bne hl2

	inc cr		; proceed in buffers
	bne hl6
	inc cr+1
hl6	lda ls_vekta8	; count bitmap
	bne hl7
	dec ls_vekta8+1
hl7	dec ls_vekta8
	dec cntmerk	; count lines per card
	bne hilp

	inc vr		; next card ink
	bne hl8
	inc vr+1
hl8	inc vv		; paper
	bne hl9
	inc vv+1
hl9	lda ls_vekta8	; finished?
	ora ls_vekta8+1
	bne hloop1

je1	rts		; yes

; ----------------------------------- Move Colors

conhir	lda #7
	sta cntwert
	ldx #36		; "Move"
	jsr tcopy
	iny
	sty adcnt

	ldx #4		; 4 pages
	stx cntmerk
	lda #0
	tay
	sta ls_vekta8
	sta sc_texttab
	lda #>(vrbuf)	; ink
	sta ls_vekta8+1
	lda #>(crbuf)	; paper
	sta sc_texttab+1

ml2	lda (ls_vekta8),y	; get colors, .y: 0..255
	sty vv		; exchange nibbles, get ink
	asl
	rol vv
	asl
	rol vv
	asl
	rol vv
	asl
	rol vv
	ora vv
	sta (sc_texttab),y	; write to paper
	tya		; save .y
	pha
	jsr action	; activity
	pla
	tay
	ldx sc_stop	; STOP pressed?	### 1.02
	bne je0
	iny
	bne ml2		; one page
	inc ls_vekta8+1
	inc sc_texttab+1
	dec cntmerk	; count pages
	bne ml2
je0	rts

; ----------------------------------------- C64 Colors in GoDot Order

dnib	!by $00,$ff,$44,$cc,$55,$aa,$11,$dd
	!by $66,$22,$99,$33,$77,$ee,$88,$bb

; ----------------------------------------- Image Information Handler

getname	ldx #0
si0	lda ls_lastname,x	; retrieve filename
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts

setinfo	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata

setname	lda #0
	ldx #<ls_picname	; publish filename to GoDot
	ldy #>ls_picname
	bne si3
	bne si3
setloader	lda #17
	ldx #<ls_iloader
	ldy #>ls_iloader
	bne si3
setmode	lda #25
	ldx #<ls_imode
	ldy #>ls_imode
	bne si3
setdata	lda #33
	ldx #<ls_idrive
	ldy #>ls_idrive
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts

nbuf	!fill 16,32	; filename buffer
	!by 0
	!scr "Hi-Eddi@"
modetx	!scr "320x200@"
datatype	!scr "Color@"

; ----------------------------------- 

modend	!eof
