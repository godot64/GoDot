
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ----------------------------------------- 
;
;  ldr.HiresBitmap
;   Loader for standard C64 Hires Bitmaps
;
;  1.00, 15.11.92, first release
;  1.01, 15.08.18, reorganized loader
;                  bugfixes: in merge and in getcols
;
; ----------------------------------------- 

; ----------------------------------------- Equates

	adcnt	= $30
	bybuf	= $35
	btcnt	= $36
	col0	= $37
	col1	= $38
	col2	= $39
	col3	= $3a
	btbuf	= $3b

	offx	= ls_adrmisc
	offy	= offx+1

; ----------------------------------------- 

header	jmp start
	!by $80
	!by 4
	!by 0
	!wo modend
	!wo 0
	!tx "HiBitmapSpecial!"
	!tx "1.01"
	!tx "15.08.18"
	!tx "A.Dettke/W.Kling"

; ----------------------------------------- 

cancel	lda #$ff
	sta used
cn2	sec
	rts

; ----------------------------------------- 

jrequ	jmp requ
jerror	jmp error

; ----------------------------------------- 

start	ldx used
	bmi jrequ		; requester on first start
	beq cancel
	cpx #3
	bcs cancel

	dec used
	jsr getcols	; care for PICKED and set ink color accordingly
	jsr gd_xopen	; open file to read
	ldx sc_vekt20	; set target address (=4bit)
	ldy sc_vekt20+1
	stx sc_texttab
	sty sc_texttab+1
	jsr onebyte	; skip start address in file
	bne jerror
	jsr onebyte
	bne jerror

	ldx which		; Replace or Compose?
	bne ld6

	ldx #<(pureraw)	; Replace, reset to no-processing of bytes
	ldy #>(pureraw)
	jsr setdoit
	jsr getname	; save filename for image information

ld6	jsr gd_clrms	; don't save filename on Compose
	stx offy		; .x=0
	lda #200		; set activity 
	sta adcnt
	lda #7
	sta offx
	lda #1		; prepare pixel counter
	sta btcnt
	ldy #0		; count 32000 bytes
	sty ls_vekta8
	ldy #$7d
	sty ls_vekta8+1

ld0	ldy #0
	jsr getbyte	; read byte and convert to 4Bit
	jsr readbytes	; process data 
	sta (sc_texttab),y	; store to 4Bit

	jsr count		; proceed and count
	beq ld3		; finish after last byte

	jsr action	; move gauge

	lda status	; get disk status
	beq ld0		; loop if ok
	bne ld0		; otherwise don't care

; ----------------------------------------- Finish

ld3	jsr cancel	; reset recursion flag
	ldx which		; Replace or Compose?
	bne ld7
	jsr setinfo	; on Replace: set Image Information

ld7	jsr gd_xclose	; close file
	jsr gd_spron	; mouse pointer on
	jsr gd_xmess	; show disk message

	jsr clrmess	; reset gauge
	sec		; leave loader
	rts

; ----------------------------------------- 

error	jsr ld7
	clc		; after error: stay in loader
	rts

; ----------------------------------------- 

onebyte	jsr basin
	ldx status
	rts

; ----------------------------------------- Output Requester

requ	inc used		; set USED to $00
	ldx #<fourlst
	ldy #>fourlst
	jsr gd_xmloop	; wait for clicks
rq0	jmp start		; recursion

; ----------------------------------------- Event: Compose

sevcomp	inc used		; set USED to $02

; ----------------------------------------- Event: Replace

sevrepl	inc used		; set USED to $01
	ldx used
	dex
	stx which		; WHICH is one less than USED
	bne compose

; ----------------------------------------- Show Filerequester

filereq	ldx #1
	jsr gd_xload

cn3	lda #3		; set USED to $03 ("returned from filerequester")
	sta used
	sec
	rts

; ----------------------------------------- Compose Mode

compose	ldx #<complst	; change requester
	ldy #>complst
	jsr gd_xmloop	; wait for clicks
	ldx used
	cpx #3		; returned?
	bcs rq0
	jmp filereq	; no, start over requester

; ----------------------------------------- Event: Merge 

sevmerge	ldx #<merge
	ldy #>merge
	bne setdoit

; ----------------------------------------- Event: Background

sevback	ldx #<back
	ldy #>back
	bne setdoit

; ----------------------------------------- Event: Foreground

sevfront	ldx #<front
	ldy #>front

setdoit	stx doit
	sty doit+1
	sec
	rts

; ----------------------------------------- Process: Foreground

front	stx btbuf		; .x: 0..3 (index to current double pixel)
	tax		; in .a: current double pixel (fgr!)
	lda (sc_texttab),y	; in .y: 0, get current 4Bit (bgr!)
	sta byte		; and store
	txa
	and #$0f		; isolate *right* 4Bit pixel
	lsr btbuf
	bcc next		; fgr set?

	sta bbuf		; yes, save
	lda byte		; and merge with left one
	and #$f0
	ora bbuf
	sta byte

next	txa		; then, isolate *left* 4Bit pixel
	and #$f0
	lsr btbuf
	bcc ok		; fgr set?

	sta bbuf		; yes, save
	lda byte		; and merge with right one
	and #$0f
	ora bbuf
	sta byte

ok	lda byte		; return processed byte
nix	rts

; ----------------------------------------- Process: Background

back	sta byte
	lda (sc_texttab),y
	pha
	and #$f0
	beq nextb
	sta bbuf
	lda byte
	and #$0f
	ora bbuf
	sta byte
nextb	pla
	and #$0f
	beq okb
	sta bbuf
	lda byte
	and #$f0
	ora bbuf
	sta byte
okb	lda byte
	rts

; ----------------------------------------- Process: Merge

merge	stx btbuf
	pha
	and #$0f
	sta bbuf
	lda (sc_texttab),y
	and #$0f
	lsr btbuf
	bcc nop0
	sta abuf
	jsr bewerten
nop0	sta byte
	pla
	lsr
	lsr
	lsr
	lsr
	sta bbuf
	lda (sc_texttab),y
	lsr
	lsr
	lsr
	lsr
	lsr btbuf
	bcc nop1
	sta abuf
	jsr bewerten
nop1	asl
	asl
	asl
	asl
	ora byte

; ----------------------------------------- Process: No Processing

pureraw	rts

; ----------------------------------------- 

readbytes	jmp (doit)

; ----------------------------------------- Subroutine to Merge

bewerten	ldx mflag		; Aufruf von MERGE
	beq bwt0		; 50%?
	bpl bwt1		; 75%?

	tax		; nein, 25%
	lda dreifach,x	; Farbwert mal 3
	sta abuf
	txa
	jmp bwt2

bwt1	ldx bbuf		; 75%
	lda dreifach,x
	sta bbuf
	txa
	jmp bwt2

bwt0	asl abuf		; 50%
	asl bbuf

bwt2	clc
	lda abuf
	adc bbuf
	lsr
	lsr
	rts

; ----------------------------------------- Set Ink and Paper Colors

getcols	lda #0		; paper: BLK
	sta col0
	lda gr_picked
	and #$0f
	tax
	bne gc0
	ldx #1		; ink: WHT (or gr_picked)
gc0	lda gdcols,x	; produces: $00
	sta col3		;           $ff
	tax
	and #$0f		;           $0f
	sta col1
	txa
	and #$f0		;       and $f0
	sta col2
	rts

; ----------------------------------------- 

count	inc sc_texttab
	bne ld1
	inc sc_texttab+1
ld1	lda ls_vekta8
	bne ld2
	dec ls_vekta8+1
ld2	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	rts

; ----------------------------------------- 

getbyte	dec btcnt
	bne gbskip
	lda #4		; resolve one byte to 4 double pixels
	sta btcnt
	jsr basin
	sta bybuf
gbskip	lda #0
	asl bybuf		; rotate two pixels to .a
	rol
	asl bybuf
	rol
	tax		; as index into pixel masks (see getcols)
	lda col0,x	; (in .x: 0..3)
	rts

; ----------------------------------------- Event: Set Merge Rate

sevmrate	lda mflag
	cmp #1
	bne mrt0
	lda #$fe
	sta mflag
mrt0	inc mflag
	lda mflag
	beq mrt1
	bmi mrt2
	ldx #5		; 75% ($01)
	!by $2c
mrt1	ldx #3		; 50% ($00)
	!by $2c
mrt2	ldx #1		; 25% ($ff)
	ldy #1
mrt3	lda ratenum,x
	sta ratetx,y
	dex
	dey
	bpl mrt3
	jsr gettab
	ldy #6
	jmp gd_xtxout1

; ----------------------------------------- Text Output Handler

gettab	lda #<rate	; only one text provided (rate)
	sta sc_screentab
	lda #>rate
	sta sc_screentab+1
	lda #0
	tax
	tay
gt0	jsr gd_setpos
	cpx #3
	bne gt0
	stx sc_ho
	jsr gd_trim
	jmp gd_initmove

; ----------------------------------------- 

messout	ldx #<message
	ldy #>message
	jmp gd_xtxout2

action	dec adcnt		; Activity
	bne ld4
	lda #200
	sta adcnt
	ldy offy
	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	rts

clrmess	ldx #21
	lda #32
ld5	sta mess,x
	dex
	bpl ld5
	rts

filltab	!by 160,93,103,127,126,124,105,109
message	!scr " Reading  "
mess	!fill 22,32
	!by 0

; ----------------------------------------- C64 Colors in GoDot Order

gdcols	!by $00,$ff,$44,$cc,$55,$aa,$11,$dd
	!by $66,$22,$99,$33,$77,$ee,$88,$bb

; ----------------------------------------- 

mflag	!by 0
abuf	!by 0
bbuf	!by 0
byte	!by 0
doit	!wo 0
used	!by $ff
which	!by 0
dreifach	!by 0,3,6,9,12,15,18,21
	!by 24,27,30,33,36,39,42,45
ratenum	!tx "255075"

; ----------------------------------------- Screenlist Main

fourlst	!by 0
	!by 4,11,18,16,$81
	!wo 0
	!scr "Load HiRes BMap@"
	!by 9,11,18,3,$ca
	!wo sevrepl
	!scr "Replace@"
	!by 12,11,18,3,$ca
	!wo sevcomp
	!scr "Compose@"
	!by 15,11,18,3,$ca
	!wo cn2
	!scr "Cancel Load@"
	!by $c0,6,13,11
	!scr "Select Mode@"
	!by $80

; ----------------------------------------- Screenlist Compose

complst	!by 0
	!by 4,11,18,16,$81
	!wo 0
	!scr "Compose@"
	!by 8,11,18,3,$ca
	!wo sevback
	!scr "Background@"
	!by 11,11,18,3,$ca
	!wo sevfront
	!scr "Foreground@"
	!by 14,11,11,3,$c8
	!wo sevmerge
	!scr "Mixed@"
rate	!by 14,22,7,3,$cf
	!wo sevmrate
	!by 32
ratetx	!scr "50% @"
	!by 17,11,18,3,$c9
	!wo cn3
	!scr "Cancel Load@"
	!by $c0,6,15,7
	!scr "Load as@"
	!by $80

; ----------------------------------------- Image Information Handler

getname	ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts

setinfo	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata

setname	lda #0
	ldx #<ls_picname
	ldy #>ls_picname
	bne si3
setloader	lda #17
	ldx #<ls_iloader
	ldy #>ls_iloader
	bne si3
setmode	lda #25
	ldx #<ls_imode
	ldy #>ls_imode
	bne si3
setdata	lda #33
	ldx #<ls_idrive
	ldy #>ls_idrive
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts

nbuf	!fill 16,32
	!by 0
	!scr "HiBtMap@"
modetx	!scr "320x200@"
datatype	!scr "Color@"

; ----------------------------------------- 

modend	!eof
