;         
;
; ---------------------------
;
;    ldr.ZX-Spectrum
;    Lader für Sinclair ZX Spectrum SCR-Bilder
;    liefert Hires 256x192
;
;    1.00: 27.09.00, first release
;    1.01: 13.10.16, bugfix: "EnTile" not displayed
;                          : Color conversion in ink
;
; ---------------------------

!src "..\godotlib.lib"
*=$c000

; --------------------------- Equates

            status		= $90
            sprite		= $d015

            ftype		= $30
            gbyte		= $32
            byte		= $33
            press		= $34
            cnt		= $35
            src		= $36
            dest		= $38
            dest0		= $3a
            blcnt		= $3c
            lncnt		= $3d
            thirds		= $3e
            count		= $40
            vr		= $45
            cr		= $47

            cntmerk		= $aa
            vv		= $b0
            offx		= $b2
            offy		= offx+1

            vrbuf		= $c600
            crbuf		= vrbuf+$0400
            col0		= vrbuf+$0800

;
; --------------------------- Header

	jmp start
	!by $80
	!by $00,$00
	!by <(modend),>(modend)
	!by $00,$00
	!pet "load ZX-Spectrum"
	!pet "1.01"
	!pet "13.10.16"
	!pet "A.Dettke        "
;
; --------------------------- 

jerror	jmp error

; --------------------------- Main

start	lda #52		; Gauge-Zähler setzen
	sta cntwert
	sta count
	jsr getname	; Filenamen merken

stt2	jsr gd_xopen	; File öffnen
	jsr gd_clrms	; Gauge vorbereiten

	ldx #18		; Text anwählen ("Bitmap")
	jsr tcopy

read1	lda #0		; $1800 nach ls_vekta8 (Zähler=6144)
	sta sc_texttab
	sta ls_vekta8
	lda #$18
	sta ls_vekta8+1
	lda #$a0		; $a000 nach sc_texttab (Zielbereich)
	sta sc_texttab+1

	jsr rloop		; read 6144 Bytes (Bitmap)
	bne jerror	; bei Fehler: Ende
;
	lda #7
	sta cntwert
	sta count
	ldx #0		; nächsten Text anwählen ("Colors")
	jsr tcopy
;
read2	lda #0		; neuen Zähler ($300=768)
	sta ls_vekta8
	sta sc_texttab
	lda #3
	sta ls_vekta8+1
	lda #>(vrbuf)	; neues Ziel ($c600) für Videoram
	sta sc_texttab+1

	jsr rloop		; read 768 Bytes
	bne jerror	; bei Fehler Ende

	jsr gd_xclose	; File schließen

	jsr prepcols	; prepare for color conversion
	jsr deint		; Daten de-interleaven
	jsr conhir	; konvertieren nach GoDot-Hires (Nibbles tauschen)
	jsr hires		; in Hires wandeln
;
sk11	ldx #18		; Text resetten ("Bitmap")
	jsr tcopy
;
sk10	jsr gd_xmess
	jsr setinfo
	lda #$03
	sta sprite
	sec
	rts
;
; --------------------------- Error-Handling

error	jsr gd_xclose
	jsr sk11
	clc
	rts
;
; ---------------------------

rloop	jsr basin		; 1 Byte einlesen
	sta (sc_texttab),y	; merken
	lda status	; Statusbyte:
	and #$bf		; was anderes als EOF?
	bne rl3		; ja, skip den Rest

	jsr action	; Activity
	ldy #0		; Y wieder auf 0
	inc sc_texttab	; Zeiger weiterstellen
	bne rl1
	inc sc_texttab+1
rl1	lda ls_vekta8	; Zähler herunterzählen
	bne rl2
	dec ls_vekta8+1
rl2	dec ls_vekta8
	lda ls_vekta8	; bis auf 0
	ora ls_vekta8+1
	bne rloop
rl3	rts
;
; ---------------------------

deint	lda #2
	sta cntwert
	sta count
	ldx #27		; nächsten Text anwählen ("EnTile")
	jsr tcopy
;
	ldx #32		; erase buffer at $6000
	lda #$60
	ldy #0
	sty dest
	sta dest+1
	tya
dei0	sta (dest),y
	iny
	bne dei0
	inc dest+1
	dex 
	bne dei0		; Y=0

	lda #$60
	sta dest+1
	sta dest0+1
	lda #$a0
	sta src+1
	sty dest
	sty dest0
	sty src

	lda #3		; 3 Drittel
	sta thirds

lpf	lda #8		; 8 Mal pro blockline
	sta lncnt

lp6	lda #8		; 8 blocklines
	sta blcnt

lp3	ldx #32		; 1 Line
lp0	lda (src),y
	sta (dest),y
	inc src
	bne lp4
	inc src+1
lp4	clc
	lda dest
	adc #8
	sta dest
	bcc lp1
	inc dest+1
lp1	dex
	bne lp0

	clc		; next Blockline
	lda dest
	adc #$40
	sta dest
	bcc lp2
	inc dest+1
lp2	tya
	pha
	jsr action
	pla
	tay
	dec blcnt
	bne lp3

	inc dest0		; 8 lines per blockline
	bne lp5
	inc dest0+1
lp5	lda dest0
	sta dest
	lda dest0+1
	sta dest+1
	dec lncnt
	bne lp6

	clc		; next third
	lda dest0
	adc #$f8
	sta dest0
	sta dest
	lda dest0+1
	adc #$09
	sta dest0+1
	sta dest+1
	dec thirds
	bne lpf
	

	lda #$a0		; write back bitmap
	sta dest+1
	lda #$60
	sta src+1
	sty dest
	sty src

	ldx #32
lp7	lda (src),y
	sta (dest),y
	iny
	bne lp7
	inc dest+1
	inc src+1
	dex 
	bne lp7

	lda #24		; now the colors
	sta lncnt
	lda #$60
	sta dest+1
	lda #>(vrbuf)
	sta src+1
	sty dest
	sty src

	ldx #4		; first clear buffer
	tya
lpe	sta (dest),y
	iny
	bne lpe
	inc dest+1
	dex
	bne lpe
	lda #$60
	sta dest+1

lpc	ldx #32
lpa	lda (src),y
	sta (dest),y
	inc src
	bne lp8
	inc src+1
lp8	inc dest
	bne lp9
	inc dest+1
lp9	dex
	bne lpa

	clc
	lda dest
	adc #8
	sta dest
	bcc lpb
	inc dest+1
lpb	tya
	pha
	jsr action
	pla
	tay
	dec lncnt
	bne lpc

	ldx #4
	lda #>(vrbuf)
	sta dest+1
	lda #$60
	sta src+1
	sty dest
	sty src
lpd	lda (src),y
	sta (dest),y
	iny
	bne lpd
	inc src+1
	inc dest+1
	dex
	bne lpd

	rts

; ---------------------------

prepcols  lda #>(vrbuf)	; video buffer at $c600
	sta src+1
	ldy #0
	sty src
	ldx #3		; 3 pages
pc0	lda (src),y	; get color byte
	pha		; store
	lsr
	lsr
	lsr
	and #$0f		; isolate ink
	sta byte		; store
	pla		; re-get byte
	pha
	and #$40		; isolate bright bit
	asl
	sta gbyte		; store
	bpl pc1
	lda #8
	ora byte
	sta byte
pc1	pla		; re-get byte
	and #7		; isolate paper color
	asl		; to the upper nibble
	asl
	asl
	asl
	ora gbyte		; enter bright bit
	ora byte		; enter ink color
	sta (src),y	; store color byte back to buffer
	iny
	bne pc0
	inc src+1
	dex
	bne pc0
	rts

; --------------------------- Messages

messout   ldx #<(message)
	ldy #>(message)
	jmp gd_xtxout2
;
tcopy	ldy #0
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0
;
action	dec count
	bne ld4
	lda cntwert
	sta count
	ldy offy
	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	rts
;
clrmess   ldx #20
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts
;
; --------------------------- Convert Hires to 4Bit

hires	lda #50
	sta cntwert
	sta count
	ldx #9		; nächster Text ("Convert")
	jsr tcopy
;
	lda #<(8000)	; Zähler für 8000 Bytes
	sta ls_vekta8
	lda #>(8000)
	sta ls_vekta8+1
	lda #0		; initialisieren der Arbeitspuffer
	tay
	sta vr
	sta cr
	sta sc_texttab
	sta vv
	lda #$a0		; Quelldaten in $a000
	sta cr+1
	asl		; Ziel in $4000
	sta sc_texttab+1
	lda #>(vrbuf)	; Videoram in $c600
	sta vr+1
	lda #>(crbuf)
	sta vv+1
;
hloop1	ldx #8		; 8 Mal
	stx cntmerk
hilp	lda (cr),y	; hol Bitmap-Byte
	sta byte
	jsr action
	ldy #0		; wandeln nach 4Bit
	ldx #4
hl2	asl byte
	bcc hl3
	lda (vv),y
	!by $2c
hl3	lda (vr),y
	and #$0f
	tay
	lda dnib,y	; Farbe zuweisen (lo)
	and #$f0
	sta col0
	ldy #0
	asl byte
	bcc hl4
	lda (vv),y
	!by $2c
hl4	lda (vr),y
	and #$0f
	tay
	lda dnib,y	; Farbe zuweisen
	and #$0f
	ora col0
	ldy #0
	sta (sc_texttab),y	; speichern
;
	inc sc_texttab	; nächstes Byte
	bne lh5
	inc sc_texttab+1
lh5	dex
	bne hl2
	inc cr
	bne hl6
	inc cr+1
hl6	lda ls_vekta8
	bne hl7
	dec ls_vekta8+1
hl7	dec ls_vekta8
	dec cntmerk
	bne hilp
	inc vr
	bne hl8
	inc vr+1
hl8	inc vv
	bne hl9
	inc vv+1
hl9	lda ls_vekta8
	ora ls_vekta8+1
	bne hloop1
	rts
;
; ---------------------------

conhir	lda #7
	sta cntwert
	sta count
	ldx #36		; nächster Text ("Move")
	jsr tcopy
;
	ldx #4		; 4 Pages (1024 Bytes):
	stx cntmerk
	lda #0
	tay
	sta ls_vekta8
	sta sc_texttab
	lda #>(vrbuf)	; Vektor auf Videoram setzen
	sta ls_vekta8+1
	lda #>(crbuf)
	sta sc_texttab+1	; Vektor auf (leeres) Colorram setzen
ml2	lda (ls_vekta8),y	; Videoram holen
	sty vv
	asl		; Nibbles tauschen
	rol vv
	asl
	rol vv
	asl
	rol vv
	asl
	rol vv
	ora vv
	sta (sc_texttab),y	; zurückspeichern
	tya
	pha
	jsr action	; Activity
	pla
	tay
	iny
	bne ml2
	inc ls_vekta8+1
	inc sc_texttab+1
	dec cntmerk	; bis alle durch (768)
	bne ml2
	rts
;
;
; ---------------------------

filltab   !by 160,93,103,127,126,124,105,109
;
cntwert   !by 50
;
txt	!scr " Colors @"	; 0
	!scr " Convert@"	; 9
	!scr " Bitmap @"	; 18
	!scr " EnTile @"	; 27
	!scr " Move   @"	; 36
;
message   !scr " Bitmap    "
mess	!fill 21,32
	!by 0
;
dnib	!by $00,$11,$44,$55,$aa,$cc,$dd,$bb
	!by $00,$11,$99,$55,$ee,$cc,$dd,$ff

;
getname   ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts
;
getdatac  ldx #4
	!by $2c
getdatag  ldx #9
	ldy #4
sinfo0	lda dtextc,x
	sta datatype,y
	dex
	dey
	bpl sinfo0
	rts
;
setinfo   jsr getdatac
	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata
;
setname   lda #0
	ldx #<(ls_picname)
	ldy #>(ls_picname)
	bne si3
setloader lda #17
	ldx #<(ls_iloader)
	ldy #>(ls_iloader)
	bne si3
setmode   lda #25
	ldx #<(ls_imode)
	ldy #>(ls_imode)
	bne si3
setdata   lda #33
	ldx #<(ls_idrive)
	ldy #>(ls_idrive)
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts
;
nbuf	!fill 16,32
	!by 0
	!scr "ZX-Spec@"
	!scr "256x192@"
datatype  !scr "Color@"
ttext	!scr "Text   "
htext	!scr "256x192"
mtext	!scr "160x200"
dtextc	!scr "Color"
dtextg	!scr "Grey "

; ---------------------------

modend	!eof
