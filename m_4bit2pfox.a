
	!src "..\godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; --------------------------------------
;
;     mod.4Bit2PFox
;       Modifier zum Rendern von 4Bit-Bildern direkt in den
;       Bildspeicher von Pagefox
;
;     1.00, 10.08.93, first release
;     1.01, 25.08.94, bugfix: retrieve correct startadress of "gofox"
;     1.02, 24.08.16, 
;
; --------------------------------------

; -------------------------------------- Equates

	dst	= $30
	dst0	= $32
	cnt	= $34
	dbl	= $36
	vertcnt	= $37
	byte	= $39
	bitcnt	= $3a
	bcnt1	= $3b
	src	= $3c
	adcnt	= $3e
	src0	= $40
	hold	= $42
	lcnt8	= $43
	lcnt	= $44
	bcnt	= $45

	buf	= $c900
	destbuf	= $ca00

	oszi3	= $d40e
	wave	= $d412
	filter	= $d418
	rausch	= $d41b

	bswitch	= $de80
	reset	= $fce2


; --------------------------------------

header	jmp start
	!byte $20
	!byte 0
	!byte 0
	!word modend
	!word 0
	!text "4Bit->PageFox   "
	!text "1.02"
	!text "24.08.16"
	!text "A.Dettke        "

; --------------------------------------

addtext	!text "Starts PageFox  "
	!text "after transport "
	!byte 0

; --------------------------------------

start	lda ls_ramdrive	; Pagefox im System?
	and #15
	cmp #3
	beq st0
	clc		; nein, zurück zu Mainscreen
	rts

; --------------------------------------

st0	ldx #<(pflst)	; ja, Modul aktivieren
	ldy #>(pflst)
	jmp gd_xmloop

; --------------------------------------

sevpfox	jsr gd_sproff
	lda #5
	jsr initad
	lda gr_dither
	tax
	lda dlo,x
	sta dmode
	lda dhi,x
	sta dmode+1

	lda #$80		; init randomizer
	sta filter
	sta oszi3
	sta oszi3+1
	sta sc_texttab+1	; to $8000 in Pagefox
	lda #0
	sta wave
	sta sc_texttab
	lda #$81
	sta wave

; -------------------------------------- Render to Pagefox

pfoxgb	lda #<sy_4bit	; from $4000 (4Bit)
	ldx #>sy_4bit
	sta src0
	sta src
	stx src0+1
	stx src+1
	lda #0
	sta dbl
	sta vertcnt
	lda #8
	sta bank

	lda #25		; comments in svr.PFoxGB
	sta lcnt8
lnloop8	lda #0
	sta lcnt

lnloop	jsr adinc
ads0	ldx #0
zloop	lda #2
	sta bcnt1
byloop	lda #$c0
	sta bitcnt
	lda #0
	sta byte
btloop	ldy #0
	lda (src),y
	pha
	lsr
	lsr
	lsr
	lsr
	tay
	lda gr_btab,y
	jsr makebyte
	lsr bitcnt
	lsr bitcnt
	pla
	and #$0f
	tay
	lda gr_btab,y
	jsr makebyte

	inc src
	bne s3
	inc src+1
s3	lsr bitcnt
	lsr bitcnt
	bcc btloop
	sta buf,x
	inx
	dec bcnt1
	bne byloop
	lda src
	clc
	adc #28
	sta src
	bcc s4
	inc src+1
s4	cpx #80
	bne zloop
	jsr moveline

	ldx vertcnt
	inx
	cpx #8
	bne s41
	ldx #0
s41	stx vertcnt
	lda dbl
	eor #$ff
	sta dbl
	beq newline
	lda src0
	sta src

	lda src0+1
	sta src+1
	bne ads0

newline	lda src0
	clc
	adc #4
	sta src0
	sta src
	bcc s5
	inc src0+1
s5	lda src0+1
	sta src+1
	inc lcnt
	lda #8
	cmp lcnt
	beq s51
	jmp lnloop
s51	lda src0
	clc
	adc #<(1248)
	sta src0
	sta src
	lda src0+1
	adc #>(1248)
	sta src0+1
	sta src+1
	dec lcnt8
	beq done
	jmp lnloop8

done	jsr clearad
	jsr gd_spron
	clc
	rts

; --------------------------------------
; -------------------------------------- Dither Routines
; --------------------------------------

; -------------------------------------- Distributor

makebyte	jmp (dmode)

; -------------------------------------- Off

dithoff	cmp #8
	bpl do0
	lda #0
	!byte $2c
do0	lda bitcnt
	ora byte
	sta byte
	rts

; -------------------------------------- Ordered

dithrst	ldy vertcnt
	ora offs,y
	tay
	lda gr_orderedpat,y
	and bitcnt
	ora byte
	sta byte
	rts

; -------------------------------------- Pattern

dithpat	asl
	asl
	asl
	ora vertcnt
	tay
	lda gr_pattern,y
	and bitcnt
	ora byte
	sta byte
	rts

; -------------------------------------- Noise

dithnoi	beq dn0
	cmp #15
	beq dn1
	ldy #0
	sta hold
	lda rausch
	and #$0f
	cmp hold
	bcs dn3
	ldy #$aa
dn3	lda rausch
	and #$0f
	cmp hold
	tya
	bcs dn2
	ora #$55
dn2	!byte $2c
dn1	lda #$ff
	and bitcnt
dn0	ora byte
	sta byte
	rts

; -------------------------------------- Random

dithrnd	cmp #8
	beq dr0
	bcs dr1
	bcc dr2
dr0	lda rausch
	!byte $2c
dr1	lda bitcnt
	and bitcnt
	!byte $2c
dr2	lda #0
	ora byte
	sta byte
ml4	rts

; --------------------------------------
; -------------------------------------- Convert 1 Blockline
; --------------------------------------

moveline	lda vertcnt
	bne ml0

	lda #<(destbuf)
	ldy #>(destbuf)
	sta dst0
	sty dst0+1
	bne ml2

ml0	inc dst0
ml2	lda dst0
	ldy dst0+1
	sta dst
	sty dst+1

	ldy #0		; create 1 line (80 tiles)
	ldx #0
mlup	lda buf,x
	sta (dst),y
	lda dst
	clc
	adc #8
	sta dst
	bcc ml3
	inc dst+1
ml3	inx
	cpx #80
	bne mlup

	ldy vertcnt	; 8 times (1 blockline)
	cpy #7
	bne ml4		; (RTS)

; -------------------------------------- and write to Pagefox

	ldx #5		; write 640 bytes (2.5 pages)
	lda #<(destbuf)	; get bytes from render buffer
	ldy #>(destbuf)
	sta dst0
	sty dst0+1

wl6	ldy #0
wloop	lda (dst0),y
	eor #$ff		; revert them (Pagefox pixels are reverted)
	sei
	jsr spfox		; and write to Pagefox
	cli
	iny
	cpy #128
	bne wloop

	clc
	lda dst0
	adc #128
	sta dst0
	bcc wl5
	inc dst0+1

wl5	dex		; 5x128 Bytes
	bne wl6
	rts

; -------------------------------------- Transmit Data to Pagefox

spfox	stx sc_merk	; save .x and .y
	sty sc_merk+1

	ldx #$34		; get C64 bytes
	stx 1
	ldy #0
pw5	tax
	lda (sc_texttab),y
	pha		; save them

	inc 1		; write to Pagefox (same location!):
	lda bank
	sta bswitch	; switch Pagefox bank 8 at $8000 on (see sevpfox)
	txa
	sta (sc_texttab),y	; write
	lda #$ff		; switch Pagefox off
	sta bswitch
	dec 1

	pla		; restore C64 bytes
	sta (sc_texttab),y

	inc sc_texttab	; advance
	bne pw2
	inc sc_texttab+1
pw2	lda sc_texttab+1	; up to $be80
	cmp #$be
	bcc pw3
	lda sc_texttab
	cmp #$80
	bcc pw3
	lda bank
	cmp #10
	beq pw3
	lda #10		; switch to bank 10, $8000
	sta bank
	lda #$80
	sta sc_texttab+1
	asl
	sta sc_texttab

pw3	lda #$36		; end this pass
	sta 1
	ldx sc_merk	; restore .x and .y
	ldy sc_merk+1
	rts

; -------------------------------------- Event: Requester for Go to Pagefox

sevstpf	lda sc_screenvek	; save current screenlist
	pha
	lda sc_screenvek+1
	pha

	ldx #<(ldlst)	; new requester
	ldy #>(ldlst)
	jsr gd_screen
	jsr gd_eloop

	pla
	tay
	sta sc_screenvek+1	; restore
	pla
	tax
	sta sc_screenvek
	jsr gd_screen
	clc
	rts

; -------------------------------------- Event: Go to Pagefox

sevleave	lda #<(inittx)	; output: "Initialising"
	sta sc_screentab
	lda #>(inittx)
	sta sc_screentab+1
	lda #0
	tax
	tay
gt0	jsr gd_setpos
	cpx #3
	bne gt0
	jsr gd_initmove
	ldy #2
	jsr gd_xtxout1

	jsr testfile	; "gofox" on disk?
	bne sevcan	; no

	lda #$80		; yes, erase Screen 1 and 2 of Pagefox
	ldy #0		; (Screens 3 and 4 are occupied by GoDot)
	sty $d015
	sta ls_vekta8+1
	sty ls_vekta8
era1	tya
era0	sta (ls_vekta8),y
	iny
	bne era0
	inc ls_vekta8+1
	lda ls_vekta8+1
	cmp #$c0
	bne era1

	sei
	lda sy_irqalt	; switch on C64 IRQ
	ldx sy_irqalt+1
	sta $0314
	stx $0315
	inc 1
	cli
	jsr ldpfox	; LOAD "gofox",bootdrive,1
	bcs sevcan	; error?

	lda #64		; no, jump into Pagefox (and *don't* clear graphics!)
	jmp $1802

; -------------------------------------- Event: Leave

sevcan	sec
	rts

; -------------------------------------- Load Pagefox Booter

ldpfox	lda pflen
	ldx #<(pfox)	; filename ("gofox")
	ldy #>(pfox)
	jsr filnam
	lda #1
	ldx ls_bootdrive
	ldy #0
	jsr filpar
	lda #0
	ldx addr		; get start address
	ldy addr+1
	jmp $ffd5		; LOAD

; -------------------------------------- Test if booter present

testfile	lda pflen
	sta ls_temp
	lda #<(pfox)
	sta ls_vekta8
	lda #>(pfox)
	sta ls_vekta8+1
	lda ls_drive
	pha

	lda ls_bootdrive	; Open "gofox"
	sta ls_drive
	jsr gd_xopen
	jsr basin
	sta addr		; get start address
	jsr basin
	sta addr+1
	jsr gd_xclose
	jsr messout	; show floppy message

	pla
	sta ls_drive
	jsr done		; mouse on
	lda ls_err2	; error?
	and #15
	rts

; -------------------------------------- Floppy Message

messout	lda sc_screenvek	; save current screenlist
	pha
	lda sc_screenvek+1
	pha

	ldx #<(mess)	; show gauge window (gadget on bottom of screen)
	ldy #>(mess)
	jsr gd_screen

	pla		; restore screenlist
	sta sc_screenvek+1
	pla
	sta sc_screenvek
	jmp gd_xmess

; -------------------------------------- Screenlist

pflst	!byte 0
	!byte 4,11,18,16,$81,0,0
	!scr "Render to PFox@"
	!byte 9,11,18,3,$ca,<(sevpfox),>(sevpfox)
	!scr "Render@"
	!byte 12,11,18,3,$ca,<(sevstpf),>(sevstpf)
	!scr "Go to PFox@"
	!byte 15,11,18,3,$ca,<(sevcan),>(sevcan)
	!scr "Leave@"
	!byte $c0,6,11,16
	!scr "Select  Activity@"
	!byte $80

; -------------------------------------- Screenlist for Leaving to Pagefox

ldlst	!byte 0
	!byte 4,11,18,16,$81,0,0
	!scr "Render to PFox@"
	!byte 16,12,7,3,$c0,<(sevleave),>(sevleave)
	!scr " yes @"
	!byte 16,21,7,3,$c0,<(sevcan),>(sevcan)
	!scr " no! @"
	!byte $c0,7,15,8
	!scr "You will@"
	!byte $c0,9,13,12
	!scr "leave GoDot!@"
	!byte $c0,13,13,12
	!scr "Ready to go?@"
	!byte $80

mess	!byte 0			; Gauge Window Parameters
	!byte 22,3,34,3,$02,0,0
	!byte $80

; --------------------------------------

inittx	!byte 14,14,12
	!scr "Initialising@"

; -------------------------------------- Data

offs	!byte $00,$10,$20,$30
	!byte $00,$10,$20,$30

dlo	!byte <(dithoff)
	!byte <(dithrst)
	!byte <(dithpat)
	!byte <(dithnoi)
	!byte <(dithrnd)

dhi	!byte >(dithoff)
	!byte >(dithrst)
	!byte >(dithpat)
	!byte >(dithnoi)
	!byte >(dithrnd)

dmode	!word 0
xmerk	!byte 0
bank	!byte 8
pflen	!byte 5
pfox	!text "gofox"
addr	!word $0da0

; -------------------------------------- Activity Handler

adinc	dec adcnt
	bne adskip
	inc $d005
	inc $d007
	lda #5
	sta adcnt
adskip	rts

; --------------------------------------

initad	sta adcnt
	ldy #63
	lda #0
adl0	sta $3fc0,y
	dey
	bpl adl0
	sty $3fc0
	sty $3fc1
	sty $3fc2
	lda #15
	sta $d029
	sta $d02a
	lda $d01d
	ora #12
	sta $d01d
	lda $d010
	ora #12
	sta $d010
	lda #8
	sta $d004
	lda #32
	sta $d006

	lda #146
	sta $d005
	sta $d007
	sty $07fa
	sty $07fb
	lda $d015
	ora #12
	sta $d015
	rts

; --------------------------------------

clearad	lda $d015
	and #$f3
	sta $d015
	lda $d010
	and #$f3
	sta $d010
	rts

; --------------------------------------

modend	!eof


