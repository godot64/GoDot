
	!src "godotlib.lib"	; Label-Library einbinden
	*= $c000			; generelle Startadresse für alle Module
	!ct pet			; Texte werden in PETSCII assembliert

; ----------------------------------------- 
;
; svr.XXXXX
;     Saver für XXXXX-Bilder
;
; 1.00: 06.03.18, first release
;
; ----------------------------------------- 

; -------------------------------------------------------------- Label-Definitionen

	pport		= $01
	offx		= ls_adrmisc
	offy		= offx+1
	; usw.

; -------------------------------------------------------------- Header

 	jmp start			; Jedes Modul beginnt hiermit

	!by $40 			; $80=Lader, $40=Saver, $20=Modifier, $10=Device
	!by 0			; Own-Requester-Flag (nur!) für Lader (4 = eigener Req)
	!by 0			; Dirty Flag (1 = dirty, 0 = clean)
	!wo modend		; Endadresse+1 des Moduls
	!wo 0			; reserviert
	!tx "xxxxx saver     "	; Beschreibung (16 Zeichen)
	!tx "1.00"		; Versionsnummer (4 Zeichen)
	!tx "06.03.18"		; Datum (8 Zeichen tt.mm.jj)
	!tx "A.Dettke        "	; Autor (16 Zeichen)

; -------------------------------------------------------------- 

; -------------------------------------------------------------- 
; -------------------------------------------------------------- These lines mandatory!
; -------------------------------------------------------------- 

start	ldx gr_nr		; Funktionsnummer testen:
	dex
	bne saver		; Null, dann eigentlichen Saver aufrufen

	jmp initinp	; eins, dann "Input" ausführen

; -------------------------------------------------------------- 
; -------------------------------------------------------------- 
; -------------------------------------------------------------- 


; -------------------------------------------------------------- Main

sk12	jmp noreu

; -------------------------------------------------------------- 

saver	lda ls_ramdrive	; Wenn gewünscht: REU angeschlossen?
	and #15
	cmp #9
	beq sk12		; nein, gar kein Ram
	cmp #7		; nur SuperRAM? (ist noch nicht implementiert)
	beq sk12		; ja, Ende
	and #12
	beq sk12		; kein REU, Ende

	; dummy		; hier z.B. Zeiger vorbesetzen, Variablen initialisieren usw.

	jsr requester	; Requester ausgeben
	lda used		; dort Cancel geklickt?
	cmp #3
	bcs st12		; ja, Ende

st11	jsr gd_sproff	; Mauszeiger aus
	lda gd_modswitch	; Memory Management
	pha

	lda ls_flen	; Filename wurde übergeben?
	beq st1		; nein (Cancel)

	sta wflen		; sonst: retten
	jsr addsig	; Namenskürzel anhängen
	lda #1		; Counter für Activity setzen
	sta adcnt
	sta cntwert	; cntwert hängt ab vom Schreibalgorithmus

	lda #9		; Undo-Kommando vorbereiten (wenn gebraucht)
	sta getundo+1

	jsr wopen		; Writefile öffnen
	bne st2		; wenn Fehler: Ende

	jsr getname	; Filenamen sichern
	ldx #12		; OPEN #12, out
	jsr ckout
	jsr gd_clrms	; Statusfenster initialisieren
	ldx #0		; Anzeigetext #1 (Offset 0) eintragen und ausgeben
	jsr tcopy

	jsr write		; Bild speichern

st2	jsr clrch		; danach Bus freigeben
	lda #12		; Datei schließen
	jsr close
	jsr err9		; Floppystatus zeigen (sehr kurz)
	bne st1		; wenn fehlerfrei:

	jsr setname	; "Image Information"-Fenster aufbereiten

st1	pla		; dann Memory Management
	sta gd_modswitch

st12	jsr canc
	jsr gd_spron	; Mauszeiger wieder an
	sec		; Leave-Flag setzen
	rts		; fertig


; --------------------------- 
; --------------------------- Input Routines (erforderlich!)
; --------------------------- 

!src "input.inc"

; --------------------------- 
; --------------------------- 
; --------------------------- 


; -------------------------------------------------------------------------
; -------------------------------------------------------------- Disk Access Routines
; -------------------------------------------------------------------------

pw	!pet "w,p,"
sigtx	!pet "gis."
sigtxs	!scr "gis."
drinit	!pet "i0"
wflen	!by 0
used	!by $ff

; -------------------------------------------------------------- Filehandling

wopen	jsr inull		; Initialize
	bne err8
	ldy wflen		; ",p,w" anhängen
	ldx #3
wo1	lda pw,x
	sta ls_nambuf,y
	iny
	dex
	bpl wo1
	sty wflen
	lda #12		; OPEN 12,drive,12,"name,p,w"
	tay
	ldx ls_drive
	jsr filpar
	lda wflen
	ldx #<ls_nambuf
	ldy #>ls_nambuf
	jsr filnam
	jsr copen
	jmp err9
;
inull	ldx #<drinit	; Initialize Drive
	ldy #>drinit
	lda #2
	jsr gd_sendcom
err9	jsr gd_xmess
	lda ls_err2
	and #15
err8 	sec
	rts

; -------------------------------------------------------------------------
; -------------------------------------------------------------- Activity Handler
; -------------------------------------------------------------------------

messout	ldx #<message	; Textausgabe
	ldy #>message
	jmp gd_xtxout2
;
tcopy	ldy #0		; Informationstextauswahl (hinter Label "txt"), Offset auf Text in .x
tc0 	lda txt,x
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0

action 	dec adcnt		; Activity, nur bei 0
	bne ld4
	lda cntwert	; dann: Reload des Zählers
	sta adcnt
	ldy offy		; Offset auf Balkenende
	cpy #25		; Ende erreicht? (Hier den gleichen Wert wie bei clrmess einsetzen!)
	bne act0
	jsr clrmess	; ja, re-Init
act0	ldx offx		; Dicke des Balkenendstücks
	lda filltab,x
	sta mess,y
	jsr messout	; Balken ausgeben
	dec offx		; Endstück nächstes Mal dicker
	bpl ld4		; bis gefüllt
	inc offy		; dann Balken selbst verlängern
	lda #7		; Endstück wieder dünn
	sta offx
ld4 	rts

clrmess	ldx #25		; Puffer für Balken löschen
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0		; Balkenlänge 0 
	ldx #7		; Dicke am Ende 0
	sty offy
	stx offx
	rts

filltab	!by 160,93,103,127,126,124,105,109
cntwert	!by 1
txt	!scr " XXX@"	; Offset 0, (das "@" entspricht dem Screencode $00, ist hier also Stringdelimiter)
message	!fill 6,32	; 6 Zeichen für Infotext (kann geändert werden, dann "mess" anpassen)
mess	!fill 26,32	; 26 Zeichen für Fortschrittsbalken, Länge von message und mess zusammen 32
	!by 0		; Anzahl 26: bei Änderung "clrmess" und "action" anpassen (dort Wert minus 1)!


; -------------------------------------------------------------------------
; -------------------------------------------------------------- Image Info Handler
; -------------------------------------------------------------------------

getname	ldx #0		; aktuellen Filenamen sichern
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts
;
setname	lda #0		; Namen in Image Info eintragen
	ldx #<ls_picname
	ldy #>ls_picname
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts
;
nbuf	!fill 16,32
	!by 0

; -------------------------------------------------------------------------
; ----------------------------------------- Requester management
; -------------------------------------------------------------------------

requester	ldx used		; beim ersten Aufruf Requester ausgeben
	bmi requ

stay	clc		; sonst: nichts tun
	rts

; ----------------------------------------- Startup requester

requ 	inc used
	ldx #<(saverlst)
	ldy #>(saverlst)
	jmp gd_xmloop

; ----------------------------------------- Leave saver

cn2 	lda #3		; re-enter saver
	!by $2c
canc 	lda #$ff		; leave saver
	sta used
	sec
	rts

; ------------------------------------ Output gadget text routines

tabigad	!wo palgad
	!wo areagad

settext	lda #<tabigad
	sta ls_vekta8
	lda #>tabigad
	sta ls_vekta8+1

	lda (ls_vekta8),y
	sta sc_screentab
	iny
	lda (ls_vekta8),y
	sta sc_screentab+1
	lda #0
	tax
	tay
gt0	jsr gd_setpos
	cpx #3
	bne gt0
	stx sc_ho
	jsr gd_trim
	jmp gd_initmove

; -------------------------------------------------------------------------
; ----------------------------------------- Screenlist
; -------------------------------------------------------------------------

saverlst	!by 0
	!by 4,11,18,14,$81,0,0
	!scr "Save XXXXX@"
palgad	!by 9,11,18,3,$ca
	!wo stay
paltx	!scr "  GoDot   @"
areagad	!by 11,23,6,3,$ce
	!wo stay
areatx	!scr "Full@"
	!by 13,11,18,3,$cb
	!wo stay
	!scr "Save Image@"
	!by 15,11,18,3,$cb
	!wo cn2
	!scr "Cancel Save@"
	!by $c0,7,12,15
	!scr "Select Palette:@"
	!by $c0,11,12,10
	!scr "Save Area:@"
	!by $80

; -------------------------------------------------------------------------
; -------------------------------------------------------------- Write File
; -------------------------------------------------------------------------

write	; dummy
	sec		; Leave-Flag
	rts		; fertig

; ---------------------------------------------------------------------
; -------------------------------------------------------------- DoUndo
; ---------------------------------------------------------------------

doundo	lda #<undo	; eigentliche Routine verschieben
	ldx #>undo	; (weil das Modul ausgeblendet wird)
	sta ls_vekta8
	stx ls_vekta8+1
	ldy #transend-undo
sloop	lda (ls_vekta8),y
	sta sy_global,y	; nach GLOBAL
	dey
	bpl sloop
	jmp sy_global	; und dann dort ausführen:

undo 	jsr gd_swapd	; Ram einblenden
	ldx #10		; FirstInit
	jsr rm_ramvec

	ldx #6		; Parameter setzen
	lda #0
md0	sta rm_werte,x
	dex
	bpl md0
	lda #>sy_4bit	; 4Bit-Bereich im C64
	sta rm_werte+1
	lda #$10		; nach Undo4Bit im Ram
	sta rm_werte+3
	lda #$7d		; 32000 Bytes
	sta rm_werte+6
	lda #1		; Flag für 4Bit-Undo setzen
	sta rm_nextentry
;
getundo	ldx #9		; und DoUndo
	jsr rm_ramvec
	ldx #1		; danach ForceOff (Ram ausblenden)
	jsr rm_ramvec	
	jmp gd_sproff	; und Sprite wieder aus, zurück

transend

; -------------------------------------------------------------------------
; -------------------------------------------------------------- Namen verlängern
; -------------------------------------------------------------------------

addsig	pha		; Länge merken
	tay
	dey
	ldx #0
ag4	lda ls_nambuf,y	; endet auf ".SIG"?
	cmp sigtx,x
	bne ag2		; nein
	dey
	inx
	cpx #4
	bcc ag4
	pla		; ja, fertig
	rts
	
ag2	pla
	tay		; Name länger als 12 Zeichen?
	cpy #13
	bcs ag0		; ja, behandeln

ag5	ldx #3		; nein, ".sig" anhängen
ag1	lda sigtx,x
ag3	sta ls_nambuf,y
	lda sigtxs,x	; auch für Image Info
	sta ls_lastname,y
	iny
	dex
	bpl ag1
	sty wflen		; neue Länge merken, fertig
	sty ls_flen
	rts

ag0	dey		; auf 12 verkürzen
	cpy #12
	bne ag0
	beq ag5		; unbed. Sprung

; ----------------------------------------------------- Warnings Handler

noreu	ldx #<(warnlst)
	ldy #>(warnlst)
	jmp gd_xmloop

; ----------------------------------------------------- 

warnlst	!by 0
	!by 8,9,21,9,$81,0,0
	!scr "MESSAGE@"
	!by 14,23,7,3,$cd,<(canc),>(canc)
	!scr "Leave@"
	!by $c0,10,10,16
	!scr "No REU detected.@"
	!by $c0,12,11,15
	!scr "You can't save.@"
	!by $80

; ----------------------------------------------------- 

; -------------------------------------------------------------------------
; ----------------------------------------------------- Data
; -------------------------------------------------------------------------

adcnt	!by 0


modend 	!eof
