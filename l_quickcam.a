
!src "..\godotlib.lib"
*	= $c000

; *** FILE: quickcam.s
; This version of the QuickCam Godot code is in ASCII
; and is written for Buddy/EBUD/Ace Assembler.
; Accommodated to MXAss convenience.

; last revision Sat, Aug 14 1999, 10:45

; --------------------------------------------- Declarations

	zl		= $22
	ho		= $25
	adcnt		= $52
	offx		= $53
	offy		= $54
	temp		= $a7
	vekta8		= $a8
	screentab		= $ab
	modswitch		= $ad
	texttab		= $ae
	keypressed	= $c6
	numbers		= $0100
	nambuf		= $0200
	chgcol		= $0338
	iflag		= $033b
	undochar		= $0ef8
	screenvek		= $0f88
	redisp		= $0fbd
	initmove		= $1090
	fcol		= $110c
	invert		= $1125
	setpos		= $11cc
	screen		= $11e0
	evntsuch		= $12ad
	trim		= $1324
	eloop		= $1423
	exec		= $143c
	xtxout1		= $1461
	xtxout2		= $1464
	input		= $146a
	setpar		= $14e2
	clrline		= $14f3
	ibuff		= $bf00

; ------------------------------------- Module header

header
	jmp start
	!by $80		; type: loader
	!by $04		; opens own requester
	!by 0		; clean
	!wo modend
	!wo 0
	!pet "QuickCamVideoCap"
	!pet "1.01"
	!pet "15.08.99"
	!pet "N.Dannenberg/$AD"

; ------------------------------------- Main

start	lda modswitch	; save module administration flag
	pha
	lda iflag		; save input administration flag
	pha
	jsr makechar	; define new character
	lda firstaccess	; already checked?
	bne el1		; yes, present, skip reset and check
	jsr evreset	; Reset camera and initialize variables
	jsr checkcam	; no, check if camera attached
	beq exitevlp	; no, end module

el1	ldx #<quicklst	; display requester
	ldy #>quicklst
	jsr screen
	jsr evreset	; reset again, and output values
	jsr black

eventloop	lda #0		; provides live video on screen
	sta keypressed
el0 	jsr video		; ... here
	lda keypressed
	beq el0
	ldx screenvek
	ldy screenvek+1
	jsr evntsuch
	bmi eventloop
	jsr exec
	bcc eventloop

exitevlp	pla		; reinstall input flag
	sta iflag
	pla		; reinstall administration flag
	sta modswitch
evwait	sec 
	rts

; ------------------------------------- Define char 

makechar	ldy #7
mc0	lda defchar,y
	sta undochar,y
	dey
	bpl mc0
	rts

; ------------------------------------ Set and display new gadget text

tabigad	!wo gadsize	; 0
	!wo gadauto	; 2
	!wo gadblkl	; 4
	!wo gadcont	; 6
	!wo gadexpo	; 8

settext	lda #<tabigad
	sta texttab
	lda #>tabigad
	sta texttab+1

gettext	lda (texttab),y
	sta screentab
	iny
	lda (texttab),y
	sta screentab+1
	lda #0
	tax
	tay
gt0	jsr setpos
	cpx #3
	bne gt0
	stx ho
	jsr trim
	jsr initmove
	ldy #6
	jmp xtxout1

; --------------------------------------------- Variables

defchar	!by $00,$5c,$62,$72,$02,$02,$3c,$00
sizes	!scr " 80x50 160x100320x200"
sizeoffs	!by 6,13,20
sizevals	!by 40,80,160
	!by 50,100,200
autobrs	!scr " OffCntrCtWtFull"
autooffs	!by 3,7,11,15
ziff	!pet " 1234567890"
whinput	!by 0

; --------------------------------------------- Screenlist

quicklst	!by 0
	!by 1,3,34,20,$01,0,0	; Requester

	!by 2,4,16,12,$90,0,0	; Border of Display 
	!scr "QuickCam@"

	!by 4,6,12,8,$20,0,0	; Live video display

gadsize	!by 14,4,16,3,$c0		; Set Image Size
	!wo evsize
	!by 223
	!scr " Size "
txtsize	!scr " 80x50 @"

	!by 2,20,16,12,$80,0,0	; Cam Controls
	!scr " Cam Controls @"

gadauto	!by 10,30,6,3,$c0		; Set Auto Brightness
	!wo evauto
txtautobr	!scr " Off@"

gadincblk	!by 8,29,3,3,$40		; Increment BL
	!wo evincblk
gadblkl	!by 8,30,5,3,$c0		; Set Black Level
	!wo evblkl
txtblk	!scr "...@"
gaddecblk	!by 8,33,3,3,$40		; Decrement BL
	!wo evdecblk
	!by 8,29,7,3,$80		; Overlay
	!wo 0
	!scr "+  0-@"

gadinccnt	!by 6,29,3,3,$40		; Increment Contrast
	!wo evinccnt
gadcont	!by 6,30,5,3,$c0		; Set Contrast
	!wo evcont
txtcnt	!scr "...@"
gaddeccnt	!by 6,33,3,3,$40		; Decrement Contrast
	!wo evdeccnt
	!by 6,29,7,3,$80		; Overlay
	!wo 0
	!scr "+  0-@"

gadincexp	!by 4,29,3,3,$40		; Increment Expo
	!wo evincexp
gadexpo	!by 4,30,5,3,$c0		; Set Exposure
	!wo evexpo
txtexp	!scr "...@"
gaddecexp	!by 4,33,3,3,$40		; Decrement Expo
	!wo evdecexp
	!by 4,29,7,3,$80		; Overlay
	!wo 0
	!scr "+  0-@"

	!by 14,20,16,3,$c0		; Reset Camera
	!wo evreset
	!scr "Reset QuickCam"
restlst	!by 0

	!by 17,4,16,3,$c0
	!wo evacquire
	!scr "Acquire Image@"

	!by 17,27,9,3,$c0		; Leave Module
	!wo evleave
	!scr " Leave @"

; info text gadgets

	!by $c0,4,20,8
	!scr "Exposure@"
	!by $c0,6,20,8
	!scr "Contrast@"
	!by $c0,8,20,7
	!scr "Blk Lvl@"
	!by $c0,10,20,9
	!scr "AutoBrght@"

	!by $80

; --------------------------------------------- Acquire List

acqlst	!by 0
	!by 17,4,32,3,$30
	!wo 0
	!by $80

; --------------------------------------------- No QuickCam List

nocamlst	!by 0
	!by 2,3,18,14,$92,0,0	; Border of Display 
	!scr "QuickCam@"

	!by 4,6,12,8,$30,0,0	; Live video display

	!by 12,6,12,3,$c0		; Leave Module
	!wo evwait
	!scr "Leave@"

	!by $c0,5,8,6
	!scr "Device@"
	!by $c0,7,6,10
	!scr "not found!@"

	!by $80

; --------------------------------------------- Set size of image

evsize	lda imagesize
	cmp #2
	bne sz0
	lda #$ff
	sta imagesize
sz0	inc imagesize
	ldx imagesize
	lda sizeoffs,x
	tax
	ldy sizeoffs
sz1	lda sizes,x
	sta txtsize,y
	dex
	dey
	bpl sz1
	ldy #0
	jmp settext

; --------------------------------------------- Autobrightness

evauto	lda autobright
	cmp #3
	bne ab0
	lda #$ff
	sta autobright
ab0	inc autobright
	ldx autobright
	lda autooffs,x
	tax
	ldy autooffs
ab1	lda autobrs,x
	sta txtautobr,y
	dex
	dey
	bpl ab1
	ldy #2
	jmp settext

; --------------------------------------------- Exposure (Inc/Dec)

evincexp	ldx exposure
	inx
	beq eip0
eip1	stx exposure
	jsr mkdigits
ei3	lda #32
	cpy #$fe
	bcs ei4
	lda numbers,y
ei4	sta txtexp,x
	dey
	dex
	bpl ei3
	ldy #8
	jsr settext
eip0	clc
	rts
; --------------------------------------------- 

evdecexp	ldx exposure
	dex
	cpx #$ff
	beq eip0
	bne eip1

; --------------------------------------------- Contrast (Inc/Dec)

evinccnt	ldx contrast
	inx
	beq eip0
eip2	stx contrast
	jsr mkdigits
ci3	lda #32
	cpy #$fe
	bcs ci4
	lda numbers,y
ci4	sta txtcnt,x
	dey
	dex
	bpl ci3
	ldy #6
	jmp settext

; --------------------------------------------- 

evdeccnt	ldx contrast
	dex
	cpx #$ff
eip9	beq eip0
	bne eip2

; --------------------------------------------- Blacklevel (Inc/Dec)

evincblk	ldx blacklevel
	inx
	beq eip9
eip3	stx blacklevel
	jsr mkdigits
bi3	lda #32
	cpy #$fe
	bcs bi4
	lda numbers,y
bi4	sta txtblk,x
	dey
	dex
	bpl bi3
	ldy #4
	jmp settext

; --------------------------------------------- 

evdecblk	ldx blacklevel
	dex
	cpx #$ff
	beq eip9
	bne eip3

; --------------------------------------------- Acquire Image

evacquire	jsr prepacq	; clear 3 lines
	lda screenvek	; new requester (for gauge bar)
	ldx #<acqlst
	pha
	lda screenvek+1
	ldy #>acqlst
	pha
	jsr screen
	jsr clear		; prepare for bar
	iny
	sty adcnt
;	jsr action	; start bar

	lda #1		; set value for bar progression
aq1	sta value
	jsr capture	; capture image

	jsr prepacq	; clear 3 lines
	ldx #<restlst	; restore old requester
	ldy #>restlst
	jsr screen
	pla
	sta screenvek+1
	pla
	sta screenvek
	clc
	rts

; --------------------------------------------- Clear 3 Lines

prepacq	lda #17
	ldx #4
	ldy #32
	jsr setpar
	ldx #3
ea0	jsr clrline
	inc zl
	dex
	bne ea0
	rts

; --------------------------------------------- Make Digits

mkdigits	lda #32		; prepare digit buffer
	ldy #6
di1	sta numbers,y
	dey
	bpl di1
	lda #0		; hi = 0, lo in X
cnvwa	sta $62
	stx $63
	inc 1
	ldx #$90
	sec
	jsr $bc49
	jsr $bddf
	dec 1
right	ldy #6		; find tail of digits
di2	dey
	lda numbers,y
	bne di2
	dey
	ldx #2		; offset into output string
	rts

; --------------------------------------------- Input Values

evexpo	ldx #0		; Exposure
	!by $2c

; --------------------------------------------- 

evcont	ldx #1		; Contrast
	!by $2c

; --------------------------------------------- 

evblkl	ldx #2		; Black Level

setinp	stx whinput
	ldx #10		; only digits allowed
	stx iflag
sin0	lda ziff,x
	sta ibuff,x
	sta numbers,x
	dex
	bpl sin0
	lda #<ibuff
	sta vekta8
	lda #>ibuff
	sta vekta8+1
	jsr input		; Input

	lda #>nambuf	; convert to byte
	sta vekta8+1
	lda #<nambuf
	sta vekta8
	jsr gword
	tax

	ldy whinput	; and justify input digits
	bne sin1
	jmp eip1
sin1	cpy #1
	bne sin2
	jmp eip2
sin2	jmp eip3

; --------------------------------------------- Digits to Word Values
; convert digits to words, 

gword	ldy #0
	sty $14
	sty $15
	beq gw2
gw1	jsr inca8
gw2	lda (vekta8),y
	cmp #32
	beq gw1
	cmp #$3a
	bcs gw0
	sec
	sbc #$30
	sec
	sbc #$d0
	bcs gw0
	sbc #$2f
	sta $07
	lda $15
	sta temp
	cmp #$19
	bcs gw0
	lda $14
	asl
	rol temp
	asl
	rol temp
	adc $14
	sta $14
	lda temp
	adc $15
	sta $15
	asl $14
	rol $15
	lda $14
	adc $07
	sta $14
	bcc gw1
	inc $15
	bne gw1
gw0	lda $14
	rts

; --------------------------------------------- Increment VEKTA8

inca8	inc vekta8
	bne ia0
	inc vekta8+1
ia0	rts

; --------------------------------------------- Video Background

black	lda #5		; location on screen
	ldx #7
	ldy #10		; width
	jsr setpar
	stx chgcol	; x is $00 (black)
	jsr initmove	; screenaddress
	lda #6		; height
	sta ho
	jsr invert	; make visible
	ldx #4		; set color to black
	jmp fcol

; --------------------------------------------- Action
; increment gauge bar

action  dec adcnt
        bne j
        lda value
        sta adcnt
        ldy offy
        ldx offx
        lda filltab,x
        sta mess,y
        jsr messout
        dec offx
        bpl j
        inc offy
        lda #7
        sta offx
j       rts

messout ldx #<message
        ldy #>message
        jmp xtxout2

filltab !by 160,93,103,127,126,124,105,109
value   !by 1
message !scr "Acqu "
mess    !scr "...........................@"
; --------------------------------------------- Init Gauge Bar

; initialize gauge 

clear	lda #18
	ldx #5
	ldy #30
	jsr setpar
	jsr clrline
	ldx #26
	lda #32
j2	sta mess,x
	dex
	bpl j2
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts

;-------------------------------------------------------------------
; Godot Loader module fill-in routines for Connectix QuickCam
; and QuickScan 64 Version 1 interface
;
; Copyright 8-Februrary-1999 by Nate Dannenberg and Arndt Dettke
; This module is Public Domain
;-------------------------------------------------------------------

; Zeropage variables, temp storage areas, and the like.

	pointer1 		= $30
	pointer2 		= $32
	tempacc 		= $34
	tempx 		= $35
	tempy 		= $36
	tempa 		= $37
	tempb 		= $38
	temp1 		= $39
	temp2 		= $3a          ; 5 bytes
	screenaddr 	= $3f
	xfermode 		= $41
	temprows 		= $42
	tempcolumns	= $43
	columncount 	= $44
	rowcount 		= $45
	spritecount	= $46
	flag 		= $47
	nybbleflag 	= $48
	nybblestoxfer 	= $49
	imagebuffer 	= $4b
	counter 		= $4d
	portadef 		= $4f
	rastercount 	= $50
	hsize 		= $51

; Next, any variables that you will need to supply

	sprites = $2000         
		; Change this to where you will tell the VIC to
                        ; find the six sprites needed to display the
                        ; Preview Window.  Six sprites will use 384 bytes of
                        ; memory.  The memory you choose can be temporary
                        ; storage or whatever you like, as it will not be used
                        ; for any kind of permanent storage.

                        ; Sprite Layout:  A C E
                        ;                 B D F

                        ; My code will take care of rendering the data into
                        ; sprite format.  Each multicolor mode pixel will be:
                        ; %11=white, %10=light grey, %01=dark grey, %00=black.

                        ; To make %00 appear black even against the blue
                        ; background, place several solid black characters
                        ; (reversed spaces, for instance) under the sprites.

; Next, CIA addresses

	cia1timera 	= $dc04
	cia2timera 	= $dd04
	sp1 		= $dc0c
	sp2 		= $dd0c
	porta 		= $dd00
	portb 		= $dd01
	ddrporta 		= $dd02
	ddrportb 		= $dd03
	cia1int 		= $dc0d
	cia2int 		= $dd0d
	cia1cra 		= $dc0e
	cia2cra 		= $dd0e

; --------------------------------------------- Check Camera
; Enter: none.  Exit: equalflag.

checkcam	lda portadef	; Default value for Port A
	sta porta		; Storing this default Port A value pulls /PA3 high

	lda #1		; Use raster line 1
	ldx #120		; Decimal 120, # of VIC frames to wait.
loop1	cmp $d012		; And wait for it.
	bne loop1	
	dex
	bpl loop1		; Count x down (120 times = 120 frames, or two seconds)

	lda porta		; Read Port A
	and #4		; And check the PA2 line.
	beq error		; If PA2 is low, camera not present or not responding
	lda portadef	; Default Port A value
	ora #8		; Set /PA3 low now.
	sta porta

	ldx #120		; Wait 2 seconds
	lda #1
loop2	cmp $d012
	bne loop2
	dex
	bpl loop2

	lda porta		; If PA2 is high now, camera not present/not responding
	and #4
	beq error
			; otherwise, the camera is connected and responding.
			; So we reset it, initialize, and jump to the eventloop.
	rts

error	ldx #<nocamlst
	ldy #>nocamlst
	jsr screen
	jsr black
	jsr eloop
	ldx #0
	stx firstaccess
	inx
	rts

; --------------------------------------------- Reset Camera
; Enter: none.  Exit: none.

evreset	sta tempacc
	stx tempx
	sty tempy

	sei
	lda porta 	; I have to fiddle with $DD00 often to make this work!
	and #%11110011	; so we make a backup copy of it's normal contents.
	sta portadef

	lda porta 	; I have to fiddle with $DD00 often to make this work!
	and #%11110011	; so we make a backup copy of it's normal contents.
	sta portadef
	lda #64
	sta cia1cra
	sta cia2cra	; Serial ports are outputs, timers are off.
	lda #4		; timer max speed = every 4th cycle.
	sta cia2timera
	lda #0
	sta cia2timera+1
	lda #$41		; Start timers.  Timer A both CIAs = continuous
	sta cia1cra
	sta cia2cra
	lda #$7f		; Disable CIA #2 interrupt sources.
	sta cia2int
	lda #0
	sta sp1		; reset the camera (SP1 = low)
	sta sp2		; Disable nybble bus (SP2 = low)
	lda #59
	sta ddrporta
	lda portadef
	ora #$08		; set bit 3 (drives /PA3 low, PA2 = don't care)
	sta porta
	jsr Write_Mode
	jsr Reset_Cam
testreset	lda exposure
	bne exitinit

	lda #220		; Default values
	sta exposure
	lda #104
	sta contrast
	lda #120
	sta blacklevel
	lda #2
	sta autobright
	sta imagesize

exitinit	ldx firstaccess
	beq exin0
	ldx exposure	; output values to screen
	jsr eip1
	ldx contrast
	jsr eip2
	ldx blacklevel
	jsr eip3
	dec autobright
	jsr evauto
	dec imagesize
	jsr evsize

exin0	lda #1
	sta firstaccess
	lda tempacc	; Restore our registers and exit.
	ldx tempx
	ldy tempy
	clc
	cli
	rts

; --------------------------------------------- Grab Video

video	rts

; --------------------------------------------- Capture an Image
; Capture a fullsize frame.  Enter: none.  Exit: redisp

capture	sta tempacc           ; set to 1, no registers used.
	stx tempx
	sty tempy
	jsr Write_Mode
	lda #21               ; In all modes, the top and left edges are the same
	ldy #13
	jsr Send_Command      
	lda #8
	ldx #15
	jsr Send_Command
	ldx imagesize
	lda sizevals+3,x      ; # lines to transfer
	ldx #17
	jsr Send_Command
	ldx imagesize
	lda sizevals,x        ; transfers per line
	sta hsize
	ldx #19
	jsr Send_Command
	lda exposure
	ldx #11
	jsr Send_Command
	lda contrast
	ldx #25
	jsr Send_Command
	lda blacklevel
	ldx #31
	jsr Send_Command

	lda imagesize              ; Now some quick comparisons to find out how many
	bne l0                      ; nybbles we need to download.
	lda #<4000                 ; for an 80x50 frame, 4000 nybbles.
	sta nybblestoxfer
	lda #>4000
	sta nybblestoxfer+1
	lda #%00001000             ; Set 4:1 transfer mode
	sta xfermode
	bne captureit

l0	cmp #1                     ; for 160x200, 16000 nybbles.
	bne l1
	lda #<16000
	sta nybblestoxfer
	lda #>16000
	sta nybblestoxfer+1
	lda #%00000100         	; Set 2:1 transfer mode
	sta xfermode
	bne captureit

l1	lda #<64000		; Otherwise, it's 320x200, 64000 nybbles.
	sta nybblestoxfer
	lda #>64000
	sta nybblestoxfer+1
	lda #0
	sta xfermode		; Set 1:1 xfermode

captureit	lda #$40
	sta imagebuffer+1
	lda #0
	sta imagebuffer
	tay

	lda #0
l2	sta (imagebuffer),y		; and use it as a pointer to wipe it clean
	iny
	bne l2
	inc imagebuffer+1
	lda imagebuffer+1
	cmp #$bd
	bne l2

	lda #$40			; Reset back to $4000.
	sta imagebuffer+1

	jsr Download_Frame		; and grab the frame. 
	jsr Convert_Frame		; Convert the data to 4-Bit GoDot format.
	lda #255
	sta redisp		; Tell GoDot that a new frame has been received.
	jsr clear_serialbus
	lda tempacc
	ldx tempx
	ldy tempy
	sec
	rts
; --------------------------------------------- Exit Module
; Exit the module.  Enter: none.  Exit: none.

evleave	jsr clear_serialbus
	sec
	rts

; --------------------------------------------- Camera Service routines
; Beginning here are some camera service routines

Download_Frame
	lda #8
	sta flag			; Start flag low (inverted: 8=low, 0=high)
	lda xfermode
	ldx #7
	jsr Send_Command	
	jsr Read_Mode
	lda nybblestoxfer
	sta counter
	lda nybblestoxfer+1
	sta counter+1
	ldy #0
	lda imagebuffer
	sta pointer1
	lda imagebuffer+1
	sta pointer1+1
	lda hsize			; We need to track the width to make the download
	sta columncount		; routine store the data in the proper format for the
				; current image size.
nextrownybble
	lda flag			; Toggle PC_Ack line and flag
	eor #$08
	sta flag
	ora portadef		; Add default port setting

;	sta porta
;l3	lda porta			; Wait for bit 2 and bit 3 to be opposites.
;	asl 
;	and #8
;	cmp flag
;	beq l3

Get_Sample
	lda portb
	and #$0f
	eor #$08
	tax
	lda greys,x		; Convert from Quickcam palette to standard greyscale
	ldx flag			; If flag = 8, PC_ACK is low, so store high nybble.
	beq l4
	asl
	asl
	asl
	asl
	sta tempa
	jmp checkcount

l4	ora tempa
	sta (pointer1),y
	inc pointer1
	bne l5
	inc pointer1+1
l5	dec columncount
	bne checkcount

newline 	jsr action		; Gauge Bar activity
	ldy #0
	lda hsize
	sta columncount
	sec			; Alter pointer1 to point to the start of the next 160-
	lda #160			; Byte raster, by adding the difference between 160 and
	sbc hsize			; our horizontal size.
	clc
	adc pointer1
	sta pointer1
	bcc checkcount
	inc pointer1+1  

checkcount
	sec
	lda counter
	sbc #1
	sta counter		; counter = counter - 1
	lda counter+1
	sbc #0
	sta counter+1
	ora counter
	bne nextrownybble		; Keep going till counter hits 0.

	lda portadef		; Pull /PA3 high one last time (portadef does that)
	sta porta			; Store twice to force a nice long pause
	sta porta
	ora #$08			; And low again.  End of frame pulse ($08 = /PA3 low)
	sta porta
	jmp Write_Mode

; --------------------------------------------- Convert image

Convert_Frame
	lda #0
	sta pointer1		; 4-Bit QuickCam format (in 4-Bit GoDot buffer area)
	lda #$40
	sta pointer1+1
	ldy #0
	lda #25
	sta rowcount

convertrow
	lda #8
	sta rastercount
	lda #0
	sta pointer2
	lda #$20
	sta pointer2+1

convertraster
	ldx #40
	ldy #0

l6	lda (pointer1),y
	sta (pointer2),y
	iny
	cpy #4
	bne l6

	ldy #0
	clc
	lda pointer1
	adc #4
	sta pointer1
	bcc l7
	inc pointer1+1

l7	clc
	lda pointer2
	adc #32
	sta pointer2
	bcc l8
	inc pointer2+1
l8	dex
	bne l6

	sec
	lda pointer2
	sbc #<1276
	sta pointer2
	lda pointer2+1
	sbc #>1276
	sta pointer2+1
	dec rastercount
	bne convertraster

copyrow	lda #0
	tay
	sta pointer2
	lda #$20
	sta pointer2+1
	sec
	lda pointer1
	sbc #<1280
	sta pointer1
	lda pointer1+1
	sbc #>1280
	sta pointer1+1
	
l9	lda (pointer2),y
	sta (pointer1),y
	inc pointer1
	bne m0
	inc pointer1+1
	lda pointer1+1
	cmp #$bd
	beq endconv

m0	inc pointer2
	bne l9
	inc pointer2+1
	lda pointer2+1
	cmp #$25
	bne l9

m1	dec rowcount		; ???? What does this mean?
	bne convertrow

endconv	rts

; --------------------------------------------- Send Command to Camera
; Enter with .X = command, .A = data

Send_Command
	rts			; not active now

	sta tempa
	jsr Write_Mode		; Set port for 8 bit write mode
	stx portb			; write command to port B
	lda portadef		; drive /PA3 (PCAck) high
	sta porta

m2	lda porta
	and #$04			; Watch for PA2 (CamRdy1) to go high
	beq m2
	lda portadef		; Drive /PA3 low
	ora #$08
	sta porta
m3	lda porta
	and #$04			; Wait for PA2 to go low
	bne m3
	lda tempa
	sta portb			; write parameter to port B
	lda portadef
	sta porta			; Drive /PA3 high  
m4	lda porta
	and #$04			; Wait for PA2 to go high
	beq m4
	lda portadef		; Drive /PA3 low
	ora #$08
	sta porta
m5	lda porta
	and #$04			; ...and wait for PA2 to respond
	bne m5
	rts

; --------------------------------------------- Get Parameters

Get_Parameter
	rts			; not active now

	jsr Write_Mode
	stx portb
	lda portadef
	sta porta
m6	lda porta
	and #4
	beq m6
	jsr Read_Mode
	lda portadef
	ora #8
	sta porta
m7	lda porta
	and #4
	bne m7
	lda portadef
	sta porta
m8	lda porta
	and #4
	beq m8
	lda portb
	asl
	asl
	asl
	asl
	sta tempa
	lda portadef
	ora #8
	sta porta
m9	lda porta
	and #4
	bne m9
	lda portb
	and #$0f
	ora tempa	
	sta tempa
	jsr Write_Mode
	lda tempa
	rts

; --------------------------------------------- Write Mode

Write_Mode
	rts			; not active now

	lda #255
	sta ddrportb		; ...and all of PB0-7 as outputs
	lda #0
	sta sp2			; Set Nybble bus mode off
	rts

; --------------------------------------------- Read Mode

Read_Mode
	rts			; not active now

	lda #0
	sta ddrportb		; Set all lines as inputs (PB7..4 = don't care)
	lda #255
	sta sp2			; Set Nybble bus on
	rts

; --------------------------------------------- Reset Camera

Reset_Cam	sta tempacc
	stx tempx

	ldx #$7f	; low for one bit time, high for 7 bit times (%01111111)
	stx sp1

	ldx #120	; wait for 120 refreshes to give the CIA time to get
			; the entire byte shifted out.
n1	cpx $d012
	bne n1
	dex
	bne n1

	lda tempacc
	ldx tempx
	rts

; --------------------------------------------- Clear Bus

clear_serialbus
	jsr 65412
	jsr 65511
	jsr 65451
	jsr 65454
	dec $01
	rts

; --------------------------------------------- Variables

exposure		!by 0
contrast		!by 0
blacklevel	!by 0
autobright	!by 0
imagesize		!by 0
firstaccess	!by 0

greys		!by 0,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1

; --------------------------------------------- Finish

modend	!eof
