;.petscii
!src "..\godotlib.lib"
;.ob "mgetspr,p,w"

*= $c000

; ------------------------------------------------------------ 
;
; mod.GetSpriteSet
; Module to retrieve a sprite set from a Diashow picture
;
;   1.00, 15.08.07: first release
;
; ------------------------------------------ 

; ------------------------------------------ Equates

	byte	= $30
	cnt	= $31
	vr	= $32
	cr	= $33
	gbyte	= $34
	merk	= $35
	counter	= $36	; /$37
	cnttemp	= $38
	offx	= $39
	offy	= $3a
	enable	= $3b
	linenr	= $3c
	src	= $3d	; /$3e
	spry	= $3f
	sprx	= $40	; /$41
	dst	= $42	; /$43
	xsize	= $44
	ysize	= $45
	xdouble	= $46
	ydouble	= $47
	yflag	= $48
	sprmul0	= $49	; multi color 0      (%01)
	sprcol	= $4a	; sprites' own color (%10)
	sprmul1	= $4b	; multi color 1      (%11)
	mulconv	= $4c	; conversion buffer, up to $4f
	status	= $90
	clickon	= $1588

	sprdata	= $2000
	vicdata	= $2a00
	sprbuf	= $c600
	vicbuf	= sprbuf+512
	mulcol0	= vicbuf+37
	mulcol1	= vicbuf+38
	owncols	= vicbuf+39

; ------------------------------------------ 

	   jmp start
	   !by $20
	   !by $00,$00
	   !wo modend
	   !by $00,$00
	   !pet "Get sprites     "
	   !pet "0.99"
	   !pet "15.08.07"
	   !pet "A. Dettke       "
;
; ------------------------------------------ Start

start	ldx used
	beq getsprset
	inc used
	lda gd_modswitch
	pha
	ldx #0
	stx ls_flen
	ldx #1
	jsr gd_xload
	pla
	sta gd_modswitch
	sec
	rts


; ------------------------------------------ Main

jerror	jmp error

; ------------------------------------------

getsprset	lda #17
	sta cntwert
	sta cnttemp
	dec used
	ldx #<sprdata	; destination: $2000 (graphics display screen)
	ldy #>sprdata
	stx sc_texttab
	sty sc_texttab+1

	lda ls_nambuf	; check if name is Koala name
	cmp #$c1
	bne stt1
	lda #$81
stt1	sta ls_nambuf
	ldx ls_temp
	cpx #$10
	beq stt2
	lda #$2a
	sta ls_nambuf,x
	inc ls_temp

stt2	lda #$00
	sta counter
	sta counter+1
	jsr gd_xopen
	jsr onebyte
	bne jerror
	tax 
	beq rl0
	jsr over
	bne jerror
rl0	jsr onebyte
	bne jerror
	jsr gd_clrms
	ldx #27		; "Expand"
	jsr tcopy

read	lda #$30		; 2608 Bytes einlesen (und dabei entpacken)
	sta ls_vekta8
	lda #$0a
	sta ls_vekta8+1
rloop	jsr unpack
	sta (sc_texttab),y
	txa 
	and #$bf
	bne jerror
	jsr action
	ldy #$00
	inc sc_texttab
	bne rl1
	inc sc_texttab+1
rl1	lda ls_vekta8
	bne rl2
	dec ls_vekta8+1
rl2	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	bne rloop
rl3	jsr gd_xclose		; finish 
	jsr movedata
	jsr erase
	jsr gd_spron
	jsr convert
rl4	sec 
	rts 

; ------------------------------------------ Convert Sprites

convert	lda vicbuf+21	; Sprite enable byte
	beq cv1		; no active sprites (Message?)
	sta enable
	ldx #9		; "Convert"
	jsr tcopy
	lda #1
	sta cntwert
	sta cnttemp
	ldx #7		; sprite counter
cv0	stx merk
	lda #20
	sta cnt
	asl enable
	bcc nospr
	jsr where		; compute addresses in source and destination
	ldx merk
	lda vicbuf+28
	and mask,x
	bne multisp
	jsr hsprite
	beq nospr		; unconditional branch
multisp	jsr msprite
nospr	jsr action
	dec cnt
	bne nospr
	ldx merk
	dex
	bpl cv0
cv1	rts

; ------------------------------------------ Convert Hires

hsprite	jsr setxpand
	lda owncols,x
	jsr getdnib
	sta sprcol

sk03	lda ysize		; counts scanlines of a sprite (21 or 42)
	sta cr
	ldx #0		; counts to 63 (all bytes of a sprite)

sk5	lda #8		; counts 1 4Bit block down
	sta byte
sk8	ldy #0		; counts to 96 or 192 (3 4bit tiles across)
sk3	lda xdouble
	beq sk71
	jsr hexp
	bcs sk72
sk71	jsr hnox
sk72	inc src 		; next byte in sprite
	bne sk73
	inc src+1
sk73	cpy xsize		; 3 tiles finished? 
	bne sk3
	lda ydouble
	beq sk74
	lda yflag
	beq sk74
	sec
	lda src
	sbc #3
	sta src
	bcs sk74
	dec src+1
sk74	clc		; yes, next scanline
	lda dst
	adc #4
	sta dst
	bcc sk75
	inc dst+1
sk75	lda ydouble
	beq sk4
	dec yflag
	bpl sk4
	lda #1
	sta yflag
sk4	dec cr
	beq sk9
	dec byte		; all scanlines in block?
	bne sk8
	clc		; yes, dst plus $500
	lda dst
	adc #$e0
	sta dst
	lda dst+1
	adc #$04
	sta dst+1
sk6 	lda cr		; all scanlines in sprite? 
	bne sk5
sk9	rts		; yes, finished
	

; ------------------------------------------ Convert Multi

msprite	jsr setxpand
	lda owncols,x	; result at yflag,x (%00 not used)
	jsr getdnib
	sta sprcol
	lda mulcol0
	jsr getdnib
	sta sprmul0
	lda mulcol1
	jsr getdnib
	sta sprmul1

mk03	lda ysize
	sta cr
	ldx #0

mk5	lda #8
	sta byte
mk8	ldy #0
mk3	lda xdouble
	beq mk71
	jsr mexp
	beq mk72
mk71	jsr mnox
mk72	inc src
	bne mk73
	inc src+1
mk73	cpy xsize
	bne mk3
	lda ydouble
	beq mk74
	lda yflag
	beq mk74
	sec
	lda src
	sbc #3
	sta src
	bcs mk74
	dec src+1
mk74	clc
	lda dst
	adc #4
	sta dst
	bcc mk75
	inc dst+1
mk75	lda ydouble
	beq mk4
	dec yflag
	bpl mk4
	lda #1
	sta yflag
mk4	dec cr
	beq mk9
	dec byte
	bne mk8
	clc
	lda dst
	adc #$e0
	sta dst
	lda dst+1
	adc #$04
	sta dst+1
mk6	lda cr
	bne mk5
mk9	rts

; ------------------------------------------ Render Hires no expand

hnox	lda #$80		; get bitmask
	sta gbyte
hnox0	lda (src,x)
	pha
	and gbyte
	beq sk0
	lda sprcol
	and #$f0
	ora (dst),y
	sta (dst),y
sk0	lsr gbyte
	pla
	and gbyte
	beq sk1
	lda sprcol
	and #$0f
	ora (dst),y
	sta (dst),y
sk1	iny
	lsr gbyte
	bcc hnox0
	tya
	clc
	adc #28 		; y+32 = next tile in 4Bit
	tay
	rts

; ------------------------------------------ Render Hires expanded

hexp	lda #$80		; get bitmask
	sta gbyte
hexp0	lda (src,x)
	pha
	and gbyte
	beq sk10
	lda sprcol
	sta (dst),y
sk10	lsr gbyte
	iny
	pla
	and gbyte
	beq sk11
	lda sprcol
	sta (dst),y
sk11	iny
	lda gbyte
	and #$11
	beq sk12
	tya
	clc
	adc #28 		; y+32 = next tile in 4Bit
	tay
sk12	lsr gbyte
	bcc hexp0
	rts

; ------------------------------------------ Render Multi no expand

mnox	jsr mulindex
mnx1	pha
	lda mulconv,x
	and #3
	tax
	beq mnx2
	lda yflag,x
	sta (dst),y
mnx2	pla
	tax
	inx
	txa
	iny
	cpx #4
	bne mnx1
	ldx #0
	tya
	clc
	adc #28 		; y+32 = next tile in 4Bit
	tay
	rts

; ------------------------------------------ Render Multi expanded

mexp	jsr mulindex
mex1	pha
	lda mulconv,x
	and #3
	tax
	beq mex2
	lda yflag,x
	sta (dst),y
	iny
	sta (dst),y
	dey
mex2	pla
	tax
	inx
	iny
	iny
	txa
	lsr gbyte
	bcc mex1
	tya
	clc
	adc #28 		; y+32 = next tile in 4Bit
	tay
	txa
	lsr gbyte
	bcc mex1
	ldx #0
	rts

; ------------------------------------------ Isolate Multi color indexes

mulindex	lda #$32
	sta gbyte
	lda (src,x)
mex0	asl
	rol mulconv,x
	asl
	rol mulconv,x
	inx
	cpx #4
	bne mex0
	tax
	rts

; ------------------------------------------ Set expansion variables

setxpand	ldy #1
	lda #$60
	sta xsize
	lda #21
	sta ysize
	lda vicbuf+29
	and mask,x
	sta xdouble
	beq sk01
	asl xsize
sk01	lda vicbuf+23
	and mask,x
	sta ydouble
	beq sk02
	asl ysize
	tya
sk02	sta yflag
	rts

; ------------------------------------------ Move Data to buffers

movedata	lda #5
	sta cntwert
	sta cnttemp
	ldx #36		; "Move"
	jsr tcopy

	ldx #2
	lda #>sprbuf
	sta ls_vekta8+1
	lda #>sprdata
	sta sc_texttab+1
	jsr move

	ldx #1
	lda #>vicbuf
	sta ls_vekta8+1
	lda #>vicdata
	sta sc_texttab+1
	jsr move

	rts

; ------------------------------------------ Clear Graphics

erase	lda do_erase		; Erase only if Shift, Commodore or CTRL pressed
	beq skp2
	lda #200
	sta cntwert
	sta cnttemp
	ldx #18		; "Erase"
	jsr tcopy

	tya
	sta ls_vekta8
	sta sc_texttab
	lda #$7d
	sta ls_vekta8+1
	lda #$40
	sta sc_texttab+1
loop	lda #0
	tay
	sta (sc_texttab),y
	jsr action
	inc sc_texttab
	bne skp0
	inc sc_texttab+1
skp0	lda ls_vekta8
	bne skp1
	dec ls_vekta8+1
skp1	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	bne loop
skp2	rts

; ------------------------------------------ Service Routines

onebyte	jsr basin
	ldx status
	rts 

; ------------------------------------------

error	jsr gd_xclose
	jsr gd_xmess
	jsr gd_spron
	clc 
	rts 

; ------------------------------------------

getdnib	and #$0f
	tax
	lda dnib,x
	rts

; ------------------------------------------

unpack	lda counter		; packbits: 	$cf (+ amount of nullbytes),
	ora counter+1		; 	$bf counter byte
	bne getit2		; if indicator followed by $00, write indictator
	inc counter
	jsr basin
	cmp #$cf
	bne up0
	sta gbyte
	jsr basin
	beq getit2
	sta counter
	inc counter
	bne up2
	inc counter+1
up2	lda #$00
	beq getit1
up0	cmp #$bf
	bne getit1
	sta gbyte
	jsr basin
	beq getit2
	sta counter
	inc counter
	bne up3
	inc counter+1
up3	jsr basin
getit1	sta gbyte
getit2	lda counter
	bne up4
	dec counter+1
up4	dec counter
	lda gbyte
	ldx status
	rts 

; ------------------------------------------

over	lda #$13		; skip autorun header if present (275 bytes)
	sta ls_vekta8
	lda #$01
	sta ls_vekta8+1
ov0	jsr basin
	lda status
	bne leave
	lda ls_vekta8
	bne ov1
	dec ls_vekta8+1
ov1	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	bne ov0
leave	rts 

; ----------------------------------------- Where in bitmap?

where	ldy #0		; set source/dest base addresses
	sty src
	sty dst
	lda #>sprbuf
	sta src+1
	lda #$40
	sta dst+1
	txa		; compute sprite address
	beq wh1
	tay
	lda src
wh2	clc		; sprbuf + .y * 64
	adc #64
	bcc wh3
	inc src+1
wh3	dey
	bne wh2
	sta src

wh1	lda vicbuf+16	; x-Hi of screen address
	sta sprx+1
	txa
	asl
	tax
	lda vicbuf,x		; x-Lo
	sec
	sbc #24		; minus 24
	sta sprx
	bcs wh0
	dec sprx+1

wh0	inx
	lda vicbuf,x		; y
	sec
	sbc #50		; minus 50
	sta linenr

	pha		; compute 4Bit address
	lsr		; down
	lsr
	lsr
	beq wh4
	tax
wh5	clc
	lda dst+1
	adc #5
	sta dst+1
	dex
	bne wh5
wh4	pla
	and #$07
	tax
	clc
	lda dst
	adc line8,x
;	sta dst		; ---

	lda sprx		; and right
	pha
	lsr sprx+1
	ror sprx
	lsr sprx
	lsr sprx
	beq wh6
	ldx sprx
wh8	clc
	lda dst
	adc #32
	sta dst
	bcc wh7
	inc dst+1
wh7	dex
	bne wh8
wh6	pla
	and #7
	lsr
	clc
	adc dst
;	sta dst		; ---
	rts

; ----------------------------------------- Move pages

move	stx merk		; move data, x-reg	: number of pages
	lda #$00		;	   sc_texttab: source
	tay 		;	   ls_vekta8 : destination 
	sta ls_vekta8
	sta sc_texttab
ml1	lda (sc_texttab),y
	sta (ls_vekta8),y
	tya 
	pha
	jsr action
	pla 
	tay 
	iny 
	bne ml1
	inc ls_vekta8+1
	inc sc_texttab+1
	dec merk
	bne ml1
	rts 

; ------------------------------------------ Action bar

messout	ldx #<message
	ldy #>message
	jmp gd_xtxout2

tcopy	ldy #$00
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx 
	iny 
	bne tc0

action	dec cnttemp
	bne ld4
	lda cntwert
	sta cnttemp
	ldy offy
	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #$07
	sta offx
ld4	rts 

clrmess	ldx #20		; clear message buffer
	lda #$20
cl0	sta mess,x
	dex 
	bpl cl0
	ldy #$00
	ldx #$07
	sty offy
	stx offx
	rts 

; ------------------------------------------ Tables and Variables

filltab	!by $a0,$5d,$67,$7f,$7e,$7c,$69,$6d

cntwert	!by 200

used	!by $ff
do_erase	!by $00

txt	!scr " Colors @"	; 0
	!scr " Convert@"	; 9
	!scr " Erase  @"	; 18
	!scr " Expand @"	; 27
	!scr " Move   @"	; 36

message	!scr " Expand    "
mess	!by $20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	!by $20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	!by $20,$00

dnib	!by $00,$ff,$44,$cc,$55,$aa,$11,$dd,$66,$22
	!by $99,$33,$77,$ee,$88,$bb

mask	!by $01,$02,$04,$08,$10,$20,$40,$80

line8	!by $00,$04,$08,$0c
	!by $10,$14,$18,$1c

modend	!eof
