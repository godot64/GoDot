
	!src "..\godotlib.lib"
	*= $c000
	!ct pet

; --------------------------------------
;
;     mod.MoveClip
;       Modifier zum Kopieren, Verschieben oder Tauschen von Clips
;       innerhalb des 4Bit-Bildes
;     von Martin Burggraf (1.01: $AD)
;
;     1.00, 04.10.95, first release (still buggy)
;     1.01, 08.01.18, re-coded for convenience, bugfixes
;                     first fully functional version
;     1.02, 09.01.18, no need to input again and again anymore
;
; --------------------------------------
;
;      Changed zeropage addresses to an area which does not affect
;      any C64 functionality (to $30++); coded a new positioning
;      routine which would deliver correct results; minor bugfixing.
;
; -------------------------------------- 


; -------------------------------------- Equates

	pport		= $01
	merk		= $07
	int		= $14
	wordlo		= $15

	save		= $30
	zl		= $31
	sp		= $32
	zwisp		= $35	; /$36
	source		= $37	; /$38
	destin		= $39	; /$3a
	flag		= $3b
	flag2		= $3c
	colo		= $3d
	quellzeile	= $3e
	quellspalte	= $3f
	zaehlersp		= $42
	zaehlerzl		= $43

; -------------------------------------- Header

	jmp start

	!by $20,$00,$01 
	!wo modend
	!wo 0
	!tx "Move the Clip ! "
	!tx "1.02"
	!tx "09.01.18"
	!tx "M.Burggraf/$AD  "

; -------------------------------------- Main

start	lda gd_modswitch
	sta save
	jsr init
	ldx #<liste
	ldy #>liste
	jsr gd_screen
	jsr gd_eloop

	lda save
	sta gd_modswitch
	lda #15
	sta gr_redisp
cancel	sec 
	rts 

; -------------------------------------- Event: Copy

befcopy	lda #2
	sta flag2
	bne cliptrans

; -------------------------------------- Event: Move

befmove	lda #1
	sta flag2
	bne cliptrans

; -------------------------------------- Event: Exchange

befchang	lda #0
	sta flag2

; -------------------------------------- Perform Transport

cliptrans	jsr initad

	lda #$ff		; Höhenzähler vor 0 setzen
	sta zaehlerzl

lp1	lda #0		; Spaltenzähler auf Start (0)
	sta zaehlersp
	jsr countad	; Move activity bar
	jsr countad
	inc zaehlerzl	; Höhe abzählen
	lda zaehlerzl	; height complete?
	cmp zhoehe
	bcc lp0		; no, transport

	jsr clearad	; finished
	sec 
	rts

; -------------------------------------- 

lp0	jsr blocktrans	; no, transport
	inc zaehlersp
	lda zaehlersp	; width complete?
	cmp zbreite
	bcc lp0
	bcs lp1

; -------------------------------------- Transport one 4Bit-Tile

blocktrans
	jsr calcblock	; calculate source and target addresses

	sei 
	lda pport
	pha 
	lda #1
	sta pport
	ldy #31		; transport 32 bytes (1 tile)
-	jsr transsub
	dey 
	bpl -
	pla 
	sta pport
	cli 

	rts 

; -------------------------------------- Calculate Addresses

calcblock	clc
	lda quellzeile	; neue Zeile
	adc zaehlerzl
	sta zl
	lda quellspalte	; neue Spalte
	adc zaehlersp
	sta sp
	lda #0		; first: source
	sta flag
	jsr clcblksub	; perform calculation

	clc
	lda zzeile
	adc zaehlerzl
	sta zl
	lda zspalte
	adc zaehlersp
	sta sp
	inc flag		; then: destination

; -------------------------------------- Perform Calculation

clcblksub	lda #$40		; rows from start of 4Bit ($4000+zl*$500)
	sta zwisp+1
	ldx zl
	beq ++

-	clc
	adc #$05
	dec zl
	bne -
	sta zwisp+1

++	lda sp
	beq ++

	lda #0		; columns row+sp*32
-	clc
	adc #32
	bcc +
	inc zwisp+1
+	dec sp
	bne -

++	ldx zwisp+1	; Hi addr (lo in .a)
	ldy flag
	bne +
	stx source+1	; set source
	sta source
	rts

+	stx destin+1	; set destination
	sta destin
	rts 

; -------------------------------------- Distributor

transsub	ldx flag2
	beq change
	dex 
	beq move

; -------------------------------------- Perform Copy

copy	lda (source),y	; just source to destination
	sta (destin),y
	rts 

; -------------------------------------- Perform Move

move	lda (source),y	; source to destination, then
	sta (destin),y
	lda colo		; fill source
	sta (source),y
	rts

; -------------------------------------- Perform Exchange

change	lda (source),y	; save source
	pha 
	lda (destin),y	; destination to source
	sta (source),y
	pla 
	sta (destin),y	; re-get source and set destination
	rts 

; -------------------------------------- Event: Input Row of Target

row	jsr yinput
	sta zzeile
	clc
	adc zhoehe
	cmp #26
	bcc +
	lda #0
	sta zzeile

+	lda zzeile
	jsr getzif	; convert to digits
	stx zzltx		; in Screenlist schreiben
	sta zzltx+1
	ldy #0
	beq out2

; -------------------------------------- Event: Input Column of Target

col	jsr yinput
	sta zspalte
	clc
	adc zbreite
	cmp #41
	bcc +
	lda #0
	sta zspalte

+	lda zspalte
	jsr getzif	; convert to digits
	stx zsptx		; in Screenlist schreiben
	sta zsptx+1
	ldy #2

out2	jsr settab
	jsr gettab
	ldy #6		; and display
	jmp gd_xtxout1

; -------------------------------------- Leading Zero to Space

getzif	jsr gd_xcnvdez	; Byte nach Ziffern
	cpx #$30
	bne +
	ldx #$20
+	rts 

; -------------------------------------- Input Target

yinput	ldy #10		; valid chars (digits and space, 11 bytes)
	sty sc_iflag
-	lda zln,y
	sta sy_global,y
	dey 
	bpl -

	lda #<sy_global	; perform Input (result at ls_nambuf)
	ldx #>sy_global
	sta ls_vekta8
	stx ls_vekta8+1
	jsr gd_xinput

	lda #>ls_nambuf	; set vector to ls_nambuf
	sta ls_vekta8+1
	lda #<ls_nambuf
	sta ls_vekta8
	sta sc_iflag
	ldy ls_flen
	sta ls_vekta8,y

; -------------------------------------- Convert Digits to Word (Byte in INT)

gword	ldy #0
	sty int
	sty int+1
	beq +

-	jsr inca8
+	lda (ls_vekta8),y
	cmp #$20
	beq -

	cmp #$3a
	bcs +
	sec 
	sbc #$30
	sec 
	sbc #$d0
	bcs +
	sbc #$2f
	sta merk
	lda int+1
	sta ls_temp
	cmp #$19
	bcs +
	lda int
	asl
	rol ls_temp
	asl
	rol ls_temp
	adc int
	sta int
	lda ls_temp
	adc int+1
	sta int+1
	asl int
	rol int+1
	lda int
	adc merk
	sta int
	bcc -
	inc int+1
	bne -
+	lda int
	rts

; -------------------------------------- 

inca8	inc ls_vekta8
	bne +
	inc ls_vekta8+1
+	rts 

; -------------------------------------- Initialize Position

init	lda #0
	ldx #22
-	sta zl,x
	dex 
	bpl -
	ldx sc_lastclpzl	; ### 1.01 (set to *last*)
	ldy sc_lastclpsp
	stx quellzeile
	sty quellspalte
	lda sc_lastclpbr
	sta zbreite
	lda sc_lastclpho
	sta zhoehe
	rts 

; ------------------------------------------------ Display Clip values

tabigad	!by <(zielzl),>(zielzl)
	!by <(zielsp),>(zielsp)

settab	lda #<(tabigad)
	sta sc_texttab
	lda #>(tabigad)
	sta sc_texttab+1
	rts

gettab	lda (sc_texttab),y
	sta sc_screentab
	iny
	lda (sc_texttab),y
	sta sc_screentab+1
	iny
	sty sc_merk
	stx sc_merk+1
	lda #$00
	tax
	tay
gt0	jsr gd_setpos
	cpx #$04
	bne gt0
	jsr gd_trim
	jmp gd_initmove

; -------------------------------------- Initialize Activity Bar

initad	ldy #63
	lda #0
-	sta $3fc0,y
	dey 
	bpl -
	sty $3fc0
	sty $3fc1
	sty $3fc2
	lda sc_hilite
	sta $d029
	sta $d02a
	lda $d01d
	ora #$0c
	sta $d01d
	lda $d010
	ora #$0c
	sta $d010
	lda #$08
	sta $d004
	lda #$20
	sta $d006
	lda #$92
	sta $d005
	sta $d007
	sty $07fa
	sty $07fb
	lda $d015
	ora #$0c
	sta $d015
	rts 

; -------------------------------------- Switch Activity Bar off

clearad	lda $d015
	and #$f3
	sta $d015
	lda $d010
	and #$f3
	sta $d010
	rts 

; -------------------------------------- Perform Activity

countad	inc $d005
	inc $d007
	lda $d005
	cmp #$ba
	bmi +
	lda #$92
	sta $d005
	sta $d007
+	rts 

; -------------------------------------- Data

zln	!tx " 0123456789"

zzeile	!by 0
zspalte	!by 0
zbreite	!by 0
zhoehe	!by 0

; -------------------------------------- Screenlist

liste	!by 0,6,13,16,13,$91
	!wo 0
	!scr "MoveClip@"
zielzl	!by 10,17,4,3,$e0
	!wo row 
zzltx	!scr " 0@"
zielsp	!by 10,24,4,3,$e0
	!wo col 
zsptx	!scr " 0@"
	!by 13,13,8,3,$c8 
	!wo befmove
	!scr "Move@"
	!by 13,21,8,3,$cf 
	!wo befcopy
	!scr " Copy@"
	!by 16,13,8,3,$c7 
	!wo befchang
	!scr "XChnge@"
	!by 16,21,8,3,$cd
	!wo cancel
	!scr " Exit@"
	!by $c0,8,14,12
	!scr "Destination:@"
	!by $c0,10,13,3 
	!scr "Row@"
	!by $c0,10,20,3 
	!scr "Col@"
	!by $80 

; -------------------------------------- 

modend	!eof
