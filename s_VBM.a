
!src "..\godotlib.lib"
*= $c000

; ----------------------------------------- 
;
; svr.VBM
; Saver for Craig Bruce's ACE VBM
;
; 1.00: 04.09.95, first release
; 1.01: 20.10.95, changed address of BUF to $c900
;       01.08.17, some minor changes when converting
;                 source to ACME
;
; ----------------------------------------- 

; ---------------------------------------- Equates

	data		= 31

	src		= $30	; /$31
	src0		= $32	; /$33
	hold		= $34
	lcnt8		= $35
	lcnt		= $36
	dbl		= $37
	vertcnt		= $38
	bcnt1		= $39
	byte		= $3a
	offy		= $3b
	offx		= $3c
	adcnt		= $3d
	bitcnt		= $3e


	oszi3		= $d40e
	wave		= $d412
	filter		= $d418
	rausch		= $d41b

	buf		= $c900

; ---------------------------------------- Header

header	jmp start
	!by $40
	!by 0
	!by 1
	!wo modend
	!wo 0
	!pet "ACE-VBM v2 CB   "
	!pet "1.01"
	!pet "20.10.95"
	!pet "A.Dettke/W.Kling"

; ----------------------------------------- Main

start	ldx gr_nr		; Input?
	dex 
	bne st0
	jmp initinp	; yes

; ----------------------------------------- Save VBM

st0	jsr gd_sproff	; Maus aus
	lda gd_modswitch
	pha 
	lda ls_flen	; Filename vorhanden?
	beq st1		; nein, Ende

	sta wflen
	lda #1
	sta adcnt
	jsr wopen
	bne st2
	jsr getname
	ldx #12
	jsr ckout
	jsr gd_clrms
	ldx #0
	jsr tcopy

	jsr write		; VBM speichern

st2	jsr clrch		; Abschluss
	lda #12
	jsr close
	jsr err9
	bne st1
	jsr setname

st1	pla 
	sta gd_modswitch
	jsr gd_spron	; Maus an
	sec 
	rts 


; --------------------------- 
; --------------------------- Input Routines

!src "..\input.inc"

; --------------------------- 
; --------------------------- 

; ----------------------------------------- Open File

pw	!pet "w,p,"
drinit	!pet "i0"
wflen	!by 0

wopen	jsr inull
	bne err8
	ldy wflen
	ldx #3		; add ",p,w"
wo1	lda pw,x
	sta ls_nambuf,y
	iny 
	dex 
	bpl wo1
	sty wflen
	lda #12
	tay 
	ldx ls_drive
	jsr filpar
	lda wflen
	ldx #<(ls_nambuf)
	ldy #>(ls_nambuf)
	jsr filnam
	jsr copen
	jmp err9

inull	ldx #<(drinit)
	ldy #>(drinit)
	lda #2
	jsr gd_sendcom
err9	jsr gd_xmess
	lda ls_err2
	and #15
err8	sec 
	rts 

; ----------------------------------------- Message Handler

messout	ldx #<(message)
	ldy #>(message)
	jmp gd_xtxout2

tcopy	ldy #0
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx 
	iny 
	bne tc0

action	dec adcnt
	bne ld4
	lda cntwert
	sta adcnt
	ldy offy
	cpy #22
	bne act0
	jsr clrmess
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	rts 

clrmess	ldx #25
	lda #32
cl0	sta mess,x
	dex 
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts 

filltab	!by 160,93,103,127,126,124,105,109

cntwert	!by 1

txt	!scr " VBM  @"

message	!fill 6,32
mess	!fill 26,32
	!by 0

; ----------------------------------------- Image Information Handler

getname	ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx 
	cpx #16
	bcc si0
si1	rts 

setname	lda #0
	ldx #<(ls_picname)
	ldy #>(ls_picname)
si3	stx sc_texttab
	sty sc_texttab+1
	tax 
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx 
	iny 
	bne si4
si5	rts 

nbuf	!fill 16,32
	!by 0

; ----------------------------------------- VBM Header

head	!by $42,$4d,$cb,$02,$02,$80,$01,$90
	;   "bmK", $cb for "Craig Bruce"
	; Type 2
	; 640x400

; ----------------------------------------- Save Image

write	lda gr_dither
	tax 
	lda dlo,x
	sta dmode
	lda dhi,x
	sta dmode+1
	lda #$80
	sta filter
	sta oszi3
	sta oszi3+1
	lda #0
	sta wave
	lda #$81
	sta wave

	ldy #0
vv0	lda head,y
	jsr bsout
	iny 
	cpy #8
	bne vv0

vbmloop	lda #<($4000)
	ldx #>($4000)
	sta src0
	sta src
	stx src0+1
	stx src+1
	lda #0
	sta dbl
	sta vertcnt

	lda #25		; 25 Blockzeilen
	sta lcnt8
lnloop8	lda #0
	sta lcnt

lnloop	jsr action	; Activity

ads0	ldx #0		; 1 Doppelrasterlinie
zloop	lda #2
	sta bcnt1

byloop	lda #$c0		; Bitmaske %11000000
	sta bitcnt
	lda #0
	sta byte
btloop	ldy #0		; linkes Pixel
	lda (src),y
	pha 
	lsr 
	lsr 
	lsr 
	lsr 
	tay 
	lda gr_btab,y	; Balancing
	jsr makebyte	; rastern
	lsr bitcnt
	lsr bitcnt
	pla 
	and #$0f		; rechtes Pixel
	tay 
	lda gr_btab,y	; Balancing
	jsr makebyte	; rastern

	inc src
	bne s3
	inc src+1
s3	lsr bitcnt
	lsr bitcnt
	bcc btloop

	sta buf,x		; 8 Pixel 4Bit zu 2 Byte Hires
	inx 
	dec bcnt1
	bne byloop	; nächste Kachel

	lda src
	clc 
	adc #28
	sta src
	bcc s4
	inc src+1
s4	cpx #80		; 640 Pixel breit?
	bne zloop		; nein, weiter

	jsr moveline	; gerasterte Zeile speichern

	ldx vertcnt	; 8 Rasterlinien?
	inx 
	cpx #8
	bne s41
	ldx #0
s41	stx vertcnt
	lda dbl		; Zeile verdoppeln
	eor #$ff
	sta dbl
	beq newline	; beim zweiten Mal: Sprung
	lda src0		; sonst: gleiche Zeile noch mal
	sta src
	lda src0+1
	sta src+1
	bne ads0

newline	lda src0		; nächste Rasterlinie
	clc 
	adc #4
	sta src0
	sta src
	bcc s5
	inc src0+1
s5	lda src0+1
	sta src+1
	inc lcnt
	lda #8
	cmp lcnt		; bis 8 durch
	beq s51
	jmp lnloop

s51	lda src0		; nächste Blockzeile
	clc 
	adc #<(1248)
	sta src0
	sta src
	lda src0+1
	adc #>(1248)
	sta src0+1
	sta src+1
	dec lcnt8		; bis 25 durch (400 Pixel Höhe)
	beq done
	jmp lnloop8

done	rts 

; ----------------------------------------- Verteiler fürs Rastern

makebyte	jmp (dmode)

dmode	!by 0,0

; ----------------------------------------- Rastern

dithoff	cmp #8
	bpl do0
	lda #0
	!by $2c
do0	lda bitcnt
	ora byte
	sta byte
	rts 

dithrst	ldy vertcnt
	ora offs,y
	tay 
	lda gr_orderedpat,y
	and bitcnt
	ora byte
	sta byte
	rts 

dithpat	asl 
	asl 
	asl 
	ora vertcnt
	tay 
	lda gr_pattern,y
	and bitcnt
	ora byte
	sta byte
	rts 

dithnoi	beq dn0
	cmp #15
	beq dn1
	ldy #0
	sta hold
	lda rausch
	and #$0f
	cmp hold
	bcs dn3
	ldy #$aa
dn3	lda rausch
	and #$0f
	cmp hold
	tya 
	bcs dn2
	ora #$55
dn2	!by $2c
dn1	lda #$ff
	and bitcnt
dn0	ora byte
	sta byte
	rts 

dithrnd	cmp #8
	beq dr0
	bcs dr1
	bcc dr2
dr0	lda rausch
	!by $2c
dr1	lda bitcnt
	and bitcnt
	!by $2c
dr2	lda #0
	ora byte
	sta byte
	rts 

; ----------------------------------------- Zeile speichern

moveline	ldy #0
mll	lda buf,y
	eor #$ff		; revert the pixels
	jsr bsout
	iny 
	cpy #80
	bne mll
	rts 

; ----------------------------------------- Data

offs	!by $00,$10,$20,$30
	!by $00,$10,$20,$30

dlo	!by <(dithoff)
	!by <(dithrst)
	!by <(dithpat)
	!by <(dithnoi)
	!by <(dithrnd)

dhi	!by >(dithoff)
	!by >(dithrst)
	!by >(dithpat)
	!by >(dithnoi)
	!by >(dithrnd)

; ----------------------------------------- Main

modend	!eof
