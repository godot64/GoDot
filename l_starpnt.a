
!src "..\godotlib.lib"
*= $c000

; ------------------------------------------------------------ 
;
; ldr.StarPntr.128
; Lädt Bilder des Programms Starpainter (64/128) und
; resamplet sie zu Hires oder Multicolor
;
; 0.99, 02.06.92, first release
; 1.00, 24.07.17, bugfixes:
;                 Hires sampling: Pixel vertauscht
;                 File-Ende nicht erkannt
;
; ------------------------------------------------------------ 

; ----------------------------------------- Equates

	dst		= $30	; /$31
	dst0		= $32	; /$33
	bcnt1		= $34
	gbyte		= $35
	bbuf		= $36
	adcnt		= $37
	buf16		= $38	; /$39
	lcnt8		= $3a
	lcnt		= $3b
	bcnt		= $3c
	resmode		= $3d	; /$3e
	xmrk		= $3f
	rlines		= $40	; /$41

	offy		= ls_adrmisc
	offx		= offy+1

	buf		= sy_bigbuffer
	b0		= buf
	b1		= b0+80

	z01		= $c500
	z02		= z01+80
	z03		= z02+80
	z04		= z03+80
	z05		= z04+80
	z06		= z05+80
	z07		= z06+80
	z08		= z07+80
	z09		= z08+80
	z10		= z09+80
	z11		= z10+80
	z12		= z11+80
	z13		= z12+80
	z14		= z13+80
	z15		= z14+80
	z16		= z15+80

; ----------------------------------------- Header

header	jmp start
	!by $80
	!by 4
	!by 0
	!wo modend
	!wo 0
	!pet "StPntr128.Resmpl"
	!pet "1.00"
	!pet "02.06.92"
	!pet "W.Kling/A.Dettke"

; ----------------------------------------- Main

start	ldx used		; Requester-Management
	bmi requ
	beq cancel
	cpx #3
	bcs cancel

; ----------------------------------------- Process
; (After selecting File from File Requester
;  and clicking "Load")

	dec used		; used to 0 or 1 (besser zu handhaben)
	jsr getname	; Filenamen speichern
	jsr gd_xopen	; Datei öffnen
	jsr gd_clrms	; Statuszeile ansteuern

	ldx #0		; Message ausgeben, Gauge vorbereiten
	jsr tcopy
	iny
	sty adcnt
	lda #13
	sta cntwert

	jsr initstp	; Lader initialisieren
	jsr initbuf	; Puffer vorbereiten

dl3	jsr getplane	; Bild einlesen und resamplen

	ldx used		; Hires oder Multi?
	bne dl2
	jsr setmodeh	; Image Info entsprechend setzen
	bmi +
dl2	jsr setmodem
+	jsr setinfo

; ----------------------------------------- Abschluss bei Fehler

err	jsr gd_xclose	; Datei schließen
	jsr gd_spron	; Mauszeiger an
	jsr gd_xmess	; Floppymeldung
	bcc cn2

; ----------------------------------------- Abschluss

cancel	lda #$ff		; Requester-Management
	sta used
cn2	sec 		; Leave Modifier
	rts 

; ----------------------------------------- Ausgabe des Requesters

requ	inc used		; used=0
	ldx #<(stplst)
	ldy #>(stplst)
	jsr gd_xmloop
	jmp start

; ----------------------------------------- Event: Resample to Multi

logrey	inc used		; used=2
	ldx #<(reslo)
	lda #>(reslo)
	bne +

; ----------------------------------------- Event: Resample to Grey

higrey	ldx #<(reshi)
	lda #>(reshi)
+	stx resmode
	sta resmode+1
	inc used		; used=1
	ldx #1
	jsr gd_xload	; File-Requester, Wait
	lda #3		; used=3 (Abbruch-Kriterium)
	sta used
	sec 
	rts 

; ----------------------------------- Gauge Bar Activity

adinc 	dec adcnt
	bne ld4
	lda cntwert
	sta adcnt
	ldy offy
	cpy #22
	bne act0
	jsr clrmess
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4 	rts

; ----------------------------------------- Message Handling

messout	ldx #<(message)	; ausgeben
	ldy #>(message)
	jmp gd_xtxout2

tcopy	ldy #0		; anwählen (Offset in .x)
tc0	lda stpt,x
	beq clrmess
	sta message,y
	inx 
	iny 
	bne tc0

clrmess	ldx #24		; Message initialisieren
	lda #32
cl0	sta mess,x
	dex 
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts 

filltab	!by 160,93,103,127,126,124,105,109

stpt	!scr " StPtr @"
message	!fill 7,32
mess	!fill 25,32
	!by 0

; ----------------------------------------- 

err1	!scr "ERROR: Not a valid StPtr Format.@"

; ----------------------------------------- Variablen und Tabellen

hbytes	!by 0
hbytes2	!by 0
lbytes	!by 0
vbytes	!by 0
used	!by $ff
cntwert	!by 200

px	!by $ff,$bb,$bb,$77,$bb,$77,$77,$33
	!by $bb,$77,$77,$33,$77,$33,$33,$00

dpx	!by $ff,$dd,$bb,$99,$77,$66,$44,$22,$00

; ----------------------------------------- Lader initialisieren

setc64	ldx #40		; Standard-Screen
	lda #25
setdims	stx hbytes
	sta vbytes
	rts

initstp	ldx #32		; Voreinstellen auf 32x21 (256x168 Pixel)
	lda #21
	jsr setdims
	lda #0
	sta rlines+1

	jsr basin		; 1. Byte: Breite?
	bne +
	jsr setc64	; nein, sondern Startadresse lo ($00)
	bne nogr0

+	cmp #81		; Breite größer als 80?
	bcs faila		; dann Formatfehler
	sta hbytes	; sonst: Breite setzen

nogr0	jsr basin		; 2. Byte: Höhe
	beq faila		; $00? dann Formatfehler

	cmp #$e0		; StP-Bitmap?
	bne +
-	jsr setc64
	bne nogr2 
+	cmp #$20		; Standard-Bitmap?
	beq - 		; ja, setzen
	cmp #$b5		; StP File?
	bcc nogr2		; ja
	!by $2c
nogr1	lda #50		; sonst Höhe setzen (begrenzt auf 50)
	sta vbytes
nogr2	sta rlines	; mal 4 (Rasterzeilen, halbe Höhe)
	asl rlines
	rol rlines+1
	asl rlines
	rol rlines+1

	lda hbytes	; Breite+1
	lsr 
	adc #0
	asl 
	sta lbytes	; merken
	rts 

; ----------------------------------------- Puffer

initbuf	ldy hbytes	; Breite als Offset
	lda #0
	sta buf,y		; $00 in Puffer
	tya 
	clc 
	adc #80		; 80 addieren
	tay 
	lda #0
	sta buf,y		; dort ebenfalls $00
	sty hbytes2	; Offset2 merken
	rts 

; ----------------------------------------- Fehler in den Daten

faila	ldx #0
	ldy #0
fl0	lda err1,x	; Datei nicht StarPainter
	sta message,y
	inx 
	iny 
	cpy #32
	bne fl0

	inc used		; used auf Ausgangswert zurück
	jsr err		; Datei schließen
	jsr gd_clrms	; Fehlermeldung ausgeben
	jsr messout

	pla 		; zurück in den File-Requester
	pla 
	rts 

; ----------------------------------------- Resample Image

getplane	lda #<($4000)	; Startadresse $4000
	ldx #>($4000)
	sta dst0
	sta dst
	stx dst0+1
	stx dst+1

lnloop8	jsr fillbuf	; Puffer mit Daten aus Bild füllen

	lda #8
	sta lcnt
lnloop	jsr readline	; Daten umlagern

	ldx #0
zloop	lda #2
	sta bcnt1
byloop	lda #2
	sta bcnt
btloop	jsr makebyte	; Resamplen
	ldy #0		; Ergebnis in 4Bit ablegen
	sta (dst),y
	inc dst		; vorrücken
	bne s3
	inc dst+1
s3	dec bcnt		; zweimal
	bne btloop
	inx 		; dann Pufferindex erhöhen
	dec bcnt1		; auch zweimal
	bne byloop	; sind 4 Bytes (eine 4Bit-Kachelzeile)

	stx xmrk
	jsr adinc		; activity
	ldx xmrk

	lda dst		; nächste Kachel
	clc 
	adc #28
	sta dst
	bcc s4
	inc dst+1
s4	cpx lbytes	; Breite erreicht?
	bne zloop		; nein, Loop

	lda rlines	; alle Rasterzeilen durch?
	bne +
	dec rlines+1
+	dec rlines
	lda rlines
	ora rlines+1
	beq finished	; ja, Ende
	
	lda dst0		; nächste Rasterzeile
	clc 
	adc #4
	sta dst0
	sta dst
	bcc s5
	inc dst0+1
s5	lda dst0+1
	sta dst+1
	dec lcnt		; 8 Rasterzeilen (eine Kachelzeile)
	bne lnloop

	lda dst0		; dann neue Kachelzeile ansteuern
	clc 
	adc #<(1248)
	sta dst0
	sta dst
	lda dst0+1
	adc #>(1248)
	sta dst0+1
	sta dst+1
	cmp #>buf		; (Sicherheitsabfrage)
	bcs finished
	jmp lnloop8	; Loop
finished	rts 

; ----------------------------------------- 

readline	ldy #0		; in Arbeitspuffer umlagern
rll	lda (buf16),y
	sta buf,y
	iny 
	cpy hbytes
	bne rll

	ldy #80		; zweite Hälfte
rll2	lda (buf16),y
	sta buf,y
	iny 
	cpy hbytes2
	bne rll2

	lda buf16		; Zeiger hinter den Puffer setzen
	clc 
	adc #160
	sta buf16
	bcc rls
	inc buf16+1
rls	rts 

; ----------------------------------------- 

fillbuf	ldy #0		; Kachel 1 holen
spbl1	jsr basin		; 8 Bytes holen
	sta z01,y		; und verteilen
	jsr basin
	sta z02,y
	jsr basin
	sta z03,y
	jsr basin
	sta z04,y
	jsr basin
	sta z05,y
	jsr basin
	sta z06,y
	jsr basin
	sta z07,y
	jsr basin
	sta z08,y
	iny 
	cpy hbytes	; bis Breite erreicht
	bne spbl1

	ldy #0		; Kachel 2 holen
spbl2	jsr basin		; wieder 8 Bytes verteilen
	sta z09,y
	jsr basin
	sta z10,y
	jsr basin
	sta z11,y
	jsr basin
	sta z12,y
	jsr basin
	sta z13,y
	jsr basin
	sta z14,y
	jsr basin
	sta z15,y
	jsr basin
	sta z16,y
	iny 
	cpy hbytes
	bne spbl2

	lda #<(z01)	; Zeiger auf Puffer setzen
	ldy #>(z01)
	sta buf16
	sty buf16+1
	rts

; ----------------------------------------- 

makebyte	jmp (resmode)

; ----------------------------------------- Resample to Hires

reshi	asl b0,x		; Index basteln
	rol 
	asl b0,x
	rol 
	asl b1,x
	rol 
	asl b1,x
	rol 
	and #$0f
	tay 
	lda px,y		; neuen Grauwert abholen
	and #$f0
	sta bbuf		; merken
	asl b0,x		; noch mal
	rol 
	asl b0,x
	rol 
	asl b1,x
	rol 
	asl b1,x
	rol 
	and #$0f
	tay 
	lda px,y
	and #$0f		; beide Werte verknüpfen
	ora bbuf		; und zurückliefern
	rts 

; ----------------------------------------- Resample to Multi

reslo	lda #0
	sta bbuf
	ldy #4
bbloop	asl b0,x
	bcc bb0
	inc bbuf
bb0	asl b1,x
	bcc bb1
	inc bbuf
bb1	dey 
	bne bbloop
	ldy bbuf
	lda dpx,y
	rts 

; ----------------------------------------- 

stplst	!by 0
	!by 4,11,18,16,$81,0,0
	!scr " StarPainter128 @"
	!by 9,11,18,3,$ca,<(higrey),>(higrey)
	!scr "Hires@"
	!by 12,11,18,3,$ca,<(logrey),>(logrey)
	!scr "Multi@"
	!by 15,11,18,3,$ca,<(cn2),>(cn2)
	!scr "Cancel@"
	!by $c0,6,14,11
	!scr "Resample to@"
	!by $80

; ----------------------------------------- 

getname	ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx 
	cpx #16
	bcc si0
si1	rts 

setmodeh	ldx #6
	!by $2c
setmodem	ldx #13
	ldy #6
-	lda htext,x
	sta rsmode,y
	dex
	dey
	bpl -
	rts

getdatac	ldx #4
	!by $2c
getdatag	ldx #9
	ldy #4
sinfo0	lda dtextc,x
	sta datatype,y
	dex 
	dey 
	bpl sinfo0
	rts 

setinfo	jsr getdatac
	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata

setname	lda #0
	ldx #<(ls_picname)
	ldy #>(ls_picname)
	bne si3
setloader	lda #17
	ldx #<(ls_iloader)
	ldy #>(ls_iloader)
	bne si3
setmode	lda #25
	ldx #<(ls_imode)
	ldy #>(ls_imode)
	bne si3
setdata	lda #33
	ldx #<(ls_idrive)
	ldy #>(ls_idrive)
si3	stx sc_texttab
	sty sc_texttab+1
	tax 
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx 
	iny 
	bne si4
si5	rts 

; ----------------------------------------- 

nbuf	!fill 16,32
	!by 0
	!scr "StrPntr@"
rsmode	!fill 7,32
	!by 0
datatype	!scr "Color@"
htext	!scr "320x200"
mtext	!scr "160x200"
dtextc	!scr "Color"
dtextg	!scr "Grey "

; ----------------------------------------- 

modend	!eof

; ----------------------------------------- 


