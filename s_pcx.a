
	*= $c000
	!src "..\godotlib.lib"
	!ct pet

; ----------------------------------- 
;
; svr.PCX
;   Saves 16 color/gray images
;   1Bit, 4 planes
;
; 1.00, 11.02.94, first release
; 1.01, 15.11.17, added: automatic suffix if necessary
;
; ----------------------------------- 

; ----------------------------------- Equates

	dst		= $30
	dst0		= $32
	cnt		= $34
	dbl		= $36
	vertcnt		= $37
	byte		= $39
	bitcnt		= $3a
	bcnt1		= $3b
	src		= $3c
	adcnt		= $3e

	offx		= ls_adrmisc
	offy		= offx+1

	cred		= gr_rgb
	cgrn		= cred+16
	cblu		= cgrn+16

	src0		= $f7
	hold		= $f9
	lcnt8		= $fa
	lcnt		= $fb
	bcnt		= $fc

	destbuf		= $ca00
	buf		= $cd00

; ----------------------------------- Header

header	jmp start
	!by $40
	!by 0
	!by 1
	!wo modend
	!wo 0
	!tx "PCX gr/co320x200"
	!tx "1.01"
	!tx "15.11.17"
	!tx "A.Dettke/W.Kling"

; ----------------------------------- Selector

start	ldx gr_nr		; Call for Input? (.x=1)
	dex 
	bne st01
	jmp initinp

; ----------------------------------- Main

st01	ldx used
	bmi requ
	cpx #3
	bcs canc

st0	jsr gd_sproff	; mouse off
	lda gd_modswitch
	pha
	lda ls_flen
	beq st1

	sta wflen
	jsr addpcx	; add ".pcx" to name (length plus 4)
	lda #1
	sta adcnt

	jsr wopen
	bne st2

	jsr getname
	ldx #12
	jsr ckout

	jsr gd_clrms	; focus on status bar
	ldx #0
	jsr tcopy
	jsr write

st2	jsr clrch
	lda #12
	jsr close
	jsr err9
	bne st1
	jsr setname

st1	pla 
	sta gd_modswitch
	jsr gd_spron	; mouse on

canc	lda #$ff
	sta used

; ----------------------------------- Event: Cancel Save

cn2	sec 
	rts 

; ----------------------------------- Requester

requ	inc used
	ldx #<(pcxlst)
	ldy #>(pcxlst)
	jsr gd_xmloop
	jmp st01

; --------------------------- 
; --------------------------- Input Routines

!src "..\input.inc"

; --------------------------- 
; --------------------------- 

pw	!tx "w,p,"
drinit	!tx "i0"
wflen	!by 0
pcxtx	!pet "xcp."
pcxtxs	!scr "xcp."

wopen	jsr inull
	bne err8
	ldy wflen
	ldx #3
wo1	lda pw,x
	sta ls_nambuf,y
	iny 
	dex 
	bpl wo1
	sty wflen
	lda #12
	tay 
	ldx ls_drive
	jsr filpar
	lda wflen
	ldx #<(ls_nambuf)
	ldy #>(ls_nambuf)
	jsr filnam
	jsr copen
	jmp err9

inull	ldx #<(drinit)
	ldy #>(drinit)
	lda #2
	jsr gd_sendcom

err9	jsr gd_xmess	; Show Floppy Message (.x=0) 
	lda ls_err2
	and #15
	beq err8
	stx sc_keyprs	; if error:
-	lda sc_keyprs	; wait for click (so you can read message)
	beq -
err8	sec 
	rts 

; ----------------------------------------- Add ".pcx" to filename

addpcx	pha		; Länge merken		#--- 1.01 ab hier
	tay
	dey
	ldx #0
ag4	lda ls_nambuf,y	; endet auf ".pcx"?
	cmp pcxtx,x
	bne ag2		; nein
	dey
	inx
	cpx #4
	bcc ag4
	pla		; ja, fertig
	rts
	
ag2	pla
	tay		; Name länger als 12 Zeichen?
	cpy #13
	bcs ag0		; ja, behandeln

ag5	ldx #3		; nein, ".pcx" anhängen
ag1	lda pcxtx,x
ag3	sta ls_nambuf,y
	lda pcxtxs,x	; auch für Image Info
	sta ls_lastname,y
	iny
	dex
	bpl ag1
	sty wflen		; neue Länge merken, fertig
	sty ls_flen
	rts

ag0	dey		; auf 12 verkürzen
	cpy #12
	bne ag0
	beq ag5		; unbed. Sprung		#--- 1.01 bis hier

; ----------------------------------- Message Handler

messout	ldx #<(message)
	ldy #>(message)
	jmp gd_xtxout2

tcopy	ldy #0
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx 
	iny 
	bne tc0

action	dec adcnt
	bne ld4
	lda cntwert
	sta adcnt
	ldy offy
	cpy #25		; catch Gauge Overflow
	bne act0
	jsr clrmess
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	rts 

clrmess	ldx #25
	lda #32
cl0	sta mess,x
	dex 
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts 

filltab	!by 160,93,103,127,126,124,105,109

cntwert	!by 1

txt	!scr " PCX  @"

message	!fill 6,32
mess	!scr ".........................."
	!by 0

; ----------------------------------- 

getname	ldx #0
si0	lda ls_lastname,x	; retrieve filename
	beq si1
	sta nbuf,x
	inx 
	cpx #16
	bcc si0
si1	rts 

setname	lda #0
	ldx #<(ls_picname)	; publish filename to GoDot
	ldy #>(ls_picname)
si3	stx sc_texttab
	sty sc_texttab+1
	tax 
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx 
	iny 
	bne si4
si5	rts 

nbuf	!fill 16,32	; filename buffer
	!by 0

; ----------------------------------- Write Image to Disk

write	jsr wrheader
	jsr pcx
	sec 
	rts 

; ----------------------------------------- Render Image to Disk

pcx	lda #<($4000)
	ldx #>($4000)
	sta src0
	sta src
	stx src0+1
	stx src+1

	lda #25		; 25 Blockzeilen
	sta lcnt8

lnloop8	lda #0
	sta lcnt

blloop	ldx #0		; 40*4 (160) Mal (eine Rasterlinie)

lnloop	ldy #0		; 8 Combis holen (4 Byte)

btloop	lda (src),y	; 2 Combis (=Index in RGB)
	sta buf,x		; puffern
	inx 
	iny 
	cpy #4		; 4 Mal 
	bne btloop

	clc 		; nächste Kachel
	lda src
	adc #32
	sta src
	bcc s3
	inc src+1
s3	cpx #160		; alle?
	bne lnloop

	jsr writeloop	; ja, auf Disk damit

newline	lda src0		; nächste Rasterzeile
	clc 
	adc #4
	sta src0
	sta src
	bcc s5
	inc src0+1
s5	lda src0+1
	sta src+1
	jsr action
	inc lcnt
	lda lcnt
	cmp #8
	bne blloop

s51	lda src0		; nächste Blockzeile
	clc 
	adc #<(1248)
	sta src0
	sta src
	lda src0+1
	adc #>(1248)
	sta src0+1
	sta src+1
	dec lcnt8
	bne lnloop8

done	rts 

; ----------------------------------------- 

writeloop	lda #<(buf)	; eine Rasterlinie auf Disk
	ldy #>(buf)
	sta dst0
	sty dst0+1
	ldy #0
	sty cnt
	sty byte
wloop	lda (dst0),y
	jsr pack
	iny 
	cpy #160
	bne wloop
	lda byte		; flush
	eor #$ff

; ----------------------------------------- PCX RLE compress

pack	cmp byte
	beq incr

writeit	pha 
	lda cnt
	beq wl1
	cmp #63
	bcs wl0
	cmp #4
	bcs wl0
	pha 
	lda byte
	cmp #$c0
	pla 
	bcc wl2
wl0	ora #$c0
	jsr bsout
	lda #1
	sta cnt
wl2	lda byte
	jsr bsout
	dec cnt
	bne wl2

wl1	pla 
	sta byte
incr	lda cnt
	cmp #63
	beq high
	inc cnt
	rts 

high	lda (dst0),y
	jmp writeit

; ----------------------------------------- 

wrheader	ldx #0
wrh0	lda pcxheader,x
	jsr bsout
	inx 
	cpx #128
	bne wrh0
	rts 

; ----------------------------------------- 

pcxheader	!by 10,5,1,4,0,0,0,0
	!by <(319),>(319),<(199),>(199)
	!by 0,0,0,0			; dpi-x, dpi-y
pcxpal	!by $00,$00,$00,$11,$11,$11
	!by $22,$22,$22,$33,$33,$33
	!by $44,$44,$44,$55,$55,$55
	!by $66,$66,$66,$77,$77,$77
	!by $88,$88,$88,$99,$99,$99
	!by $aa,$aa,$aa,$bb,$bb,$bb
	!by $cc,$cc,$cc,$dd,$dd,$dd
	!by $ee,$ee,$ee,$ff,$ff,$ff
	!by 0,1,160,0,1,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0

; ----------------------------------------- Event: Color

sevcol	lda #2
	sta used

	ldx #15
gg0	lda cred,x
	tay 
	lda dnib,y
	ldy cpref,x
	sta red,y
	lda cgrn,x
	tay 
	lda dnib,y
	ldy cpref,x
	sta grn,y
	lda cblu,x
	tay 
	lda dnib,y
	ldy cpref,x
	sta blu,y
	dex 
	bpl gg0

	ldx #0
	ldy #0
gg1	lda red,x
	sta pcxpal,y
	iny 
	lda grn,x
	sta pcxpal,y
	iny 
	lda blu,x
	sta pcxpal,y
	iny 
	inx 
	cpx #16
	bne gg1

	sec 
	rts 

; ----------------------------------------- Event: Gray Scale

sevgrey	lda #1
	sta used

	ldx #0
	ldy #0
gg2	lda dnib,x
	sta pcxpal,y
	iny 
	sta pcxpal,y
	iny 
	sta pcxpal,y
	iny 
	inx 
	cpx #16
	bne gg2

	sec 
	rts 

; ----------------------------------------- 

used	!by $ff

dnib	!by $00,$11,$22,$33,$44,$55,$66,$77
	!by $88,$99,$aa,$bb,$cc,$dd,$ee,$ff
cpref	!by 11,7,3,0,15,2,9,6,5,12,4,8,1,10,14,13

red	!wo $00,$00,$00,$00,$00,$00,$00,$00
grn	!wo $00,$00,$00,$00,$00,$00,$00,$00
blu	!wo $00,$00,$00,$00,$00,$00,$00,$00

; ----------------------------------------- 

pcxlst	!by 0
	!by 4,11,18,16,$81,0,0
	!scr "Save PCX-EGA@"
	!by 9,11,18,3,$ca,<(sevgrey),>(sevgrey)
	!scr "Gray Scale@"
	!by 12,11,18,3,$ca,<(sevcol),>(sevcol)
	!scr "Color@"
	!by 15,11,18,3,$ca,<(cn2),>(cn2)
	!scr "Cancel Save@"
	!by $c0,6,14,11
	!scr "Select Mode@"
	!by $80

; ----------------------------------------- 

modend	!eof 
