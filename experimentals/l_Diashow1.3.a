
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ------------------------------------------------ 
;
;  ldr.Diashow1.3
;  Loader for Diashow v1.3 Images
;
; ------------------------------------------------ 
;
;  These images don't seem to have anything to do with 
;  the original Diashow Maker, so this is just a simple
;  GoDot port to gain completeness. Additionally, we have
;  no image material to check functionality.
;
; ------------------------------------------------ 
;
;    1.00: 22.08.96, first release
;    1.01: 11.10.18, optimized code
;
; ------------------------------------------------ 

; ------------------------------------------------ Equates

	cnt2		= $30
	cnt3		= $31
	adcnt		= $32
	merk		= $33
	vvram		= $34
	vram		= $36
	cram		= $38
	byte		= $39
	counter		= $3a
	cnt		= $3c
	gbyte		= $3d

	offx		= ls_adrmisc
	offy		= offx+1

	vrbuf		= $c600
	crbuf		= vrbuf+$0400
	col0		= vrbuf+$0800
	backgr		= sy_4bit+$1f41
	fvrbuf		= sy_4bit+$2000
	bmbuf		= $a000

; ------------------------------------------------ 

	jmp start
	!by $80
	!wo 0
	!wo modend
	!wo 0
	!tx "Diashow1.3Loader"
	!tx "1.01"
	!tx "11.10.18"
	!tx "W.Kling/A.Dettke"
;
; ------------------------------------------------ 

jerror	jmp error

; ------------------------------------------------ 

start	lda #64
	sta cntwert
	ldx sc_vekt20	; start at sy_4bit
	ldy sc_vekt20+1
	stx sc_texttab
	sty sc_texttab+1

	lda ls_nambuf	; process Kola name
	cmp #$c1
	bne stt1
	lda #$81
stt1	sta ls_nambuf
	ldx ls_temp
	cpx #16
	beq stt2
	lda #$2a
	sta ls_nambuf,x
	inc ls_temp

stt2	lda #0		; reset compress counter
	sta counter
	sta counter+1

 	jsr gd_xopen	; open file
	jsr onebyte	; check first byte
	bne jerror
	tax 
	beq jerror
	stx cnt3		; store

rl0	jsr onebyte	; check second byte
	bne jerror
	sta cnt2		; store compress indicator

	jsr getname	; store filename
	jsr gd_clrms	; clear message bar

; ------------------------------------------------ 

	ldx #27
	jsr tcopy
	iny
	sty adcnt
	dey

read	lda #<10240	; count 10240 ($2800) bytes
	sta ls_vekta8	; (maximum length)
	lda #>10240
	sta ls_vekta8+1

rloop	jsr unpack	; get bytes
	sta (sc_texttab),y	; store to 4bit
	txa 
	and #$bf		; EOF?
	bne jerror
	jsr action	; no, activity
	ldy #0

	inc sc_texttab	; advance
	bne rl1
	inc sc_texttab+1

rl1	jsr count
	bne rloop

	jsr gd_xclose	; then close file
;
; ------------------------------------------------ 

	lda #63		; move data
	sta cntwert
	ldx #36
	jsr tcopy
	iny
	sty adcnt
;
mloop	ldx #8		; transfer colors (8 pages)
	lda #>vrbuf	; target
	sta ls_vekta8+1
	lda #>fvrbuf
	sta sc_texttab+1
	jsr move

	lda backgr	; get background color
	and #15
	sta col0
	sta gr_fbkcol
;
	ldx #32		; transfer bitmap (32 pages)
	lda #>bmbuf	; target
	sta ls_vekta8+1
	lda #>sy_4bit
	sta sc_texttab+1
	jsr move
;
; ------------------------------------------------ 

cols0	lda backgr+1	; check mode
	and #$10
	bne cols

	jsr conhir	; hires
	jsr hires
	jmp sk11
;
; ------------------------------------------------ 

cols	ldx #6		; multi
cls0	lda mtext,x
	sta modetx,x
	dex 
	bpl cls0

	lda #50
	sta cntwert
	ldx #0
	jsr tcopy
	iny
	sty adcnt
;
cols2	lda #<8000	; count 8000 bytes 
	sta ls_vekta8
	lda #>8000
	sta ls_vekta8+1

	lda #0		; convert image data
	tay 
	sta cram		; use cram-pointer for all
	sta sc_texttab
	lda #>bmbuf
	sta cram+1
	asl 		; target: sy_4bit
	sta sc_texttab+1
;
loop	lda (cram),y	; convert bitmap
	sta byte
	jsr action
	ldy #0

	ldx #4
bloop	lda #0
	asl byte
	rol 
	asl byte
	rol 
	sta (sc_texttab),y
	inc sc_texttab
	bne sk
	inc sc_texttab+1
sk	dex 
	bne bloop

	inc cram
	bne bl1
	inc cram+1

bl1	jsr count
	bne loop
;
sk2	ldy #0		; now convert colors
	lda #<vrbuf	; convert to 4bit (set start addresses)
	sta vram
	lda #>vrbuf
	sta vram+1
	lda #<crbuf
	sta cram
	lda #>crbuf
	sta cram+1
	lda #<sy_4bit
	sta sc_texttab
	lda #>sy_4bit
	sta sc_texttab+1

	lda #<1000	; count 1000
	sta ls_vekta8
	lda #>1000
	sta ls_vekta8+1

	lda #200
	sta cntwert
	ldx #9
	jsr tcopy
	iny
	sty adcnt
	dey

loop2	lda (vram),y
	pha 
	lsr 
	lsr 
	lsr 
	lsr 
	sta col0+1
	pla 
	and #$0f
	sta col0+2
	lda (cram),y
	and #$0f
	sta col0+3

	lda #32
	sta cnt
bloop1	jsr action
	ldy #0
	lda (sc_texttab),y	; get values from 4bit (0-3)
	tax
	lda col0,x	; get color values from table
	tax
	lda dnib,x	; get conversion values to GoDot palette from table
	sta (sc_texttab),y	; write back to 4bit (double nibbles)
	inc sc_texttab	; advance
	bne sk6
	inc sc_texttab+1
sk6	dec cnt		; one tile
	bne bloop1

bl3	inc vram		; next tile
	bne sk7
	inc vram+1
sk7	inc cram
	bne sk8
	inc cram+1

sk8	jsr count		; 1000 tiles
	bne loop2

; ------------------------------------------------ 

sk11	ldx #18		; reset start message
	jsr tcopy
	jsr setinfo	; set image information

sk10	jsr gd_xmess	; error message from drive
	jsr gd_spron	; sprite pointer on
	sec		; leave loader
	rts

; ------------------------------------------------ 

onebyte	jsr basin
	ldx status
	rts 
;
; ------------------------------------------------ 

error	jsr gd_xclose
	jsr sk10
	clc
	rts

; ------------------------------------------------ 

unpack	lda counter
	ora counter+1
	bne getit2

	inc counter
	jsr basin
	cmp cnt2
	bne up0

	sta gbyte
	jsr basin
	beq getit2
	sta counter
up2	lda #0
	beq getit1

up0	cmp cnt3
	bne getit1

	sta gbyte
	jsr basin
	beq getit2
	sta gbyte
	jsr basin
	sta counter
	jmp getit2

getit1	sta gbyte
getit2	lda counter
	bne up4
	dec counter+1
up4	dec counter
	lda gbyte
	ldx status
	rts 

; ------------------------------------------------ 

count 	lda ls_vekta8	; count bytes
	bne +
	dec ls_vekta8+1
+	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	rts

; ------------------------------------------------ 

messout	ldx #<message
	ldy #>message
	jmp gd_xtxout2

tcopy	ldy #0
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0

action	dec adcnt
	bne ld4
	lda cntwert
	sta adcnt
	ldy offy
	cpy #20
	bne act0
	jsr clrmess
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	rts

clrmess   ldx #20		; clear gauge bar
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0		; init counters
	ldx #7	
	sty offy
	stx offx
	rts

filltab	!by 160,93,103,127,126,124,105,109

cntwert	!by 50

txt	!scr " Colors @"
	!scr " Convert@"
	!scr " Bitmap @"
	!scr " Expand @"
	!scr " Move   @"
;
message   !fill 11,32
mess	!fill 21,32
	!by 0

; ------------------------------------------------ 

over	lda #<275		; skip 275 bytes
	sta ls_vekta8
	lda #>275
	sta ls_vekta8+1
ov0	jsr basin
	lda status
	bne leave
	jsr count
	bne ov0
leave	rts 

; ------------------------------------------------ 

move	stx merk		; transfer bytes
	lda #0
	tay 
	sta ls_vekta8
	sta sc_texttab
ml1	lda (sc_texttab),y
	sta (ls_vekta8),y
	tya 
	pha 
	jsr action
	pla 
	tay 
	iny 
	bne ml1
	inc ls_vekta8+1
	inc sc_texttab+1
	dec merk
	bne ml1
	rts 
;
; ------------------------------------------------ 

hires	lda #50
	sta cntwert
	ldx #18
	jsr tcopy
	iny
	sty adcnt

	lda #<8000	; count 8000 bytes 
	sta ls_vekta8
	lda #>8000
	sta ls_vekta8+1

	lda #0		; convert image data
	tay 
	sta vram
	sta cram
	sta sc_texttab
	sta vvram
	lda #>bmbuf
	sta cram+1
	asl 
	sta sc_texttab+1
	lda #>vrbuf
	sta vram+1
	lda #>crbuf
	sta vvram+1
;
hloop1	ldx #8
	stx merk

hilp	lda (cram),y
	sta byte
	jsr action
	ldy #0

	ldx #4
hl2	asl byte
	bcc hl3
	lda (vvram),y
	!by $2c
hl3	lda (vram),y
	and #$0f
	tay 
	lda dnib,y
	and #$f0
	sta col0
	ldy #0
	asl byte
	bcc hl4
	lda (vvram),y
	!by $2c
hl4	lda (vram),y
	and #$0f
	tay 
	lda dnib,y
	and #$0f
	ora col0
	ldy #0
	sta (sc_texttab),y

	inc sc_texttab
	bne lh5
	inc sc_texttab+1

lh5	dex 
	bne hl2

	inc cram
	bne hl6
	inc cram+1
hl6	lda ls_vekta8
	bne hl7
	dec ls_vekta8+1
hl7	dec ls_vekta8
	dec merk
	bne hilp

	inc vram
	bne hl8
	inc vram+1
hl8	inc vvram
	bne hl9
	inc vvram+1
hl9	lda ls_vekta8
	ora ls_vekta8+1
	bne hloop1

	rts 
;
; ------------------------------------------------ 

conhir	ldx modetx
	cpx #84
	beq chi0
	ldx #6
chi1	lda htext,x
	sta modetx,x
	dex 
	bpl chi1
;
chi0	lda #7
	sta cntwert
	sta adcnt
	ldx #0
	jsr tcopy
;
	ldx #4
	stx merk
	lda #0
	tay 
	sta ls_vekta8
	sta sc_texttab
	lda #>(vrbuf)
	sta ls_vekta8+1
	lda #>(crbuf)
	sta sc_texttab+1
ml2	lda (ls_vekta8),y
	sty vvram
	asl 
	rol vvram
	asl 
	rol vvram
	asl 
	rol vvram
	asl 
	rol vvram
	ora vvram
	sta (sc_texttab),y
	tya 
	pha 
	jsr action
	pla 
	tay 
	iny 
	bne ml2
	inc ls_vekta8+1
	inc sc_texttab+1
	dec merk
	bne ml2
	rts 

; ------------------------------------------------ 

dnib	!by $00,$ff,$44,$cc,$55,$aa,$11,$dd
	!by $66,$22,$99,$33,$77,$ee,$88,$bb

; ------------------------------------------------ 

getname	ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts

; ------------------------------------------------ 

setinfo	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata

setname	lda #0
	ldx #<ls_picname
	ldy #>ls_picname
	bne si3
setloader	lda #17
	ldx #<ls_iloader
	ldy #>ls_iloader
	bne si3
setmode	lda #25
	ldx #<ls_imode
	ldy #>ls_imode
	bne si3
setdata	lda #33
	ldx #<ls_idrive
	ldy #>ls_idrive
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts

nbuf	!fill 16,32
	!by 0
	!scr "Diashow@"

modetx	!scr "160x200@"
datatype	!scr "Color@"

htext	!scr "320x200@"
mtext	!scr "160x200@"

; ------------------------------------------------ 

modend	!eof
