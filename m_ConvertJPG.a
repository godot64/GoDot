
!src "..\godotlib.lib"
*	= $c000

; ------------------------------------------------------------ 
;
; mod.ConvertJPG
; Module which converts JPG images previously loaded with ldr.JPGViewer
; to 4Bit 
; REU *desperately* needed
;
;   1.00, 18.09.03: first release
;
; ------------------------------------------------------------ 

; --------------------------------------- Equates

	my	= $30
	packed	= $31
	count	= $32
	pbyte	= $33
	gbyte	= $34
	dst0	= $35
	dst	= $37
	src	= $39
	cntwert	= $3b
	adcnt	= $3e
	
	offx	= $b2
	offy	= offx+1

	status	= $90

	sprptr	= $07f8
	spr255	= $3fc0

	cram	= $ca00
	ctab	= cram
	col0b	= $c900
	col0	= $c90f
	x2	= $d004
	y2	= x2+1
	msbx	= $d010
	spren	= $d015
	sprxe	= $d01d
	sprcol2	= $d029

; --------------------------------------- Header

	jmp start
	!by $20
	!by 0
	!by 0
	!by <(modend),>(modend)
	!wo 0
	!pet "ConvertJPGto4Bit"
	!pet "1.00"
	!pet "18.09.03"
	!pet "Arndt Dettke    "

; --------------------------------------- Main

start	jsr getname
	jsr reuinfo
	lda #$80
	sta reubase+10
	jsr initad

gm0 	ldx #0
	stx count
	stx addry

; ---------------------------------------
;
;        read ifli from REU
;
; ---------------------------------------

readifli 	lda #204
	jsr setcnt
	jsr setreu
	lda #<($4000)	; destination in 4bit
	ldy #>($4000)
	jsr getvr		; get 8 video rams (image 1)

	jsr initad
	jsr setreu
	lda #<($4001)
	ldx #>($4001)
	jsr getbm		; get bitmap 1

	jsr getc0		; get bg colors 1

	lda #25
	jsr setcnt
	jsr setreu
	jsr getcr		; get color ram
	
	lda #204
	jsr setcnt
	jsr setreu
	lda #<($4002)
	ldy #>($4002)
	jsr getvr		; get 8 video rams (image 2)
	
	jsr initad
	jsr setreu
	lda #<($4003)
	ldx #>($4003)
	jsr getbm		; get bitmap 2
	
	jsr getc02	; get bg colors 2
	
	lda #25
	jsr setcnt
	jsr render	; render to 4bit
	
	lda #200
	jsr setcnt
	jsr convcol	; convert colors
	
	jmp break		; finished
	
; --------------------------------------- Video RAMs

getvr 	sta dst0
	sty dst0+1
	ldx #8
l1 	sta dst
	sty dst+1
	ldy #0
l0 	jsr unpack
	sta (dst),y
	jsr action
	lda dst
	clc
	adc #32
	sta dst
	bcc l0
	inc dst+1
	lda dst+1
	cmp #$bd
	bcc l0
;
	ldy #0
l2 	jsr unpack
	lda #0		; background color (black)
	cpx #8
	bne skip1
	sta col0+177,y
skip1 	iny
	cpy #24
	bne l2
;
	lda dst0
	clc
	adc #4
	sta dst0
	ldy dst0+1
	dex		; count 8
	bne l1
	rts

; --------------------------------------- Bitmap

getbm 	sta dst
	stx dst+1
	ldy #0
l3 	jsr unpack
	sta (dst),y
	jsr action
	lda dst
	clc
	adc #4
	sta dst
	bcc l3
	inc dst+1
	lda dst+1
	cmp #$bd
	bcc l3
	rts

; --------------------------------------- Background Color

getc0 	lda #<col0b
	ldy #>col0b
gc1 	sta ls_vekta8
	sty ls_vekta8+1
	ldy #0
l4 	lda #0 		; background color (black)
	sta (ls_vekta8),y
	iny
	cpy #192
	bne l4
	rts

; --------------------------------------- Color RAM

getcr 	lda #<(1024)
	ldy #>(1024)
gc3 	sta ls_vekta8
	sty ls_vekta8+1
	lda #<(cram)
	ldx #>(cram)
	sta dst
	stx dst+1
	ldy #0
l5 	jsr unpack
	and #$0f
	sta (dst),y
	jsr action
	inc dst
	bne gc5
	inc dst+1
gc5 	lda ls_vekta8
	bne gc4
	dec ls_vekta8+1
gc4 	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	bne l5
	rts
;
getc02 	lda #0
	tay
gc7 	sta col0+100,y
	iny
	cpy #100
	bne gc7
gc6 	rts

; --------------------------------------- Render Image

render 	lda #0
	sta linenr
	lda #<($4000)
	ldx #>($4000)
	sta dst
	stx dst+1
	lda #<(cram)
	ldx #>(cram)
	sta src
	stx src+1
l8 	lda #40
	sta blcnt
l10 	lda #8
	sta lcnt
	jsr action
l9 	ldy #0
	lda (src),y
	sta c31
	asl
	asl
	asl
	asl
	sta c30
	ldy linenr
	lda col0,y
	sta c01
	asl
	asl
	asl
	asl
	sta c00
	ldy #0
	lda (dst),y
	and #$f0
	sta c10
	lda (dst),y
	asl
	asl
	asl
	asl
	sta c20
	iny
	lda (dst),y
	sta bm1
	iny
	lda (dst),y
	lsr
	lsr
	lsr
	lsr
	sta c11
	lda (dst),y
	and #$0f
	sta c21
	iny
	lda (dst),y
	sta bm2
	jsr render1
	inc linenr
	lda dst
	clc
	adc #4
	sta dst
	bcc skip2
	inc dst+1
skip2 	dec lcnt
	bne l9
	inc src
	bne skip3
	inc src+1
skip3 	lda linenr
	sec
	sbc #8
	sta linenr
	dec blcnt
	bne l10
	lda linenr
	clc
	adc #8
	sta linenr
	lda dst+1
	cmp #$bd
	bcs rok
	jmp l8
rok 	rts

; --------------------------------------- Subroutines

; --------------------------------------- Read from REU

unpack 	lda #$91
	sta reucom
	lda sc_merk
	rts

; --------------------------------------- Set REU addresses

setreu	ldx #6
pt34	lda #0
	sta reubase+2,x
	dex
	bpl pt34
	lda #1
	sta reubase+7
	lda bank
	sta reubase+6
	ldy addry
	lda adds,y
	sta reubase+5
	lda #sc_merk
	sta reubase+2
	inc addry
	rts

; --------------------------------------- Variables

bm1 	!by 0
bm2 	!by 0
c00  	!by 0
c10 	!by 0
c20 	!by 0
c30 	!by 0
c01 	!by 0
c11 	!by 0
c21 	!by 0
c31 	!by 0

linenr 	!by 0
lcnt 	!by 0
blcnt 	!by 0
bbuf 	!by 0
addry	!by 0
bank	!by 6

adds	!by $40,$60,$04,$c0,$e0

; --------------------------------------- Sub Render

render1 	ldy #0
l6 	asl bm1
	rol
	asl bm1
	rol
	and #3
	tax
	lda c00,x
	sta bbuf
	asl bm2
	rol
	asl bm2
	rol
	and #3
	tax
	lda c01,x
	ora bbuf
	sta (dst),y
	iny
	cpy #4
	bne l6
	rts

; --------------------------------------- Color conversion

convcol 	ldy #0
l11 	tya
	and #$0f
	tax
	lda gdcols,x
	and #$0f
	sta bbuf
	tya
	lsr
	lsr
	lsr
	lsr
	tax
	lda gdcols,x
	and #$f0
	ora bbuf
	sta ctab,y
	iny
	bne l11
;
	lda #<($4000)
	ldx #>($4000)
	sta dst
	stx dst+1
	ldy #0
l12 	lda (dst),y
	tax
	lda ctab,x
	sta (dst),y
	jsr action
	lda y2
	cmp #187
	bcc l13
	sty my
	jsr initad
	ldy my
l13 	iny
	bne l12
	inc dst+1
	lda dst+1
	cmp #$bd
	bcc l12
	rts

; --------------------------------------- GoDot Colors

gdcols 	!by $00,$ff,$44,$cc
	!by $55,$aa,$11,$dd
	!by $66,$22,$99,$33
	!by $77,$ee,$88,$bb

; --------------------------------------- Close File

break 	jsr setinfo
	ldx #0
	stx reubase+10
	lda msbx
	and #3
	sta msbx
	inx
	stx gr_redisp
	jsr gd_spron
	sec
	rts

reuinfo	lda ls_ramdrive	; which RAM?
	and #15
	ldx #6		; default bank (1750)
	cmp #8		; 1700?
	bne st4		; too small
	ldx #0
	beq st7
st4	cmp #4		; 1750?
	bne st7
	ldx #2		; 1764
st7	stx bank
	rts

; --------------------------------------- Activity Display

setcnt 	sta cntwert

initad	lda cntwert
	sta adcnt
	ldy #63
	lda #0
adl0 	sta spr255,y
	dey
	bpl adl0
	sty spr255
	sty spr255+1
	sty spr255+2
	lda #15
	sta sprcol2
	sta sprcol2+1
	lda sprxe
	ora #12
	sta sprxe
	lda msbx
	ora #12
	sta msbx
	lda #8
	sta x2
	lda #32
	sta x2+2
;
	lda #146
	sta y2
	sta y2+2
	lda #$ff
	sta sprptr+2
	sta sprptr+3
	lda spren
	ora #12
	sta spren
	rts

; ------------------------------------ Move Bar

action 	dec adcnt		; Zähler abgelaufen?
	bne adskip
	inc y2		; ja, nach unten
	inc y2+2
	lda cntwert	; Zähler neu setzen
	sta adcnt
adskip 	rts

; ------------------------------------ Setinfo

getname 	ldx #0
si0 	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1 	rts

setinfo 	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata
;
setname 	lda #0
	ldx #<(ls_picname)
	ldy #>(ls_picname)
	bne si3
setloader	lda #17
	ldx #<(ls_iloader)
	ldy #>(ls_iloader)
	bne si3
setmode 	lda #25
	ldx #<(ls_imode)
	ldy #>(ls_imode)
	bne si3
setdata	lda #33
	ldx #<(ls_idrive)
	ldy #>(ls_idrive)
si3 	stx dst0
	sty dst0+1
	tax
	ldy #0
si4 	lda nbuf,x
	beq si5
	sta (dst0),y
	inx
	iny
	bne si4
si5 	rts
;
nbuf 	!fill 16,32
	!by 0
	!scr "JPEG   @"
modetx 	!scr "320x200@"
datatype 	!scr "Color@"

modend 	!eof
