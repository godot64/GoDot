
	!src "godotlib.lib"	; Label-Library einbinden
	*= $c000		; generelle Startadresse für alle Module
	!ct pet		; Texte werden in PETSCII assembliert

; -----------------------------------------
;
; svr.XXXXX
;     Template für GoDot-Saver
;
; 1.00, 06.03.18, first release
; 1.01, 03.06.18, changed: stripped Undo- and Requester-Routines
;
; -----------------------------------------

; -------------------------------------------------------------- Label-Definitionen

	pport		= $01
	offx		= ls_adrmisc
	offy		= offx+1
	; usw.

; -------------------------------------------------------------- Header

 	jmp start			; Jedes Modul beginnt hiermit

	!by $40 			; $80=Lader, $40=Saver, $20=Modifier, $10=Device
	!by 0			; Own-Requester-Flag (nur!) für Lader (4 = eigener Req)
	!by 0			; Dirty Flag (1 = dirty, 0 = clean)
	!wo modend		; Endadresse+1 des Moduls
	!wo 0			; reserviert
	!tx "xxxxx saver     "	; Beschreibung (16 Zeichen)
	!tx "1.00"		; Versionsnummer (4 Zeichen)
	!tx "06.03.18"		; Datum (8 Zeichen tt.mm.jj)
	!tx "A.Dettke        "	; Autor (16 Zeichen)

; --------------------------------------------------------------

; --------------------------------------------------------------
; -------------------------------------------------------------- These next lines mandatory for savers!
; --------------------------------------------------------------

start	ldx gr_nr		; Funktionsnummer testen:
	dex
	bne saver		; Null, dann eigentlichen Saver aufrufen

	jmp initinp	; eins, dann "Input" ausführen (Label in "input.inc")

; --------------------------------------------------------------
; --------------------------------------------------------------
; --------------------------------------------------------------


; -------------------------------------------------------------- Main

saver	; dummy		; hier z.B. Vektoren vorbesetzen, Variablen initialisieren usw.

st11	lda gd_modswitch	; Memory Management
	pha

	lda ls_flen	; Filename wurde vom Filerequester übergeben?
	beq st1		; nein (dann Cancel)

	sta wflen		; sonst: Länge sichern
	jsr addsig	; Namenskürzel anhängen (z.B. "4bt", "gif" o.ä.)
	jsr wopen		; Datei zum Schreiben öffnen
	bne st2		; wenn Diskettenfehler: Ende

	jsr getname	; Filenamen für Image Information sichern
	ldx #12		; OPEN #12, out
	jsr ckout
	jsr gd_clrms	; Fortschrittsbalken und Statusausgaben vorbereiten
	ldx #0		; Anzeigetext #1 (Offset .x=0) eintragen
	jsr tcopy
	iny
	sty adcnt		; Activity (Fortschrittsbalken) starten (.y=1)

	jsr write		; jetzt Bild speichern

st2	jsr clrch		; danach Bus freigeben
	lda #12		; Datei #12 schließen
	jsr close
	jsr err9		; Floppystatus zeigen (nur sehr kurz)
	bne st1

	jsr setname	; nur wenn fehlerfrei: Image Information aufbereiten

st1	pla		; dann Saver abwickeln: Memory Management
	sta gd_modswitch

st12	jsr gd_spron	; Mauszeiger wieder an
	sec		; Leave-Flag setzen
	rts		; fertig, Saver verlassen


; ---------------------------
; --------------------------- Input Routines (nächste Zeile auf jeden Fall an dieser Stelle erforderlich!)
; ---------------------------

!src "input.inc"

; ---------------------------
; ---------------------------
; ---------------------------


; -------------------------------------------------------------------------
; -------------------------------------------------------------- Disk Access Routines
; -------------------------------------------------------------------------

pw	!pet "w,p,"
sigtx	!pet "gis."	; Dummy-Signatur ".sig"
sigtxs	!scr "gis."
drinit	!pet "i0"
wflen	!by 0

; -------------------------------------------------------------- Filehandling

wopen	jsr inull		; Initialize
	bne err8
	ldy wflen		; ",p,w" anhängen
	ldx #3
wo1	lda pw,x
	sta ls_nambuf,y
	iny
	dex
	bpl wo1
	sty wflen
	lda #12		; OPEN 12,drive,12,"name,p,w"
	tay
	ldx ls_drive
	jsr filpar
	lda wflen
	ldx #<ls_nambuf
	ldy #>ls_nambuf
	jsr filnam
	jsr copen
	jmp err9
;
inull	ldx #<drinit	; Initialize Drive
	ldy #>drinit
	lda #2
	jsr gd_sendcom

err9	jsr gd_xmess
	lda ls_err2	; liefert Fehlernummer der Floppy
	and #15		; und zwar als Bytewert (wenn <>0, dann Fehler)
err8 	sec
	rts

; -------------------------------------------------------------------------
; -------------------------------------------------------------- Activity Handler
; -------------------------------------------------------------------------

messout	ldx #<message	; Textausgabe
	ldy #>message
	jmp gd_xtxout2
;
tcopy	ldy #0		; Informationstextauswahl (hinter Label "txt"), Offset auf Text in .x
tc0 	lda txt,x
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0

action 	dec adcnt		; Activity, nur bei 0 (Zähler abgelaufen)
	bne ld4
	lda cntwert	; dann: Reload des Zählers
	sta adcnt
	ldy offy		; Offset auf Balkenende
	cpy #25		; Ende der Ausgabezeile erreicht? (Hier den gleichen Wert wie bei clrmess einsetzen!)
	bne act0
	jsr clrmess	; ja, re-Init des Status-Bereichs
act0	ldx offx		; offx: Index auf aktuelles Zeichen für Dicke des Balkenendstücks
	lda filltab,x
	sta mess,y
	jsr messout	; ganzen Balken ausgeben
	dec offx		; Endstück nächstes Mal dicker
	bpl ld4		; bis Endstück gefüllt
	inc offy		; dann den Balken selbst verlängern
	lda #7		; nächstes Endstück wieder dünn
	sta offx
ld4 	rts

clrmess	ldx #25		; Puffer für Balken löschen
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0		; Balkenlänge 0
	ldx #7		; Dicke am Ende 0
	sty offy
	stx offx
	rts

filltab	!by 160,93,103,127,126,124,105,109	; Zeichen der Enstücke des Balkens (von hinten nach vorne)
cntwert	!by 1
txt	!scr " XXX@"	; der Text mit Offset 0, (das "@" entspricht dem Screencode $00, ist hier also Stringdelimiter)
message	!fill 6,32	; 6 Zeichen für Informationstext (Anzahl kann geändert werden, dann "mess" anpassen)
mess	!fill 26,32	; 26 Zeichen für Fortschrittsbalken, Länge von message und mess zusammen immer 32!
	!by 0		; hier Wert=26: bei Änderung "clrmess" und "action" anpassen (dort Wert minus 1)!

; -------------------------------------------------------------------------
; -------------------------------------------------------------- Image Information Handler
; -------------------------------------------------------------------------

getname	ldx #0		; aktuellen Filenamen sichern
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts
;
setname	lda #0		; Namen in Image Info eintragen
	ldx #<ls_picname
	ldy #>ls_picname
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts
;
nbuf	!fill 16,32	; Namenspuffer
	!by 0

; -------------------------------------------------------------------------
; -------------------------------------------------------------- Write File
; -------------------------------------------------------------------------

write	; dummy		; hier der eigentliche Saver

	rts		; fertig

; -------------------------------------------------------------------------
; -------------------------------------------------------------- Namen verlängern
; -------------------------------------------------------------------------

addsig	pha		; Länge merken
	tay
	dey
	ldx #0
ag4	lda ls_nambuf,y	; endet auf ".SIG"?
	cmp sigtx,x
	bne ag2		; nein
	dey
	inx
	cpx #4
	bcc ag4
	pla		; ja, fertig
	rts

ag2	pla
	tay		; Name länger als 12 Zeichen?
	cpy #13
	bcs ag0		; ja, behandeln

ag5	ldx #3		; nein, ".sig" anhängen
ag1	lda sigtx,x
ag3	sta ls_nambuf,y
	lda sigtxs,x	; auch für Image Information
	sta ls_lastname,y
	iny
	dex
	bpl ag1
	sty wflen		; neue Länge merken, fertig
	sty ls_flen
	rts

ag0	dey		; auf 12 verkürzen
	cpy #12
	bne ag0
	beq ag5		; unbed. Sprung

; -------------------------------------------------------------------------
; ----------------------------------------------------- Data
; -------------------------------------------------------------------------

adcnt	!by 0		; Zähler für activity
cntwert	!by 0		; Vorgabewert für adcnt


modend 	!eof
