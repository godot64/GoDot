
	!src "godotlib.lib"
	*= $c000
	!ct pet

; ----------------------------------------- 
;
; svr.PNG
;     PNG Saver for any GoDot images 
;     CRC32 routines inspired by John Selck
;     Adler32 routines inspired by cc65 (U. von Bassewitz)
;
; 1.00: 23.11.19 - first release
; 1.01: 25.11.19, added more palettes to save in
; 1.02: 27.11.19, now correct Colodore palette
; 1.03: 01.08.21, exchanged palettes (C64pixels - Ptoing)
; 1.04: 31.03.22, exchanged palettes (VICE - PALette_v1)
;                 changed IFLI palette, now based on PALette_v1
;
; ----------------------------------------- Header
;
 	jmp start
;
	!by $40 			; $80=Lader, $40=Saver, $20=Modifier
	!by 0			; Own Requester Flag (4 = present)
	!by 1			; Dirty Flag (1 = dirty)
	!wo modend		; Endadresse+1 des Moduls
	!wo 0			; unused
	!pet "PNG max 136 cols"	; description
cvers	!pet "1.04"		; Versionsnummer
	!pet "31.03.22"		; Datum
	!pet "A.Dettke        "	; author

; ----------------------------------------- Definitionen

	base	= 65521	; largest prime smaller than 65536

	src	= $30	; /$31
	asum2	= $32	; /$33	; Adler32
	asum1	= $34	; /$35
	crcbuf	= $36	; ..$39
	pcount	= $3a
	xcount	= $3b
	amerk	= $3c

	clpbr	= $48
	clpho	= $49
	lcnt	= $4a
	lcnt8	= $4b
	adcnt	= $4c
	xmerk	= $4d
	ymerk	= $4e
	offy	= $4f
	offx	= $50
	clpzl	= $51
	clpsp	= $52
	tilecnt	= $53

	buf0	= $2000		; crc32
	buf1	= buf0+256
	buf2	= buf1+256
	buf3	= buf2+256
	inbuf	= buf3+256
	crc32	= inbuf+256

	rahmen	= $d020

; ----------------------------------------- 

start	ldx gr_nr		; Funktionsnummer testen
	dex
	bne saver		; Null, dann "Speichern"
	jmp initinp	; eins, "Input"

; ----------------------------------------- Saver

sk12	jmp noreu

; ----------------------------------------- 

saver	lda ls_ramdrive	; REU angeschlossen?
	and #15
	cmp #9
	beq sk12		; nein, gar kein Ram
	cmp #7		; nur SuperRAM?
	beq sk12		; ja, skip Rest
	and #12
	beq sk12		; kein REU, skip Rest

st11	jsr gd_sproff	; Sprites aus
	lda gd_modswitch	; Slot retten
	pha
	lda ls_flen	; Filename übergeben?
	beq st1		; nein

	sta wflen		; sonst: retten
	jsr addpng	; Namen erweitern
	lda #1		; Counter für Activity setzen
	sta adcnt
	sta cntwert
	lda #9		; Undo-Kommando vorbereiten
	sta getundo+1

	jsr wopen		; Writefile öffnen
	bne st2		; wenn Fehler: Ende

	jsr adlerinit	; prepare zlib adler checksum
	jsr prepbufs	; prepare buffers for crc32 checksum
	sta pcount	; counter for outbytes (.a=0)
	jsr getname	; Filenamen sichern
	ldx #12		; OPEN #12, out
	jsr ckout
	jsr gd_clrms	; Anzeige initialisieren

	jsr setparams	; set RGB table (and Full values)
	ldx #0		; Text "PNG" eintragen
	jsr tcopy
	jsr write		; Bild speichern

st2	jsr clrch		; Bus freigeben
	lda #12
	jsr close
	jsr err9		; Floppystatus zeigen (kurz)
	bne st1		; wenn fehlerfrei:
	jsr setname	; Fileinfo aufbereiten

st1	pla		; Modularea wieder setzen
	sta gd_modswitch

st12	jsr gd_spron	; Sprites wieder an
	sec		; Leave-Flag
	rts		; fertig

; ----------------------------------------- 
; -------------------------- Input Routines

!src "input.inc"

; --------------------------/Input Routines
; ----------------------------------------- 

; ----------------------------------------- Disk Access

pw	!pet "w,p,"
pngtx	!pet "gnp."
pngtxs	!scr "gnp."
drinit	!pet "i0"
wflen	!by 0

filepos	!wo $1000		; Start of 4Bit data in REU

; ----------------------------------------- Filehandling

wopen	jsr inull		; Initialize
	bne err8
	ldy wflen		; ",p,w" anhängen
	ldx #3
wo1	lda pw,x
	sta ls_nambuf,y
	iny
	dex
	bpl wo1
	sty wflen
	lda #12		; OPEN 12,drive,12,"name,p,w"
	tay
	ldx ls_drive
	jsr filpar
	lda wflen
	ldx #<ls_nambuf
	ldy #>ls_nambuf
	jsr filnam
	jsr copen
	jmp err9

inull	ldx #<drinit
	ldy #>drinit
	lda #2
	jsr gd_sendcom
err9	jsr gd_xmess
	lda ls_err2
	and #15
err8 	sec
	rts

; ----------------------------------------- Activity

messout	ldx #<message	; Textausgabe
	ldy #>message
	jmp gd_xtxout2

tcopy	ldy #0		; Text zur Ausgabe puffern
tc0 	lda txt,x		; Offset in .x!
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0

action	dec adcnt		; Activity, wenn 0
	bne ld4
	lda cntwert	; dann: Reload des Zählers
	sta adcnt
	ldy offy
	cpy clrmess+1
	bne act0
	jsr clrmess
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout	; Balken ausgeben
	dec offx		; Ende nächstes Mal dicker
	bpl ld4		; bis gefüllt
	inc offy		; dann Balken länger
	lda #7		; Ende wieder dünn
	sta offx
ld4 	rts

clrmess	ldx #25		; Puffer für Balken löschen
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0		; Balkenlänge 0 
	ldx #7		; Dicke am Ende 0
	sty offy
	stx offx
	rts

filltab	!by 160,93,103,127,126,124,105,109
cntwert	!by 1
txt	!scr " PNG"
	!by 0
message	!fill 6,32
mess	!fill 26,32
	!by 0

; ----------------------------------------- Image Info

getname	ldx #0		; aktuellen Filenamen sichern
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts

setname	lda #0		; Namen in Image Info eintragen
	ldx #<ls_picname
	ldy #>ls_picname
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts

nbuf	!fill 16,32
	!by 0

; ----------------------------------------- Counter

count 	inc src		; increment src by 1
	bne cou6
	inc src+1
cou6 	lda ls_vekta8	; decrement ls_vekta8/9 by 1
	bne cou7
	dec ls_vekta8+1
cou7 	dec ls_vekta8
	lda ls_vekta8	; and check if 0 (sets .e)
	ora ls_vekta8+1
	rts

; ----------------------------------------- Convert to Binary

convert	sta sc_pos	; value times 8
	sty sc_pos+1
	clc
	asl sc_pos
	rol sc_pos+1
	asl sc_pos
	rol sc_pos+1
	asl sc_pos
	rol sc_pos+1
	ldx sc_pos	; .x: lo
	lda sc_pos+1	; .a: hi
	rts

; ----------------------------------------- Set Save PNG data parameters

setparams	lda gr_colorbase	; Which palette?
	cmp #7		; 0..6 (where 0 is GoDot)
	bcc +
	lda #0		; definitely (if gr_colorbase is corrupt)
+	asl
	tay
	lda paloffs,y	; set address
	sta src
	iny
	lda paloffs,y
	sta src+1
	ldy #51		; activate palette
-	lda (src),y
	sta plte4,y
	dey
	bpl -

	jsr setclip	; change palette, set Full

; ----------------------------------------- Set file values for width and height
; not used yet (future version may save clips)

setvals	ldy #0		; width
	lda clpbr
	ldx gr_cmode
	beq +
	lsr
+	jsr convert	; convert to binary 
	stx width4+1
	sta width4
	stx width8+1
	sta width8

	ldy #0		; height
	lda clpho
	jsr convert	; convert to binary
	stx height4+1
	sta height4
	stx height8+1
	sta height8

	rts

; ---------------------------------------- Compute Start address of Clip
; not used yet (future version may save clips)

setclip	lda #$10		; 4Bit starting from $1000 in REU
	sta filepos+1
	ldy #0
	sty filepos
	sty clpzl
	sty clpsp
	lda #40
	sta clpbr
	lda #25 
	sta clpho
	lda #0		; later: sc_clipped!
	beq scp8

	lda sc_lastclpzl	; row		(gets skipped)
	beq scp1		; is zero: skip
	sta clpzl
scp4	clc
	lda filepos+1	; else add 1280, "row" times
	adc #5
	sta filepos+1
	dec clpzl
	bne scp4

scp1	lda sc_lastclpsp	; column
	beq scp5		; is zero: skip
	sta clpsp
scp6	clc
	lda filepos	; else add 32, "column" times
	adc #$20
	sta filepos
	bcc scp7
	inc filepos+1
scp7	dec clpsp
	bne scp6
scp5	lda sc_lastclpbr
	sta clpbr
	lda sc_lastclpho
	sta clpho
scp8	rts

; ----------------------------------------- 
; ------------------------------- Write PNG
; ----------------------------------------- 

write	lda gr_cmode	; Hires (0) oder Multi (>0)?
	bne +
	lda #<png4head	; Header für 4bit ausgeben
	ldx #>png4head
	sta src
	stx src+1
	ldx #>182
	lda #<182		; Länge 182 Bytes (ab da: Grafikdaten)
	bne ++
+	lda #<png8head	; Header für 8bit ausgeben
	ldx #>png8head
	sta src
	stx src+1
	lda #<902		; Länge 902 Bytes (ab da: Grafikdaten)
	ldx #>902
++	sta ls_vekta8
	stx ls_vekta8+1

	ldy #0		; write to disk
wr0	lda (src),y
	jsr bsout
	jsr count
	bne wr0

	tay		; .a=0
-	lda gr_cmode	; je nach Grafikmodus:
	bne +
	lda idat4,y	; crc32 für IDAT-Chunk berechnen
	bne ++
+	lda idat8,y	; start crc32 bei Chunkname
++	jsr collect
	iny
	cpy #11
	bne -

	lda #9		; Funktion "Undo ins Ram" setzen
	sta getundo+1
	jsr doundo	; automatisches Undo ausführen

	jsr scanlines	; Checksummen generieren und Bilddaten wegschreiben
	jsr writechks	; adler32/CRC32 abschließen/Checksummen schreiben
	jsr setfooter	; PNG-Abschlussblock aufbereiten

	jsr clrch		; File schließen
	lda #8		; Funktion "Undo aus dem Ram" setzen
	sta getundo+1
	jsr doundo	; und ausführen
	sec		; Leave-Flag
	rts		; fertig

; ----------------------------------------- Write Checksums to File

writechks	lda asum2+1	; get final Adler32
	jsr crcit
	lda asum2
	jsr crcit
	lda asum1+1
	jsr crcit
	lda asum1
	jsr crcit

	jsr mkcrc32	; CRC32 abschließen (.x=4)
-	lda asum2,x	; und ausgeben
	jsr bsout
	inx
	cpx #8
	bne -
	rts

crcit	jsr collect	; Adler in CRC32 einfließen lassen
	jmp bsout		; und ausgeben

; ----------------------------------------- 

encode	jsr bsout		; write to file
	jsr collect	; generate crc32 checksum
	jmp adler32	; generate zlib adler checksum

; ----------------------------------------- 

setfooter	ldy #0
-	lda pngfooter,y
	jsr bsout
	iny
	cpy #12
	bne -
	rts

; ----------------------------------------- Scanlines

scanlines	ldx #6		; Ram-Record erst löschen
	lda #0
sl0	sta rm_werte,x
	dex
	bpl sl0
	ldx #1		; dann Parameter neu setzen: 1 Byte Fetch
	stx rm_werte+5
	ldx #sc_merk	; Ziel $b0
	stx rm_werte

	lda filepos	; set startaddress (aus UNDO)
	ldx filepos+1
	sta src		; Hilfszeiger für die Blockzeilen
	sta rm_werte+2
	stx src+1
	stx rm_werte+3

	lda clpho		; Anzahl Blockzeilen (25 on full screen)
	sta lcnt8

lnloop8	lda #8		; zählt 1 Blockzeile (8 Linien)
	sta lcnt

tloop8	lda clpbr		; count x tiles (40 on full screen)
	sta tilecnt
	lda #0		; set png filter
	sta sc_merk
	jsr encode

tloop	ldx #4		; 40 Kachellinien zu 4 Bytes (8 Pixel)

lnloop	ldy #0
btloop	stx xmerk		; (x und y retten)
	sty ymerk

	lda #$91		; Wert aus dem Undo holen
	jsr gd_reu
	lda sc_merk
	jsr encode	; write color as is, compute checksums

	ldx xmerk		; (x und y zurück)
	ldy ymerk
	inc rm_werte+2	; vorrücken im Undo
	bne s4
	inc rm_werte+3
s4	dex		; 4 Bytes = 1 Kachellinie
	bne lnloop

	clc		; nächste Kachel
	lda rm_werte+2
	adc #28
	sta rm_werte+2
	bcc s3
	inc rm_werte+3
s3	dec tilecnt
	bne tloop

	lda src		; nächste Kachellinie
	clc
	adc #4
	sta src
	sta rm_werte+2
	bcc s5
	inc src+1
s5	lda src+1
	sta rm_werte+3
	jsr action	; Laufbalken vorrücken (200 mal)
	dec lcnt
	bne tloop8

s51	lda src		; nächste Blockzeile
	clc
	adc #<1248
	sta src
	sta rm_werte+2
	lda src+1
	adc #>1248
	sta src+1
	sta rm_werte+3
	dec lcnt8		; bis alle durch
	bne lnloop8
 	rts

; ----------------------------------------- PNG Header Structures

; ----------------------------------------- 4bit Header (182)

png4head	!by $89,$50,$4e,$47,$0d,$0a,$1a,$0a 	; PNG signature (8 Bytes)

	!by $00,$00,$00,$0d		; 13 Bytes (+12)
	!raw "IHDR"
	!by $00,$00
width4	!by $01,$40		; 320
	!by $00,$00
height4	!by $00,$c8		; 200
bitdpth4	!by $04			; 4 Bit/Pixel
	!by $03			; Colors aus Palette
	!by $00			; Compression (no)
	!by $00			; Filter (no)
	!by $00			; Interlace (no)
crch4	!by $6b,$2a,$25,$98

palette4	!by $00,$00,$00,$30		; 48 Bytes (+12)
	!raw "PLTE"		; (Palette)
plte4	!by $00,$00,$00,$00,$00,$aa,$66,$44,$00	; gets changed
	!by $33,$33,$33,$88,$00,$00,$cc,$44,$cc
	!by $dd,$88,$55,$77,$77,$77,$00,$88,$ff
	!by $ff,$77,$77,$00,$cc,$55,$bb,$bb,$bb
	!by $aa,$ff,$ee,$ee,$ee,$77,$aa,$ff,$66
	!by $ff,$ff,$ff
crcpl4	!by $2b,$59,$d8,$22 

	!by $00,$00,$00,$09		; aspect: 9 Bytes (+12)
	!raw "pHYs"		; Aspekt 1:1
aspect4	!by $00,$00,$0b,$12		; 2834 Pixel/m (72 dpi)
	!by $00,$00,$0b,$12		; 2834 Pixel/m
	!by $01			; Meter
crca4	!by $d2,$dd,$7e,$fc		; crc32

	!by $00,$00,$00,$29		; Comment: 41 Bytes (+12)
	!raw "tEXt"
	!raw "Comment",0
	!raw "Saved by C64 GoDot PNG saver "
	!tx "1.04"
	!by $30,$82,$d8,$f8 	; crc32

imgdata4	!by $00,$00,$7d,$d3		; (32200) Bytes (+15)
idat4	!raw "IDAT"		; Bilddaten
	!by $78			; zlib: 32K slide/Deflated
	!by $01			;       uncompressed
	!by $01			;       last block (of 1)
ilen4	!wo $7dc8			; Länge (32200=40*4*200+200)
	!wo $8237			; 2er-Komplement von Länge

; hier folgen die Pixeldaten (Indexe in RGB-Palette, die Adler32-Checksumme
; und die CRC32-Checksumme), es geht los mit dem Filterbyte ($00)

; ----------------------------------------- 8bit Header (902)

png8head	!by $89,$50,$4e,$47,$0d,$0a,$1a,$0a 	; PNG signature (8 bytes)

header	!by $00,$00,$00,$0d		; 13 Bytes (+12)
	!raw "IHDR"
	!by $00,$00
width8	!by $00,$a0		; 160
	!by $00,$00
height8	!by $00,$c8		; 200
bitdpth8	!by $08			; 8 Bit/Pixel
ctype	!by $03			; Colors aus Palette
	!by $00			; Compression (no)
filter	!by $00			; Filter (no)
	!by $00			; Interlace (no)
crch8	!by $58,$b6,$1a,$28 	; CRC32

palette8	!by $00,$00,$03,$00		; 768 Bytes (+12)
	!raw "PLTE"		; (Palette)

	!by $00,$00,$00,$19,$16,$55,$29,$1e,$00,$27,$27,$27
	!by $45,$19,$1e,$46,$1b,$50,$47,$28,$0d,$3b,$3b,$3b
	!by $35,$33,$72,$5e,$31,$37,$25,$53,$24,$51,$51,$51
	!by $33,$5f,$59,$66,$69,$2b,$47,$74,$45,$7f,$7f,$7f

	!by $19,$16,$55,$32,$2d,$ab,$42,$35,$56,$40,$3d,$7c
	!by $5e,$2f,$74,$5f,$31,$a6,$60,$3e,$62,$54,$51,$90
	!by $4e,$49,$c7,$77,$48,$8c,$3e,$69,$79,$6a,$68,$a7
	!by $4c,$76,$af,$7f,$7f,$80,$60,$8b,$9b,$98,$96,$d5

	!by $29,$1e,$00,$42,$35,$56,$52,$3d,$01,$50,$45,$27
	!by $6e,$37,$1f,$6f,$39,$51,$70,$46,$0d,$64,$59,$3b
	!by $5e,$51,$72,$87,$50,$37,$4e,$71,$24,$7a,$70,$52
	!by $5c,$7e,$5a,$8f,$87,$2b,$70,$93,$46,$a8,$9e,$80

	!by $27,$27,$27,$40,$3d,$7c,$50,$45,$27,$4e,$4e,$4e
	!by $6c,$40,$45,$6d,$42,$77,$6e,$4f,$34,$62,$62,$62
	!by $5c,$5a,$99,$85,$58,$5e,$4c,$7a,$4b,$78,$78,$78
	!by $5a,$86,$80,$8d,$90,$52,$6e,$9b,$6c,$a6,$a6,$a6

	!by $45,$19,$1e,$5e,$2f,$74,$6e,$37,$1f,$6c,$40,$45
	!by $8a,$32,$3d,$8b,$34,$6f,$8c,$41,$2b,$80,$54,$59
	!by $7a,$4c,$90,$a3,$4a,$55,$6a,$6c,$42,$96,$6a,$70
	!by $78,$78,$78,$ab,$82,$49,$8c,$8d,$64,$c4,$98,$9e

	!by $46,$1b,$50,$5f,$31,$a6,$6f,$39,$51,$6d,$42,$77
	!by $8b,$34,$6f,$8d,$36,$a1,$8d,$43,$5d,$81,$56,$8b
	!by $7c,$4e,$c2,$a4,$4c,$87,$6c,$6e,$74,$98,$6c,$a2
	!by $7a,$7a,$aa,$ad,$84,$7b,$8d,$8f,$96,$c6,$9a,$d0

	!by $47,$28,$0d,$60,$3e,$62,$70,$46,$0d,$6e,$4f,$34
	!by $8c,$41,$2b,$8d,$43,$5d,$8e,$50,$1a,$82,$63,$48
	!by $7c,$5b,$7f,$a5,$59,$44,$6c,$7b,$31,$98,$79,$5e
	!by $7a,$87,$66,$ad,$91,$38,$8e,$9c,$52,$c6,$a7,$8c

	!by $3b,$3b,$3b,$54,$51,$90,$64,$59,$3b,$62,$62,$62
	!by $80,$54,$59,$81,$56,$8b,$82,$63,$48,$76,$76,$76
	!by $70,$6e,$ad,$99,$6c,$72,$60,$8e,$5f,$8c,$8c,$8c
	!by $6e,$9a,$94,$a1,$a4,$66,$82,$af,$80,$ba,$ba,$ba

	!by $35,$33,$72,$4e,$49,$c7,$5e,$51,$72,$5c,$5a,$99
	!by $7a,$4c,$90,$7c,$4e,$c2,$7c,$5b,$7f,$70,$6e,$ad
	!by $6b,$66,$e4,$93,$64,$a9,$5b,$86,$96,$87,$84,$c3
	!by $69,$92,$cb,$9c,$9c,$9d,$7c,$a7,$b7,$b5,$b2,$f1

	!by $5e,$31,$37,$77,$48,$8c,$87,$50,$37,$85,$58,$5e
	!by $a3,$4a,$55,$a4,$4c,$87,$a5,$59,$44,$99,$6c,$72
	!by $93,$64,$a9,$bc,$63,$6e,$83,$84,$5b,$af,$83,$88
	!by $91,$91,$90,$c4,$9a,$62,$a5,$a6,$7c,$dd,$b1,$b6

	!by $25,$53,$24,$3e,$69,$79,$4e,$71,$24,$4c,$7a,$4b
	!by $6a,$6c,$42,$6c,$6e,$74,$6c,$7b,$31,$60,$8e,$5f
	!by $5b,$86,$96,$83,$84,$5b,$4b,$a6,$48,$77,$a4,$75
	!by $59,$b2,$7d,$8c,$bc,$4f,$6c,$c7,$69,$a5,$d2,$a3

	!by $51,$51,$51,$6a,$68,$a7,$7a,$70,$52,$78,$78,$78
	!by $96,$6a,$70,$98,$6c,$a2,$98,$79,$5e,$8c,$8c,$8c
	!by $87,$84,$c3,$af,$83,$88,$77,$a4,$75,$a3,$a3,$a3
	!by $85,$b1,$ab,$b8,$ba,$7c,$98,$c6,$97,$d1,$d1,$d1

	!by $33,$5f,$59,$4c,$76,$af,$5c,$7e,$5a,$5a,$86,$80
	!by $78,$78,$78,$7a,$7a,$aa,$7a,$87,$66,$6e,$9a,$94
	!by $69,$92,$cb,$91,$91,$90,$59,$b2,$7d,$85,$b1,$ab
	!by $67,$bf,$b3,$9a,$c8,$84,$7a,$d4,$9f,$b3,$df,$d9

	!by $66,$69,$2b,$7f,$7f,$80,$8f,$87,$2b,$8d,$90,$52
	!by $ab,$82,$49,$ad,$84,$7b,$ad,$91,$38,$a1,$a4,$66
	!by $9c,$9c,$9d,$c4,$9a,$62,$8c,$bc,$4f,$b8,$ba,$7c
	!by $9a,$c8,$84,$cd,$d2,$56,$ad,$dd,$70,$e6,$e8,$aa

	!by $47,$74,$45,$60,$8b,$9b,$70,$93,$46,$6e,$9b,$6c
	!by $8c,$8d,$64,$8d,$8f,$96,$8e,$9c,$52,$82,$af,$80
	!by $7c,$a7,$b7,$a5,$a6,$7c,$6c,$c7,$69,$98,$c6,$97
	!by $7a,$d4,$9f,$ad,$dd,$70,$8e,$e9,$8b,$c6,$f4,$c5

	!by $7f,$7f,$7f,$98,$96,$d5,$a8,$9e,$80,$a6,$a6,$a6
	!by $c4,$98,$9e,$c6,$9a,$d0,$c6,$a7,$8c,$ba,$ba,$ba
	!by $b5,$b2,$f1,$dd,$b1,$b6,$a5,$d2,$a3,$d1,$d1,$d1
	!by $b3,$df,$d9,$e6,$e8,$aa,$c6,$f4,$c5,$ff,$ff,$ff

crcpl8	!by $ea,$ce,$20,$6d		; crc32

aspect	!by $00,$00,$00,$09		; 9 Bytes (+12)
	!raw "pHYs"		; Aspekt 2:1
aspect8	!by $00,$00,$05,$89		; 1417 Pixel/m
	!by $00,$00,$0b,$12		; 2834 Pixel/m
	!by $01			; Meter
crca8	!by $f5,$43,$e3,$21 	; CRC32

comment	!by $00,$00,$00,$29		; Comment: 41 Bytes (+12)
	!raw "tEXt"
	!raw "Comment",0
	!raw "Saved by C64 GoDot PNG saver "
version	!tx "1.04"
	!by $30,$82,$d8,$f8 	; crc32

imgdata	!by $00,$00,$7d,$d3		; (32200) Bytes (+15 (+8))
idat8	!raw "IDAT"		; Bilddaten
	!by $78			; zlib: 32K slide/Deflated
	!by $01			;       uncompressed
	!by $01			;       last block (of 1)
ilen8	!wo $7dc8			; Länge (32200=20*8*200+200)
	!wo $8237			; 2er-Komplement von Länge

; hier folgen die Pixeldaten (Indexe in RGB-Palette, die Adler32-Checksumme
; und die CRC32-Checksumme), es geht los mit dem Filterbyte ($00)

pngfooter	!by $00,$00,$00,$00		; 0 Bytes (+12)
	!raw "IEND"
	!by $ae,$42,$60,$82		; crc32

; ----------------------------------------- Alternative 4Bit Paletten (je 52)
; depends on mod.SetColorbase, gets changed in setparams

paloffs	!wo palgodot,palpepto,paldeekay,palpal,palcolod,palcoco,palptoing

palgodot	!by $00,$00,$00, $00,$00,$aa, $66,$44,$00, $33,$33,$33
	!by $88,$00,$00, $cc,$44,$cc, $dd,$88,$55, $77,$77,$77
	!by $00,$88,$ff, $ff,$77,$77, $00,$cc,$55, $bb,$bb,$bb
	!by $aa,$ff,$ee, $ee,$ee,$77, $aa,$ff,$66, $ff,$ff,$ff
crcp0	!by $2b,$59,$d8,$22

palpepto	!by $00,$00,$00, $35,$28,$79, $43,$39,$00, $44,$44,$44
	!by $68,$37,$2b, $6f,$3d,$86, $6f,$4f,$25, $6c,$6c,$6c
	!by $6c,$5e,$b5, $9a,$67,$59, $58,$8d,$43, $95,$95,$95
	!by $70,$a4,$b2, $b8,$c7,$6f, $9a,$d2,$84, $ff,$ff,$ff
crcp1	!by $9a,$a9,$c1,$c8

paldeekay	!by $00,$00,$00, $1a,$0c,$92, $44,$1e,$00, $46,$46,$46
	!by $68,$37,$2b, $a7,$3b,$9f, $a9,$4b,$02, $8b,$8b,$8b
	!by $4d,$91,$d1, $d2,$80,$74, $4d,$ab,$19, $ba,$ba,$ba
	!by $65,$cd,$a8, $eb,$e3,$53, $8e,$f6,$8e, $ff,$ff,$ff
crcp2	!by $b4,$d1,$5c,$9c

palpal	!by $00,$00,$00, $32,$2d,$ab, $52,$3d,$01, $4e,$4e,$4e
	!by $8a,$32,$3d, $8d,$36,$a1, $8e,$50,$1a, $76,$76,$76
	!by $6b,$66,$e4, $bc,$63,$6e, $4b,$a6,$48, $a3,$a3,$a3
	!by $67,$bf,$b3, $cd,$d2,$56, $8e,$e9,$8b, $ff,$ff,$ff
crcp3	!by $D4,$62,$90,$71

palcolod	!by $00,$00,$00, $2e,$2c,$9b, $55,$38,$00, $4a,$4a,$4a	; ###
	!by $81,$33,$38, $8e,$3c,$97, $8e,$50,$29, $7b,$7b,$7b
	!by $6f,$6d,$eb, $c4,$6c,$71, $56,$ac,$4d, $b2,$b2,$b2
	!by $75,$ce,$c8, $ed,$f1,$71, $a9,$ff,$9f, $ff,$ff,$ff
crcp4	!by $7f,$08,$d2,$e3

palcoco	!by $00,$00,$00, $37,$39,$c4, $68,$38,$08, $4d,$4d,$4d
	!by $af,$2a,$29, $b0,$3f,$b6, $b6,$59,$1c, $84,$84,$84
	!by $70,$7c,$e6, $ea,$74,$6c, $4a,$c6,$4a, $b6,$b6,$b5
	!by $62,$d8,$cc, $e4,$ed,$4e, $a6,$fa,$9e, $ff,$ff,$ff
crcp5	!by $9a,$69,$83,$3e

palptoing	!by $00,$00,$00, $3e,$31,$a2, $57,$42,$00, $54,$54,$54
	!by $8c,$3e,$34, $8d,$47,$b3, $90,$5f,$25, $80,$80,$80
	!by $7c,$70,$da, $bb,$77,$6d, $68,$a9,$41, $ab,$ab,$ab
	!by $7a,$bf,$c7, $d0,$dc,$71, $ac,$ea,$88, $ff,$ff,$ff
crcp6	!by $71,$e3,$ac,$ba

; ----------------------------------------- 
; ---------------------------------- DoUndo
; ----------------------------------------- 

doundo	lda #<undo	; eigentliche Routine verschieben
	ldx #>undo	; (weil das Modul ausgeblendet wird)
	sta ls_vekta8
	stx ls_vekta8+1
	ldy #mkcrc32-undo
sloop	lda (ls_vekta8),y
	sta sy_global,y	; nach GLOBAL
	dey
	bpl sloop
	jmp sy_global	; und dann ausführen

undo 	jsr gd_swapd	; Ram einblenden
	ldx #10		; FirstInit
	jsr rm_ramvec

	ldx #6		; Parameter setzen
	lda #0
md0	sta rm_werte,x
	dex
	bpl md0
	lda #>sy_4bit	; 4Bit-Bereich im C64
	sta rm_werte+1
	lda #$10		; nach Undo4Bit im Ram
	sta rm_werte+3
	lda #$7d		; 32000 Bytes
	sta rm_werte+6
	lda #1		; Flag für 4Bit-Undo setzen
	sta rm_nextentry

getundo	ldx #9		; und DoUndo
	jsr rm_ramvec
	ldx #1		; danach ForceOff (Ram ausblenden)
	jsr rm_ramvec	
	jmp gd_sproff	; und Sprite wieder aus, zurück

; ----------------------------------------- CRC32 Result

mkcrc32	jsr process	; process buffer
	ldx #0		; ergebnis invertieren
	ldy #3
-	lda crc32,x
	eor #$ff
	sta crcbuf,y
	inx
	dey
	bpl -
	rts		; result an crcbuf

; ----------------------------------------- Gather CRC32

collect	ldx xcount
	sta inbuf,x	; .a: gelesenes Byte
	inx
	stx xcount
	cpx #64		; 64 Bytes sammeln...
	beq process
	rts

; ----------------------------------------- Process CRC32

process	ldy #0		; ...dann den ganzen Puffer kodieren
	beq +
-	lda inbuf,y
	eor crc32
	tax
	lda crc32+1
	eor buf0,x
	sta crc32
	lda crc32+2
	eor buf1,x
	sta crc32+1
	lda crc32+3
	eor buf2,x
	sta crc32+2
	lda buf3,x
	sta crc32+3
	iny
+	cpy xcount
	bne -

	lda #0		; reset counter (after 64 bytes)
	sta xcount
	rts

; ----------------------------------------- Initilize CRC32 Tables

prepbufs	ldy #0		; start value: 0 (end: 255)
--	sty crcbuf
	lda #0
	sta crcbuf+1
	sta crcbuf+2
	sta crcbuf+3
	ldx #8		; shift 8 times right
-	lsr crcbuf+3
	ror crcbuf+2
	ror crcbuf+1
	ror crcbuf
	bcc +
	lda crcbuf	; if .c set: 
	eor #$20		; apply reverted polynomial: $edb88320
	sta crcbuf
	lda crcbuf+1
	eor #$83
	sta crcbuf+1
	lda crcbuf+2
	eor #$b8
	sta crcbuf+2
	lda crcbuf+3
	eor #$ed
	sta crcbuf+3
+	dex
	bne -
	lda crcbuf	; then fill the buffers with result
	sta buf0,y
	lda crcbuf+1
	sta buf1,y
	lda crcbuf+2
	sta buf2,y
	lda crcbuf+3
	sta buf3,y
	iny
	bne --		; 256 times

	ldx #3
	lda #$ff		; start value: $ffffffff
-	sta crc32,x
	dex
	bpl -
	lda #0
	sta xcount	; .x counter to 0
	rts

; ----------------------------------------- Compute Adler32 Checksum

adler32	lda asum1		; get current asum1
	ldx asum1+1
	clc
	adc sc_merk	; add stream to asum1
	bcc adl4
	inx
	beq adl5		; (.c=1)
adl4	cpx #>base	; if asum1 >= base: asum1 = asum1 - base
	bcc adl6
	cmp #<base
	bcc adl6
	inx		; .x=0
adl5	sbc #<base	; (.c=1)
	clc

adl6	sta asum1
	stx asum1+1
	adc asum2		; (.c=0)
	sta asum2		; add current asum1 to asum2
	txa
	adc asum2+1
	sta asum2+1
	bcs adl7
	cmp #>base
	bcc adl8
	lda asum2
	cmp #<base
	bcc adl8

adl7	lda asum2		; if asum2 >= base: asum2 = asum2 - base
	sbc #<base	; (.c=1)
	sta asum2
	lda asum2+1
	sbc #>base
	sta asum2+1

adl8	rts		; am Ende:
			; asum2.asum1 als 32Bit-Wert (hi/lo verdreht)

; ----------------------------------------- Initialize Adler32 Checksum

adlerinit	ldx #0		; asum1=1
	stx asum1+1
	stx asum2		; asum2=0
	stx asum2+1
	inx
	stx asum1
	rts

; ----------------------------------------- Filenamen verlängern

addpng	pha		; Länge merken
	tay
	dey
	ldx #0
ag4	lda ls_nambuf,y	; endet auf ".PNG"?
	cmp pngtx,x
	bne ag2		; nein
	dey
	inx
	cpx #4
	bcc ag4
	pla		; ja, fertig
	rts
	
ag2	pla
	tay		; Name länger als 12 Zeichen?
	cpy #13
	bcs ag0		; ja, behandeln

ag5	ldx #3		; nein, ".png" anhängen
ag1	lda pngtx,x
ag3	sta ls_nambuf,y
	lda pngtxs,x	; auch für Image Info
	sta ls_lastname,y
	iny
	dex
	bpl ag1
	sty wflen		; neue Länge merken, fertig
	sty ls_flen
	rts

ag0	dey		; auf 12 verkürzen
	cpy #12
	bne ag0
	beq ag5		; unbed. Sprung

; ------------------------------------------------ Wenn keine REU vorhanden

noreu	ldy #2		; rot
	jsr graphon	; blinken
	sec		; Saver verlassen
	rts

; ------------------------------------------------ Blink the Border

graphon	lda rahmen	; save border color
	pha
	sty rahmen	; set new color (in .y, e.g. "2" for red)
	ldx #$40
	jsr gd_dl2	; delay
	pla
	sta rahmen	; reset old border color
	stx sy_tbuffer	; clear key strokes
stay	clc
	rts

; ----------------------------------------------------- 

modend 	!eof
