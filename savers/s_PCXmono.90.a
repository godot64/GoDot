
!src "godotlib.lib"
*	= $c000

; ----------------------------------------- 
;
; svr.PCXmono.90
;  Saver für Bilder im Format PCX 400x640 monochrom
;
;  1.00, 23.01.94: first release
;  1.01, 04.09.93: Zählwerte korrigiert, Packzähler geändert
;  1.02, 26.11.16: Reset der Balancing-Einstellungen zugefügt
;        09.06.17: completely commented
;
; ----------------------------------------- 


; ----------------------------------------- Equates

	dst		= $30
	dst0		= $32
	cnt		= $34
	dbl		= $36
	vertcnt		= $37
	byte		= $38
	bitcnt		= $39
	bcnt1		= $3a
	src		= $3b
	hold		= $3d
	src0		= $3e
	adcnt		= $40
	lcnt8		= $41
	lcnt		= $42

	offx		= ls_adrmisc
	offy		= offx+1

	shift		= $028d
	oszi3		= $d40e
	wave		= $d412
	filter		= $d418
	rausch		= $d41b

	buf		= $cd00
	destbuf		= $ca00

; ----------------------------------------- Header

header	jmp start
	!by $40
	!by 0
	!by 1
	!wo modend
	!wo 0
	!pet "PCX mono 400x640"
	!pet "1.02"
	!pet "26.11.16"
	!pet "A.Dettke/W.Kling"

; ----------------------------------------- Main

start	ldx gr_nr		; Input? 
	dex 
	bne st0
	jmp initinp	; yes

; ----------------------------------------- PCXmono.90

st0	jsr gd_sproff	; Mauszeiger aus

	lda gd_modswitch	; Modulmanagement
	pha 

	lda ls_flen	; Keine Datei ausgewählt?
	beq st1		; ja, fertig

	sta wflen		; Namenslänge merken
	jsr addpcx	; Namen erweitern
	lda #1		; Activity beginnen
	sta adcnt

	jsr wopen		; Datei öffnen
	bne st2		; Fehlschlag

	jsr getname	; Image Info vorbereiten
	ldx #12
	jsr ckout
	jsr gd_clrms	; Message
	ldx #0
	jsr tcopy
	jsr write		; Datei speichern
st2	jsr clrch		; schließen
	lda #12
	jsr close
	jsr err9		; Fehler?
	bne st1
	jsr setname	; nein, Image Info

st1	pla 
	sta gd_modswitch

	lda shift		; Shift (-Lock) gedrückt?
	and #1
	bne cn2		; ja, Sprung

	ldy #16		; sonst: Balancing-Tabelle initialisieren
	sty gr_ctr
	sty gr_brt
lll	dey 
	tya 
	sta gr_btab,y
	bne lll

cn2	jsr gd_spron	; Mauszeiger an
	sec 		; fertig
	rts 

; ----------------------------------------- Input-Routinen
; ----------------------------------------- 

!src "input.inc"

; ----------------------------------------- 
; ----------------------------------------- 


; ----------------------------------------- Disk Access

pw	!pet "w,p,"
pcxtx	!pet "xcp."
pcxtxs	!scr "xcp."
drinit	!pet "i0"
wflen	!by 0

wopen	jsr inull
	bne err8
	ldy wflen
	ldx #3
wo1	lda pw,x
	sta ls_nambuf,y
	iny 
	dex 
	bpl wo1
	sty wflen
	lda #12
	tay 
	ldx ls_drive
	jsr filpar
	lda wflen
	ldx #<(ls_nambuf)
	ldy #>(ls_nambuf)
	jsr filnam
	jsr copen
	jmp err9

; ----------------------------------------- Init Disk

inull	ldx #<(drinit)
	ldy #>(drinit)
	lda #2
	jsr gd_sendcom
err9	jsr gd_xmess
	lda ls_err2
	and #15
err8	sec 
	rts 

; ----------------------------------------- Message Handling

messout	ldx #<(message)
	ldy #>(message)
	jmp gd_xtxout2

tcopy	ldy #0
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx 
	iny 
	bne tc0

action	dec adcnt
	bne ld4
	lda cntwert
	sta adcnt
	ldy offy		; this should be changed to prevent a gauge overflow
	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	rts 

clrmess	ldx #25
	lda #32
cl0	sta mess,x
	dex 
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts 

filltab	!by 160,93,103,127,126,124,105,109

cntwert	!by 2

txt	!scr " PCX  @"

message	!fill 6,32
mess	!fill 26,32
	!by 0

; ----------------------------------------- Image Information Handler

getname	ldx #0
si0	lda ls_lastname,x	; save name
	beq si1
	sta nbuf,x
	inx 
	cpx #16
	bcc si0
si1	rts 

setname	lda #0
	ldx #<(ls_picname)	; only set new name (but no more info)
	ldy #>(ls_picname)
si3	stx sc_texttab
	sty sc_texttab+1
	tax 
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx 
	iny 
	bne si4
si5	rts 

nbuf	!fill 16,32
	!by 0

; ----------------------------------------- Write Image

write	jsr wrheader
	lda gr_dither	; get dither mode
	tax 
	lda dlo,x
	sta dmode		; and set addresses
	lda dhi,x
	sta dmode+1
	lda #$80		; init noise generator
	sta filter
	sta oszi3
	sta oszi3+1
	lda #0
	sta wave
	lda #$81
	sta wave
	jsr pcx		; render image
	sec 
	rts 

; ----------------------------------------- Render Image to Disk

pcx	lda #<($b800)	; this is the lower left corner of the 4Bit image
	ldx #>($b800)
	sta src0
	sta src
	stx src0+1
	stx src+1
	lda #0
	sta dbl
	sta vertcnt

	lda #40		; 40 Kachelzeilen
	sta lcnt8
lnloop8	lda #0		; 8 Rasterzeilen pro Kachel
	sta lcnt
	sta second	; zweiter Streifen

lnloop	jsr action	; Gauge
ads0	ldx #0		; .x zählt auf 50 (doppelte Bildhöhe)

zloop	ldy #1		; Verdoppelungszähler
	sty bcnt1
	dey 
	sty ymerk		; .y retten (=0)

byloop	lda #$c0		; Maske: %11000000
	sta bitcnt
	lda #0
	sta byte
	ldy #4		; Doppelpixel zählen
	sty makeloop

btloop	ldy ymerk		; ein gekipptes Byte aus vier Doppelpixeln basteln
	lda scroffs,y	; Kacheloffsets
	tay 
	lda (src),y	; 4Bit-Byte holen (zwei Pixel)
	ldy second	; Linkes-Rechtes-Pixel-Flag
	bne ll0
	lsr 
	lsr 
	lsr 
	lsr 
ll0	and #15
	tay 
	lda gr_btab,y	; Balancing beachten
	jsr makebyte	; dithern
	inc ymerk
	lsr bitcnt	; Maske rücken: %00110000
	lsr bitcnt
	dec makeloop	; bis 4 Doppelpixel durch
	bne btloop

	sta buf,x		; dann gekipptes Byte puffern
	inx 
	dec bcnt1		; zweimal
	bpl byloop

	lda src+1		; minus 1280 (von unten nach oben rücken)
	sec 
	sbc #5
	sta src+1
s4	cpx #50		; 50 mal
	bne zloop

	jsr moveline	; eine Kachelzeile sammeln (50 Kacheln nebeneinander), dann speichern

	ldx vertcnt	; Linienzähler (8 Linien pro Kachelzeile)
	inx 
	cpx #8
	bne s41
	ldx #0
s41	stx vertcnt
	lda dbl		; doppelt?
	eor #$ff
	sta dbl
	beq newline

	lda src0		; ja, Startwerte holen
	sta src
	lda src0+1
	sta src+1
	bne ads0

newline	lda second	; rechtes Pixel?
	eor #$ff
	sta second
	bne s5
	inc src0		; nein, weiter
	bne s5
	inc src0+1
s5	lda src0+1
	sta src+1
	lda src0
	sta src
	inc lcnt		; Linienzähler in Einzelkachel durch?
	lda #8
	cmp lcnt
	beq s51
	jmp lnloop

s51	lda src0		; ja, nächste Kachel
	clc 
	adc #28
	sta src0
	sta src
	bcc s52
	inc src0+1
	inc src+1
s52	dec lcnt8		; alle Kachelzeilen?
	beq done
	jmp lnloop8

done	rts 		; ja, fertig

; ----------------------------------------- Distribute

makebyte	jmp (dmode)

; ----------------------------------------- Dither Routines

dithoff	cmp #8
	bpl do0
	lda #0
	!by $2c
do0	lda bitcnt
	ora byte
	sta byte
	rts 

dithrst	ldy vertcnt
	ora offs,y
	tay 
	lda gr_orderedpat,y
	and bitcnt
	ora byte
	sta byte
	rts 

dithpat	asl 
	asl 
	asl 
	ora vertcnt
	tay 
	lda gr_pattern,y
	and bitcnt
	ora byte
	sta byte
	rts 

dithnoi	beq dn0
	cmp #15
	beq dn1
	ldy #0
	sta hold
	lda rausch
	and #$0f
	cmp hold
	bcs dn3
	ldy #$aa
dn3	lda rausch
	and #$0f
	cmp hold
	tya 
	bcs dn2
	ora #$55
dn2	!by $2c
dn1	lda #$ff
	and bitcnt
dn0	ora byte
	sta byte
	rts 

dithrnd	cmp #8
	beq dr0
	bcs dr1
	bcc dr2
dr0	lda rausch
	!by $2c
dr1	lda bitcnt
	and bitcnt
	!by $2c
dr2	lda #0
	ora byte
	sta byte
ml4	rts 

; ----------------------------------------- gekippte Kachelzeile erzeugen

moveline	lda vertcnt	; oberste Linie?
	bne ml0
	lda #<(destbuf)	; ja, Zielpuffer setzen
	ldy #>(destbuf)
	sta dst
	sty dst+1

ml0	ldy #0		; umschichten
	ldx #0
mloop	lda buf,x
	sta (dst),y
	inc dst
	bne ml3
	inc dst+1
ml3	inx 
	cpx #50
	bne mloop
	ldy vertcnt	; unterste Linie erreicht?
	cpy #7
	bne ml4		; nein, noch nicht

writeloop	ldx #8		; ja, eine Kachelzeile speichern
	lda #<(destbuf)
	ldy #>(destbuf)
	sta dst0
	sty dst0+1
wl6	ldy #0
	sty cnt
	sty byte
wloop	lda (dst0),y	; Daten holen
	jsr pack		; packen und speichern
	iny 
	cpy #50
	bne wloop
	clc 
	lda dst0
	adc #50
	sta dst0
	bcc wl5
	inc dst0+1
wl5	jsr split		; flush
	dex 
	bne wl6
	rts 

split	lda byte
	eor #$ff

; ----------------------------------------- Compress File for PCX (RLE)

pack	cmp byte
	beq incr

writeit	pha 
	lda cnt
	beq wl1
	cmp #63
	bcs wl0
	cmp #3
	bcs wl0
	pha 
	lda byte
	cmp #$c0
	pla 
	bcc wl2
wl0	ora #$c0
	jsr bsout
	lda #1
	sta cnt
wl2	lda byte
	jsr bsout
	dec cnt
	bne wl2

wl1	pla 
	sta byte
incr	lda cnt
	cmp #63
	beq high
	inc cnt
	rts 

; ----------------------------------------- 

high	lda (dst0),y
	jmp writeit

; ----------------------------------------- Write PCX Header

wrheader	ldx #0
wrh0	lda pcxheader,x
	jsr bsout
	inx 
	cpx #128
	bne wrh0
	rts 

; ----------------------------------------- Variables & Tables

offs	!by $00,$10,$20,$30
	!by $00,$10,$20,$30

dlo	!by <(dithoff)
	!by <(dithrst)
	!by <(dithpat)
	!by <(dithnoi)
	!by <(dithrnd)

dhi	!by >(dithoff)
	!by >(dithrst)
	!by >(dithpat)
	!by >(dithnoi)
	!by >(dithrnd)

dmode	!by 0,0
makeloop	!by 0
ymerk	!by 0
second	!by 0
scroffs	!by $1c,$18,$14,$10,$0c,$08,$04,$00

; ----------------------------------------- PCX Header

pcxheader	!by 10,2,1,1,0,0,0,0
	!by <(399),>(399),<(639),>(639),<(300),>(300),<(300),>(300)
	!by 0,0,0,$ff,$ff,$ff
	!by $ff,$ff,$ff,$ff,$ff,$ff
	!by $ff,$ff,$ff,$ff,$ff,$ff
	!by $ff,$ff,$ff,$ff,$ff,$ff
	!by $ff,$ff,$ff,$ff,$ff,$ff
	!by $ff,$ff,$ff,$ff,$ff,$ff
	!by $ff,$ff,$ff,$ff,$ff,$ff
	!by $ff,$ff,$ff,$ff,$ff,$ff
	!by 0,1,50,0,1,0,0,0	; Modus-Byte
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0

; ----------------------------------------- Add ".PCX" to filename

addpcx	pha		; Länge merken
	tay
	dey
	ldx #0
ag4	lda ls_nambuf,y	; endet auf ".PCX"?
	cmp pcxtx,x
	bne ag2		; nein
	dey
	inx
	cpx #4
	bcc ag4
	pla		; ja, fertig
	rts
	
ag2	pla
	tay		; Name länger als 12 Zeichen?
	cpy #13
	bcs ag0		; ja, behandeln

ag5	ldx #3		; nein, ".pcx" anhängen
ag1	lda pcxtx,x
ag3	sta ls_nambuf,y
	lda pcxtxs,x	; auch für Image Info
	sta ls_lastname,y
	iny
	dex
	bpl ag1
	sty wflen		; neue Länge merken, fertig
	sty ls_flen
	rts

ag0	dey		; auf 12 verkürzen
	cpy #12
	bne ag0
	beq ag5		; unbed. Sprung

modend	!eof 

