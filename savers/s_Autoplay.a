
	!src "godotlib.lib"	; Label-Library einbinden
	*= $c000		; generelle Startadresse für alle Module
	!ct pet		; Texte werden in PETSCII assembliert
;	!sl "labels.txt"

; -----------------------------------------
;
; svr.Autoplay
;     Saver for self-starting Multicolor or Hires Images
;
; 1.00, 10.10.20, first release
; 1.01, 11.10.20, bugfix: wrong gap len and wrong counting for 256 zeros
;
; -----------------------------------------

; ----------------------------------------- Label-Definitionen

	pport		= $01

	adcnt	= $30	; Zähler für activity
	gbyte	= $31
	counter	= $32	; /$33
	count0	= $34	; /$35
	null	= $36
	offx	= $37
	offy	= offx+1

	vram1	= $ce0b	; 1st 500 of vram
	vram2	= $ee0b	; 2nd 500 of vram
	cram	= $de0b	; color ram

	buffer1	= $ca23	; 500 Bytes (from vram1)
	buffer2	= $cc17	; 500 Bytes (from vram2)
	bitmap	= $2000	; 8192 Bytes Bitmap

; ----------------------------------------- Header

 	jmp start

	!by $40
	!by 0
	!by 0
	!wo modend
	!wo 0
	!tx "Autoplay Mul/Hir"
	!tx "1.01"
	!tx "11.10.20"
	!tx "A.Dettke        "

; ----------------------------------------- 

start	ldx gr_nr		; Funktionsnummer testen:
	dex
	bne saver		; Null, dann eigentlichen Saver aufrufen

	jmp initinp	; eins, dann "Input" ausführen (in INPUT.INC)

; ----------------------------------------- Main

saver	lda gr_cmode	; get GoDot's Display mode
	beq +
	lda #$18		; multi 
	!by $2c
+	lda #$08		; hires
	sta gmode

st11	lda gd_modswitch	; Memory Management
	pha

	lda ls_flen	; Filename wurde vom Filerequester übergeben?
	beq st1		; nein (dann Cancel)

	sta wflen		; sonst: Länge sichern
	jsr addsig	; Namenskürzel anhängen (".run")
	jsr wopen		; Datei zum Schreiben öffnen
	bne st2		; wenn Diskettenfehler: Ende

	jsr getname	; Filenamen für Image Information sichern
	ldx #12		; OPEN #12, out
	jsr ckout

	ldx #3		; prepare compress counters
	lda #0
-	sta counter,x
	dex
	bpl -

	jsr write		; jetzt Bild speichern

st2	jsr clrch		; danach Bus freigeben
	lda #12		; Datei #12 schließen
	jsr close
	jsr err9		; Floppystatus zeigen (nur sehr kurz)
	bne st1

	jsr setname	; nur wenn fehlerfrei: Image Information aufbereiten

st1	pla		; dann Saver abwickeln: Memory Management
	sta gd_modswitch

st12	jsr gd_spron	; Mauszeiger wieder an
	sec		; Leave-Flag setzen
	rts		; fertig, Saver verlassen


; ----------------------------------------- 
; ----------------------------------------- Input Routines 
; ----------------------------------------- 

	!src "input.inc"

; ----------------------------------------- 
; -----------------------------------------
; ----------------------------------------- 


; ----------------------------------------- 
; ----------------------------------------- Disk Access Routines
; ----------------------------------------- 

pw	!pet "w,p,"
sigtx	!pet "nur."	; Signatur ".run"
sigtxs	!scr "nur."
drinit	!pet "i0"
wflen	!by 0

; ----------------------------------------- Filehandling

wopen	jsr inull		; Initialize
	bne err8
	ldy wflen		; ",p,w" anhängen
	ldx #3
wo1	lda pw,x
	sta ls_nambuf,y
	iny
	dex
	bpl wo1
	sty wflen
	lda #12		; OPEN 12,drive,12,"name,p,w"
	tay
	ldx ls_drive
	jsr filpar
	lda wflen
	ldx #<ls_nambuf
	ldy #>ls_nambuf
	jsr filnam
	jsr copen
	jmp err9
;
inull	ldx #<drinit	; Initialize Drive
	ldy #>drinit
	lda #2
	jsr gd_sendcom

err9	jsr gd_xmess
	lda ls_err2	; liefert Fehlernummer der Floppy
	and #15		; und zwar als Bytewert (wenn <>0, dann Fehler)
err8 	sec
	rts

; ----------------------------------------- 
; ----------------------------------------- Activity Handler
; ----------------------------------------- 

messout	ldx #<message	; Textausgabe
	ldy #>message
	jmp gd_xtxout2

tcopy	ldy #0		; Infotextauswahl (hinter Label "txt")
tc0 	lda txt,x		; Offset auf gewünschten Text in .x
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0

clrmess	ldx #22		; Puffer für Balken löschen
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0		; Balkenlänge: 0
	ldx #7		; Dicke am Ende: 0
	sty offy
	stx offx
	rts

action 	dec adcnt
	bne ld4
	lda cntwert
	sta adcnt
	ldy offy		; Offset auf Balkenende
	cpy clrmess+1	; Ende der Ausgabezeile erreicht?
	bne act0
	jsr clrmess	; ja, re-Init des Status-Bereichs
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4 	rts

filltab	!by 160,93,103,127,126,124,105,109
cntwert	!by 12

txt	!scr " Move    ",0	; txt: gleich lang wie message
	!scr " Bitmap  ",0

message	!fill 9,32
mess	!fill 23,32	; message und mess zusammen immer 32 Bytes!
	!by 0

; ----------------------------------------- 
; ----------------------------------------- Image Information Handler
; ----------------------------------------- 

getname	ldx #0		; aktuellen Filenamen sichern
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts

setname	lda #0		; Namen in Image Info eintragen
	ldx #<ls_picname
	ldy #>ls_picname
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts
;
nbuf	!fill 16,32	; Namenspuffer
	!by 0

; ----------------------------------------- 
; ----------------------------------------- Write File
; ----------------------------------------- 

write	jsr gd_clrms	; Fortschrittsbalken und Statusausgaben vorbereiten
	ldx #12
	stx cntwert
	ldx #$ff		; compress zeros: set flag
	stx null
	inx		; Anzeigetext #1 ("Move") eintragen
	jsr tcopy
	iny
	sty adcnt		; Activity (Fortschrittsbalken) starten (.y=1)

	lda #<(gap-bline)	; write header of file (281 bytes)
	ldy #>(gap-bline)	; (incl. start address and sprite area)
	jsr setveco
	lda #<bline
	ldy #>bline
	jsr setvech
	jsr writehead

	jsr setvecv1	; combine videorams
	jsr movev
	lda buffer1
	jsr flsh0
	jsr setvecv2
	lda #<buffer2	; in buffer1 and buffer2
	ldy #>buffer2
	jsr setvech
	sei
	lda #0
	sta pport
	jsr movev
	lda #$36
	sta pport
	cli
	jsr write1000	; write videoram (1000 bytes)
	jsr fillgap	; write gap (24 bytes)

	jsr setvecc	; decode colorram
	jsr movec
	jsr write1000	; write colorram
	jsr fillgap	; write gap

	lda gr_basepal	; set border color
	sta colors
	lda gr_bkcol	; set background color
	sta colors+1

	lda #<(modend-gap)	; write gap before bitmap
	ldy #>(modend-gap)	; (including VIC)
	jsr setveco
	lda #<gap
	ldy #>gap
	jsr setvech
	jsr writehead

	ldx #50
	stx cntwert
	ldx #10		; Anzeigetext #2 ("Bitmap") eintragen
	jsr tcopy
	iny
	sty adcnt		; Activity (Fortschrittsbalken) starten (.y=1)

	lda #<8192	; now write bitmap (8192 bytes)
	ldy #>8192
	jsr setveco
	lda #<bitmap
	ldy #>bitmap
	jsr setvech

; ----------------------------------------- 

writebmap	ldy #0		; and then...
-	lda (ls_adrmisc),y
	jsr pack
	jsr action
	jsr count		; count bytes downto zero
	bne writebmap
	ldy counter	; check compress counter
	beq +
	lda gbyte		; flush if still compressing
	eor #$ff
	jmp pack

; ----------------------------------------- 

writehead	ldy #0
-	lda (ls_adrmisc),y
	jsr bsout
	jsr count
	bne -
+	sty counter	; reset compress counters
	sty counter+1
	sty count0
	sty count0+1
	rts		; ...finished

; ----------------------------------------- 

write1000	lda #<1000	; 1000 bytes
	ldy #>1000
	jsr setveco
	bne writebmap	; uncond. branch

; ----------------------------------------- 

flush	lda gbyte		; prepare flush of compress buffer
flsh0	eor #$ff
	sta gbyte
	rts

; ----------------------------------------- 

fillgap	lda #$cf		; add 24 times $00
	jsr bsout
	lda #$16		; ### 1.01
	jmp bsout

; ----------------------------------------- 

resetnull	lda #$ff		; reset zero counter marker
	sta null
	rts

; ----------------------------------------- 

setvecv1	lda #<vram1	; at $de0b
	ldy #>vram1
	bne +
setvecv2	lda #<vram2	; at $ee0b
	ldy #>vram2
	bne +
setvecc	lda #<cram	; at $ce0b
	ldy #>cram
+	sta sc_vekt20
	sty sc_vekt20+1
	lda #<500		; amount 
	ldy #>500
setveco	sta ls_vekta8
	sty ls_vekta8+1
	lda #<buffer1	; destination
	ldy #>buffer1
setvech	sta ls_adrmisc
	sty ls_adrmisc+1
	rts

; ----------------------------------------- 

movev	ldy #0
-	lda (sc_vekt20),y
	sta (ls_adrmisc),y
	jsr count
	bne -
	rts

; ----------------------------------------- 

movec	sei
	ldy #0
	sty pport
	sty sc_merk
-	lda (sc_vekt20),y
	lsr
	rol sc_merk
	lsr
	rol sc_merk
	lsr
	rol sc_merk
	lsr
	rol sc_merk
	sta (ls_adrmisc),y
	inc ls_adrmisc
	bne +
	inc ls_adrmisc+1
+	lda sc_merk
	sta (ls_adrmisc),y
	jsr count
	bne -
	lda #$36
	sta pport
	cli
	rts

; ----------------------------------------- Counters

count	inc sc_vekt20
	bne cou5
	inc sc_vekt20+1
cou5	inc ls_adrmisc
	bne cou6
	inc ls_adrmisc+1
cou6	lda ls_vekta8
	bne cou7
	dec ls_vekta8+1
cou7	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	rts

; ----------------------------------------- Compress Data

pack	bit null		; check current byte:
	bpl packzeros
	cmp #0		; first zero?
	beq pz0		; yes, flag it
	
	cmp gbyte		; equal to last byte?
	beq incr		; yes, just count

p255	pha		; no, save

--	lda gbyte		; get Byte
	cmp #$cf		; is Null-Marker itself?
	bne wl5		; no, is it compress marker?
-	jsr bsout		; yes, write $cf $00 (n times)
	lda #0
	jsr bsout
	dec counter
	bne --
	beq wl1
wl5	cmp #$bf		; is compress maerker itself?
	beq -		; yes, write $bf $00 (n times)

	lda counter+1	; no, at max? (256)
	bne wl0		; yes, out
	lda counter	; on start of compression?
	beq wl1		; yes, save byte and count to 1 
	cmp #4		; more than 3 equal?
	bcc wl4		; no, write n single

wl0	lda #$bf		; yes, out: $bf, counter-1, byte
	jsr bsout
	dec counter
	lda counter
	jsr bsout
	lda gbyte
	jsr bsout
	lda #0		; reset counter
	sta counter
	sta counter+1
	beq wl1		; continue compress

wl4	lda gbyte
-	jsr bsout
	dec counter
	bne -

wl1	pla
	sta gbyte

incr	inc counter
	bne wl3
	inc counter+1
	jsr p255
	lda #0
	sta counter
wl3	rts

; ----------------------------------------- 

pz0	sta null		; now count zeros
	jsr p255		; write byte before zero

packzeros	cmp gbyte		; equal to last byte?
	beq incr0		; yes, just count

pz255	pha		; no, save zero sequence
	lda count0+1	; at max? (256)
	bne wl00		; yes, out
	lda count0	; on start of compression?
	beq wl01		; yes, save zerobyte and count to 1 

	cmp #4		; more than 3 equal?
	bcc wl04		; yes, out

wl00	lda #$cf		; out: $cf, counter-1
	jsr bsout
	dec count0
	lda count0
	jsr bsout
wl02	dec null		; un-flag
	lda #0		; reset counter
	sta count0
	sta count0+1
	sta counter
	beq wl1		; continue normal compress

wl04	lda #0
-	jsr bsout
	dec count0
	bne -
	beq wl02

wl01	pla
	sta gbyte

incr0	inc count0
	bne wl03
	inc count0+1
	beq wl03
	jsr pz255		; ### 1.01
	inc null
wl03	rts

; ----------------------------------------- Namen verlängern

addsig	pha		; Länge merken
	tay
	dey
	ldx #0
ag4	lda ls_nambuf,y	; endet auf ".RUN"?
	cmp sigtx,x
	bne ag2		; nein
	dey
	inx
	cpx #4
	bcc ag4
	pla		; ja, fertig
	rts

ag2	pla
	tay		; Name länger als 12 Zeichen?
	cpy #13
	bcs ag0		; ja, behandeln

ag5	ldx #3		; nein, ".run" anhängen
ag1	lda sigtx,x
ag3	sta ls_nambuf,y
	lda sigtxs,x	; auch für Image Information
	sta ls_lastname,y
	iny
	dex
	bpl ag1
	sty wflen		; neue Länge merken, fertig
	sty ls_flen
	rts

ag0	dey		; auf 12 verkürzen
	cpy #12
	bne ag0
	beq ag5		; unbed. Sprung

; ----------------------------------------- 
; ----------------------------------------- Data
; ----------------------------------------- 

bline	!wo $0801,$0827,$07e4
	!by $9e
	!tx "2091:"
	!by $0e,$22,$14,$14,$14,$14,$14,$14,$14,$14,$14
	!tx "M. Grieb & GoDot"
	!by 0,0,0

startadd	!wo $4000	

player	!by $2c,$e0,$08,$a9,$14,$85,$5f,$a9,$09,$85,$60,$a9,$01,$85,$5a,$a9
	!by $40,$85,$5b,$a9,$ed,$85,$58,$a9,$76,$85,$59,$20,$bf,$a3,$38,$ad
	!by $29,$08,$e9,$14,$85,$fe,$ad,$2a,$08,$e9,$09,$18,$69,$40,$85,$ff
	!by $a2,$00,$86,$2d,$a2,$0a,$86,$2e,$a2,$00,$86,$fc,$a2,$40,$86,$fd
	!by $20,$ca,$08,$c9,$cf,$d0,$11,$20,$ca,$08,$c9,$00,$d0,$04,$a9,$cf
	!by $d0,$1c,$aa,$a9,$00,$4c,$b3,$08,$c9,$bf,$d0,$12,$20,$ca,$08,$c9
	!by $00,$d0,$04,$a9,$bf,$d0,$07,$aa,$20,$ca,$08,$4c,$b3,$08,$20,$d5
	!by $08,$a5,$fe,$a6,$ff,$e4,$fd,$d0,$02,$c5,$fc,$d0,$c3,$a9,$4c,$8d
	!by $2b,$08,$20,$63,$a6,$4c,$e0,$08,$e8,$a0,$00,$91,$2d,$c8,$ca,$d0
	!by $fa,$88,$98,$38,$65,$2d,$85,$2d,$90,$02,$e6,$2e,$4c,$9c,$08,$a0
	!by $00,$b1,$fc,$e6,$fc,$d0,$02,$e6,$fd,$60,$a0,$00,$91,$2d,$e6,$2d
	!by $d0,$02,$e6,$2e,$60,$a0,$2f,$b9,$ff,$13,$99,$ff,$cf,$88,$d0,$f7
	!by $a9,$00,$85,$5f,$a9,$10,$85,$60,$a9,$e8,$85,$5a,$a9,$13,$85,$5b
	!by $a9,$e8,$85,$58,$a9,$db,$85,$59,$20,$bf,$a3,$a9,$00,$85,$c6,$a5
	!by $c6,$f0,$fc,$ad,$77,$02,$4c,$69,$fe

sprites	!by $cf,$ff,$cf,$ff

;-----------------------------------------

gap	!by $cf,$11,$3b,$cf,$03
gmode	!by $08,$00,$38,$cf,$06
colors	!by $06,$0e,$cf,$dd

	!by $cf,$ff,$cf,$ff,$cf,$ff,$cf,$ff
	!by $cf,$ff,$cf,$ff,$cf,$ff,$cf,$ff
	!by $cf,$ff,$cf,$ff,$cf,$ff

;-----------------------------------------

modend	!eof


