
	!src "godotlib.lib"	; Label-Library einbinden
	*= $c000			; generelle Startadresse für alle Module
	!ct pet			; Texte werden in PETSCII assembliert

; ----------------------------------------- 
;
; svr.Pagefox.90
;     Saver für Bilder im Pagefox-Format 400x640
;
; 1.00: 14.01.94, first release
;
; ----------------------------------------- 

; -------------------------------------- Equates

	dst	= $30
	dst0	= $32
	cnt	= $34
	dbl	= $36
	vertcnt	= $37
	byte	= $39
	bitcnt	= $3a
	bcnt1	= $3b
	src	= $3c
	adcnt	= $3e
	src0	= $40
	hold	= $42
	lcnt8	= $43
	lcnt	= $44
	bcnt	= $45

	offx	= ls_adrmisc
	offy	= offx+1

	buf	= $cd00
	destbuf	= $ca00

	oszi3	= $d40e
	wave	= $d412
	filter	= $d418
	rausch	= $d41b

; ----------------------------------------- 

header 	jmp start			; Jedes Modul beginnt hiermit

	!by $40 
	!by 0
	!by 1			; Dirty Flag (1 = dirty, 0 = clean)
	!wo modend
	!wo 0			; reserviert
	!tx "PFox 90 Degrees "
	!tx "1.00"
	!tx "14.01.94"
	!tx "A.Dettke/W.Kling"

; ----------------------------------------- 

start	ldx gr_nr		; Funktionsnummer testen:
	dex
	bne st0		; Null, dann eigentlichen Saver aufrufen

	jmp initinp	; eins, dann "Input" ausführen

; ----------------------------------------- 

st0	jsr gd_sproff	; Mauszeiger aus
	lda gd_modswitch	; Memory Management
	pha

	lda ls_flen	; Filename wurde übergeben?
	beq st1		; nein (Cancel)

	sta wflen		; sonst: retten
	lda #1		; Counter für Activity setzen
	sta adcnt

	jsr wopen		; Writefile öffnen
	bne st2		; wenn Fehler: Ende

	jsr getname	; Filenamen sichern
	ldx #12		; OPEN #12, out
	jsr ckout
	jsr gd_clrms	; Statusfenster initialisieren
	ldx #0		; Anzeigetext #1 (Offset 0) eintragen und ausgeben
	stx byte
	jsr tcopy

	jsr write		; Bild speichern

st2	jsr clrch		; danach Bus freigeben
	lda #12		; Datei schließen
	jsr close
	jsr err9		; Floppystatus zeigen (sehr kurz)
	bne st1		; wenn fehlerfrei:

	jsr setname	; "Image Information"-Fenster aufbereiten

st1	pla		; dann Memory Management
	sta gd_modswitch

	jsr gd_spron	; Mauszeiger wieder an
	sec		; Leave-Flag setzen
	rts		; fertig


; --------------------------- 
; --------------------------- Input Routines (erforderlich!)
; --------------------------- 

!src "input.inc"

; --------------------------- 
; --------------------------- 
; --------------------------- 


; ----------------------------------------- 

pw	!tx "w,p,"
drinit	!tx "i0"
wflen	!by 0

wopen	jsr inull		; Initialize
	bne err8
	ldy wflen		; ",p,w" anhängen
	ldx #3
wo1	lda pw,x
	sta ls_nambuf,y
	iny
	dex
	bpl wo1
	sty wflen
	lda #12		; OPEN 12,drive,12,"name,p,w"
	tay
	ldx ls_drive
	jsr filpar
	lda wflen
	ldx #<ls_nambuf
	ldy #>ls_nambuf
	jsr filnam
	jsr copen
	jmp err9

inull	ldx #<drinit	; Initialize Drive
	ldy #>drinit
	lda #2
	jsr gd_sendcom
err9	jsr gd_xmess
	lda ls_err2
	and #15
err8 	sec
	rts

; -------------------------------------------------------------- Activity Handler

messout	ldx #<message	; Textausgabe
	ldy #>message
	jmp gd_xtxout2

tcopy	ldy #0		; Informationstextauswahl (hinter Label "txt"), Offset auf Text in .x
tc0 	lda txt,x
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0

action 	dec adcnt		; Activity, nur bei 0
	bne ld4
	lda cntwert	; dann: Reload des Zählers
	sta adcnt
	ldy offy		; Offset auf Balkenende
	cpy #25		; Ende erreicht? (Hier den gleichen Wert wie bei clrmess einsetzen!)
	bne act0
	jsr clrmess	; ja, re-Init
act0	ldx offx		; Dicke des Balkenendstücks
	lda filltab,x
	sta mess,y
	jsr messout	; Balken ausgeben
	dec offx		; Endstück nächstes Mal dicker
	bpl ld4		; bis gefüllt
	inc offy		; dann Balken selbst verlängern
	lda #7		; Endstück wieder dünn
	sta offx
ld4 	rts

clrmess	ldx #25		; Puffer für Balken löschen
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0		; Balkenlänge 0 
	ldx #7		; Dicke am Ende 0
	sty offy
	stx offx
	rts

filltab	!by 160,93,103,127,126,124,105,109

cntwert	!by 4

txt	!by $20,$50,$46,$4f,$58,$20,0

message	!fill 6,32
mess	!fill 26,32
	!by 0

; -------------------------------------------------------------- Image Info Handler

getname	ldx #0		; aktuellen Filenamen sichern
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts

setname	lda #0		; Namen in Image Info eintragen
	ldx #<ls_picname
	ldy #>ls_picname
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts

nbuf	!fill 16,32
	!by 0

; ----------------------------------------- Save Image

write	jsr pfheader	; write pagefox header

	lda gr_dither	; set dither mode
	tax
	lda dlo,x
	sta dmode
	lda dhi,x
	sta dmode+1

	lda #$80		; init randomizer
	sta filter
	sta oszi3
	sta oszi3+1
	lda #0
	sta wave
	lda #$81
	sta wave

	jsr pfoxgb	; render image to disk

	ldx #3		; add footer
m0	lda gbend,x
	jsr bsout
	dex 
	bpl m0
	sec 		; finished
	rts 

; ----------------------------------------- Render Image

pfoxgb	lda #<($b800)	; start at bottom left, proceed  upwards and right
	ldx #>($b800)
	sta src0
	sta src
	stx src0+1
	stx src+1
	lda #0
	sta dbl
	sta vertcnt

	lda #80		; 80 block lines (of 50 tiles)
	sta lcnt8
lnloop8	lda #0		; 8 pixellines each
	sta lcnt
	sta second	; set flag for left vertical pixelline

lnloop	jsr action
ads0	ldx #0		; reset buffer offset
zloop	ldy #1
	sty bcnt1
	dey 
	sty ymerk
byloop	lda #$c0		; double (horizontally)
	sta bitcnt
	lda #0
	sta byte
	ldy #4
	sty makeloop
btloop	ldy ymerk		; make 1 byte from 4 double pixels
	lda srcoffs,y
	tay 
	lda (src),y
	ldy second
	bne ll0
	lsr 
	lsr 
	lsr 
	lsr 
ll0	and #15
	tay 
	lda gr_btab,y
	jsr makebyte
	inc ymerk
	lsr bitcnt
	lsr bitcnt
	dec makeloop
	bne btloop

	sta buf,x		; into buffer
	inx 
	dec bcnt1
	bpl byloop

	lda src+1		; next tile
	sec 
	sbc #5
	sta src+1
s4	cpx #50		; 50 tiles
	bne zloop
	jsr moveline	; build horizontal pixel line (and save)

	ldx vertcnt
	inx 
	cpx #8
	bne s41
	ldx #0
s41	stx vertcnt
	lda dbl		; go for second pass?
	eor #$ff
	sta dbl
	beq newline

	lda src0		; yes, reset address
	sta src
	lda src0+1
	sta src+1
	bne ads0

newline	lda second	; otherwise go for right vertical pixelline
	eor #$ff
	sta second
	bne s5
	inc src0		; then proceed to next byte
	bne s5
	inc src0+1

s5	lda src0+1
	sta src+1
	lda src0
	sta src
	inc lcnt
	lda #8		; 8 pixellines?
	cmp lcnt
	beq s51
	jmp lnloop
s51	lda src0		; yes, next tile
	clc 
	adc #28
	sta src0
	sta src
	bcc s52
	inc src0+1
	inc src+1
s52	dec lcnt8		; 80 blocklines?
	beq done
	jmp lnloop8

done	rts 		; yes, finished

; --------------------------------------
; -------------------------------------- Dither Routines
; --------------------------------------

; -------------------------------------- Distributor

makebyte	jmp (dmode)

; -------------------------------------- Off

dithoff	cmp #8
	bpl do0
	lda #0
	!byte $2c
do0	lda bitcnt
	ora byte
	sta byte
	rts

; -------------------------------------- Ordered

dithrst	ldy vertcnt
	ora offs,y
	tay
	lda gr_orderedpat,y
	and bitcnt
	ora byte
	sta byte
	rts

; -------------------------------------- Pattern

dithpat	asl
	asl
	asl
	ora vertcnt
	tay
	lda gr_pattern,y
	and bitcnt
	ora byte
	sta byte
	rts

; -------------------------------------- Noise

dithnoi	beq dn0
	cmp #15
	beq dn1
	ldy #0
	sta hold
	lda rausch
	and #$0f
	cmp hold
	bcs dn3
	ldy #$aa
dn3	lda rausch
	and #$0f
	cmp hold
	tya
	bcs dn2
	ora #$55
dn2	!byte $2c
dn1	lda #$ff
	and bitcnt
dn0	ora byte
	sta byte
	rts

; -------------------------------------- Random

dithrnd	cmp #8
	beq dr0
	bcs dr1
	bcc dr2
dr0	lda rausch
	!byte $2c
dr1	lda bitcnt
	and bitcnt
	!byte $2c
dr2	lda #0
	ora byte
	sta byte
ml4	rts

; ----------------------------------------- 

; --------------------------------------
; -------------------------------------- Convert 1 Blockline
; --------------------------------------

moveline	lda vertcnt	; count 8 pixellines
	bne ml0

	lda #<(destbuf)	; line 0: set bufferaddress
	ldy #>(destbuf)
	sta dst0
	sty dst0+1
	bne ml2

ml0	inc dst0
ml2	lda dst0
	ldy dst0+1
	sta dst
	sty dst+1

	ldy #0		; create 1 line (50 tiles)
	ldx #0
mlup	lda buf,x
	sta (dst),y
	lda dst
	clc
	adc #8
	sta dst
	bcc ml3
	inc dst+1
ml3	inx
	cpx #50
	bne mlup

	ldy vertcnt	; 8 times (1 blockline)
	cpy #7
	bne ml4		; (RTS)

; ----------------------------------------- 

	ldx #5		; then: write 400 bytes (5x80)
	lda #<(destbuf)	; get bytes from render buffer
	ldy #>(destbuf)
	sta dst0
	sty dst0+1

	ldy #0
	sty cnt
	sty cnt+1
	sty byte
wloop	lda (dst0),y	; pack and save
	jsr pack
	iny 
	cpy #80
	bne wloop

	clc 
	lda dst0
	adc #80
	sta dst0
	bcc wl5
	inc dst0+1

wl5	ldy #0
	dex 
	bne wloop

	lda byte		; flush pack buffer
	eor #$ff

; ----------------------------------------- 

pack	cmp byte		; current is last?
	bne writeit	; no write
	jmp incr		; yes, count

writeit	pha 
	lda cnt+1		; more than 255 times?
	beq wl4

wl6	lda #$9b		; yes, Indicator: $9b
	jsr bsout
	lda #0		; counter (0 is 256 times)
	jsr bsout
	lda byte		; revert pixel and out
	eor #$ff
	jsr bsout
	dec cnt+1		; more than 511 times?
	bne wl6		; yes, one more (and so on)

wl4	lda cnt		; first pass? (0)
	beq wl1		; then count

	cmp #4		; counted more than 3?
	bcs wl0		; yes, out

	lda byte		; byte is indicator?
	cmp #$9b
	bne wl2		; no, treat as pixel

wl0	lda #$9b		; indicator out
	jsr bsout
	lda cnt		; counter out (!byte)
	jsr bsout
	lda #1		; set counter to 1
	sta cnt
	lda #0
	sta cnt+1

wl2	lda byte		; byte out (reverted)
	eor #$ff
	jsr bsout
	dec cnt		; count unpacked bytes (max. 3)
	bne wl2
	lda cnt+1		; more than 255?
	beq wl1
	dec cnt+1		; yes, loop for next
	jmp wl2

wl1	pla 		; re-get current
	sta byte

incr	inc cnt		; and count
	bne wl3
	inc cnt+1
wl3	rts 

; ---------------------------------------- Data

offs	!by $00,$10,$20,$30	; offsets for pattern "Ordered"
	!by $00,$10,$20,$30

dlo	!by <(dithoff)
	!by <(dithrst)
	!by <(dithpat)
	!by <(dithnoi)
	!by <(dithrnd)

dhi	!by >(dithoff)
	!by >(dithrst)
	!by >(dithpat)
	!by >(dithnoi)
	!by >(dithrnd)

dmode	!by 0,0
gbend	!by $bf,$20,$00,$9b	; end signature

; ----------------------------------------- Write Pagefox-Header

pfheader	ldx #3
hd0	lda pfhead,x	; "p" 640 400 "k"
	jsr bsout
	dex 
	bpl hd0
	ldx #160		; write layout data (dummy)	
hd1	lda #$ff		; (4 bytes per blockline, so: 320 bytes)
	jsr bsout
	lda #$9b
	jsr bsout
	dex 
	bne hd1
	txa 		; set pack counter to $00
	stx cnt
	stx cnt+1
	jmp bsout		; delimit header ($00)

; ----------------------------------------- 

pfhead	!by $4b,$32,$50,$50		; rückwärts: "P", Höhe:80, Breite:50, "K"

makeloop	!by 0
ymerk	!by 0
second	!by 0

srcoffs	!by $1c,$18,$14,$10,$0c,$08,$04,$00

; ----------------------------------------- 

modend 	!eof

