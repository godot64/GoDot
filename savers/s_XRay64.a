
!src "godotlib.lib"
*	= $c000

; ----------------------------------------- 
; svr.XRay64
;     Saver for the PC based C64 IFLI format of XRay64.
;     XRay64 provides an own IFLI display routine which
;     the images carry with them.
;
; 1.00, 10.07.05 - First release
; 1.01, 27.07.05 - bugfix, changed wrong call to CLOSE near ST2
; 1.02, 18.08.05 - bugfix, filenames may have 16 chars now
; 1.03, 16.11.16 - added module management flag in start near st0 and st1
;
; ----------------------------------------- 


; ----------------------------------------- Equates

	gbyte		= $30
	cnt		= $31
	src		= $32
	src3		= $34
	dst		= src3
	adcnt		= $3e
;

	offx		= $b2
	offy		= $b3

	hist		= $3f40
	hist0		= hist+16
	htab		= hist0+32

	c64		= $bd00
	hist3		= $be00
	cram		= $cb00

; ----------------------------------------- Header

header	jmp start
	!by $40
	!by 0
	!by 1
	!wo modend
	!wo 0
	!pet "XRay64 IFLI bg=0"
ver	!pet "1.02"
	!pet "18.08.05"
	!pet "A.Dettke/W.Kling"
addtxt	!pet "!GoDot XRay64 Saver "
ver1	!pet "x.xx"
	!by 0
;
; ----------------------------------------- Main

start	ldx gr_nr
	dex
	bne st0
	jmp initinp
;
; ----------------------------------------- XRay

st0	jsr gd_sproff	; mouse off
	lda gd_modswitch	; care for module management
	pha

	lda ls_flen	; file selected?
	beq st1		; no

	sta wflen
	lda #1
	sta adcnt
	jsr wopen		; open file
	bne st2
	jsr getname
	ldx #12
	jsr ckout
	jsr gd_clrms
	jsr writexr	; save xray
st2	jsr clrch
	lda #12
	jsr close
	jsr err9
	bne st1
	jsr setname

st1	pla
	sta gd_modswitch	; module management
	jsr gd_spron	; mouse on
cn2	sec
	rts

; --------------------------- 
; --------------------------- Input Routines

!src "input.inc"

; --------------------------- 
; --------------------------- 

; ----------------------------------------- Drives

pw	!pet "w,p,"
drinit	!pet "i0"
wflen	!by 0
;
wopen	jsr inull
	bne err8
	ldy wflen
wo2	ldx #3
wo1	lda pw,x
	sta ls_nambuf,y
	iny
	dex
	bpl wo1
	sty wflen

	lda #12
	tay
	ldx ls_drive
	jsr filpar
	lda wflen
	ldx #<(ls_nambuf)
	ldy #>(ls_nambuf)
	jsr filnam
	jsr copen
	jmp err9
;
inull	ldx #<(drinit)
	ldy #>(drinit)
	lda #2
	jsr gd_sendcom
err9	jsr gd_xmess
	lda ls_err2
	and #15
err8	sec
	rts
;
; ----------------------------------------- Messages

messout	ldx #<(message)
	ldy #>(message)
	jmp gd_xtxout2
;
tcopy	ldy #0
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0
;
action	dec adcnt
	bne ld4
	lda cntwert
	sta adcnt
	ldy offy
	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	rts
;
clrmess	ldx #20
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts
;
filltab	!by 160,93,103,127,126,124,105,109
;
cntwert	!by 210		;109
;
txt	!scr " writing.. @"
making	!scr "Making histograms.@"
;
message	!fill 11,32
mess	!fill 21,32
	!by 0
;
; ----------------------------------------- Image Info

getname	ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts
;
setname	lda #0
	ldx #<(ls_picname)
	ldy #>(ls_picname)
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts
;
nbuf	!fill 16,32
	!by 0

; ----------------------------------------- Save XRay64
;
;   write interlace fli
;
; -----------------------------------------

writexr	ldx #<(making)	; "Making Histograms."
	ldy #>(making)
	jsr gd_xtxout2
	jsr makec64
;
	ldy #0		; write header (470 bytes)
whdl	lda xrheader,y
	jsr bsout
	iny
	bne whdl
;
	ldy #0		; write header/ main colors (black/black)
whdl2	lda xrheader2,y
	jsr bsout
	iny
	cpy #214
	bne whdl2
;
	ldy #3		; preparations
prepl	lda mask1,y
	sta mask,y
	lda ver,y
	sta ver1,y
	dey
	bpl prepl
;
	lda #32
	sta col0+4
	sta maxcol
;
	lda #<($4000)	; render image to disk
	ldx #>($4000)
	sta src
	stx src+1
	lda #<(cram)	; first create color ram
	ldx #>(cram)
	sta dst
	stx dst+1
loop3	ldy #15		; histogram for each tile, find 3 colors
	lda #0
ch1	sta hist,y
	dey
	bpl ch1
	lda #8
	sta blcnt
blloop	ldx #0
	ldy #0
	lda (src),y	;0
	sta hmbuf
	beq hms1
	inx
hms1	iny
	lda (src),y	;1
	sta hmbuf+1
	beq hms2
	cmp hmbuf
	beq hms2
	inx
hms2	iny
	lda (src),y	;2
	sta hmbuf+2
	beq hms3
	cmp hmbuf
	beq hms3
	cmp hmbuf+1
	beq hms3
	inx
hms3	iny
	lda (src),y	;3
	beq hms4
	cmp hmbuf
	beq hms4
	cmp hmbuf+1
	beq hms4
	cmp hmbuf+2
	beq hms4
	inx
hms4	cpx #3		; more than 2?
	bcc s8
	ldy #3		; yes, plain color?
hl3	lda (src),y
	and #$0f
	tax
	lda (src),y
	cmp dnib,x
	bne s71
	inc hist0,x	; yes, count
s71	dey
	bpl hl3
s8	lda src		; next 4
	clc
	adc #4
	sta src
	bcc s9
	inc src+1
s9	dec blcnt		; block finished?
	bne blloop	; no, loop
	
	lda #0
	ldx #32
	sta max
	stx maxcol
	ldy #15		; find most frequent color...
m3	lda hist0,y
	beq s10
	cmp max
	beq s10
	bcc s10
	sta max
	sty maxcol
s10	dey
	bpl m3
	lda maxcol	; ...and set it.
	ldy #0
	sta (dst),y

	inc dst		; check all
	bne s11
	inc dst+1
s11	lda src+1
	cmp #$bd
	beq ok3		; then save image
	jmp loop3
	
; ----------------------------------------- Save

ok3	jsr gd_clrms	; "Writing..."
	ldx #0
	jsr tcopy
;
	lda #0		; first the high nybbles
	sta nibflg
	jsr writefli	; video rams/bitmap 1
;
	ldy #192		; fill gap
	jsr write0
;
	jsr writecram	; color ram (1000 bytes)
;
	lda #$ff		; then the low nybbles
	sta nibflg
	jsr writefli	; video rams/bitmap 2
;
	ldy #192		; fill gap
	jsr write0
;
ende	sec
	rts
;
; ----------------------------------------- Colorram 1000 bytes

writecram	lda #<(cram)
	ldx #>(cram)
	sta src3
	stx src3+1
	lda #4
	sta crcnt
wcrl0	ldy #0
wcrl	lda (src3),y
	tax
	lda c64,x
	and #15
	jsr write
	iny
	cpy #250
	bne wcrl
	lda src3
	clc
	adc #250
	sta src3
	bcc wcrs
	inc src3+1
wcrs	dec crcnt
	bne wcrl0
	rts
;
; ----------------------------------------- Video rams 8 x 1024 bytes

writefli	lda #0
	sta data
;
	sta vrcnt		; counter (to 8)
vrloop	lda vrcnt
	ldx #>($4000)
	sta src
	stx src+1
	lda #<(cram)
	ldx #>(cram)
	sta src3
	stx src3+1

loop12	ldy #15		; handle one scanline
	lda #0
ch3	sta hist,y
	dey
	bpl ch3
	ldy #3
hl4	lda (src),y
	bit nibflg
	bmi lonib1
	lsr
	lsr
	lsr
	lsr
lonib1	and #$0f
	tax
	inc hist,x
	dey
	bpl hl4
	lda #0		; $00 is background color
	tax
	sta hist,x
	tay
	lda (src3),y	; first color
	tax
	cpx #32
	beq s12
	lda #0
	sta hist,x
s12	sty max
	stx col0+3
	lda #32
	sta col0+1
	ldy #15
m1	lda hist,y	; second color
	beq s13
	cmp max
	beq s13
	bcc s13
	sta max
	sty col0+1
s13	dey
	bpl m1
	lda col0+1	; third color
	cmp #32
	beq s14
	tax
	lda #0
	sta hist,x
	sta max
	ldy #15
m2	lda hist,y
	beq s15
	cmp max
	beq s15
	bcc s15
	sta max
	sty col0+2
s15	dey
	bpl m2
s14	lda col0+1
	asl
	asl
	asl
	asl
	ora col0+2
	tax
	lda c64,x
;
	jsr write		; save color found
;
	inc src3		; next block
	bne s16
	inc src3+1
s16	lda src
	clc
	adc #32
	sta src
	bcc s17
	inc src+1
s17	lda src+1
	cmp #$bd		; up to end of buffer
	beq s18
	jmp loop12
;
s18	ldx #0		; add signature "! GoDot XRay saver x.xx"
l24	lda addtxt,x
	jsr write
	inx
	cpx #24
	bne l24
;
	lda vrcnt
	clc
	adc #4
	sta vrcnt
	cmp #32
	beq ok12
	jmp vrloop
;
; ----------------------------------------- Bitmap 8000 bytes

ok12	lda #<($4000)
	ldx #>($4000)
	sta src
	stx src+1
	lda #<(cram)
	ldx #>(cram)
	sta src3
	stx src3+1
bmloop	lda #8
	sta zlcnt
zlloop	ldy #15
	lda #0
ch4	sta hist,y
	dey
	bpl ch4
	ldy #3
hl5	lda (src),y
	bit nibflg
	bmi lonib2
	lsr
	lsr
	lsr
	lsr
lonib2	and #$0f
	tax
	inc hist,x
	lda bits,y	; set multi pattern
	sta nr0,y
	lda #32
	sta col0,y
	dey
	bpl hl5
	lda #0
	tax
	sta hist,x
	stx col0
	ldy #0
	lda (src3),y
	cmp #32
	beq s19
	tax		; third color
	tya
	sta hist,x
	stx col0+3
s19	sty max
	ldy #15		; first color
m11	lda hist,y
	beq s20
	cmp max
	beq s20
	bcc s20
	sta max
	sty col0+1
s20	dey
	bpl m11
	lda col0+1
	cmp #32
	beq s21
	tax
	lda #0
	sta hist,x
	sta max
	ldy #15		; second color
m21	lda hist,y
	beq s22
	cmp max
	beq s22
	bcc s22
	sta max
	sty col0+2
s22	dey
	bpl m21
	
s21	ldx #0		; sort colors
lx	stx xbuf
	ldy #3
ly	lda col0,x
	cmp col0,y
	bcc s23
	beq s23
	pha
	lda col0,y
	sta col0,x
	pla
	sta col0,y
	lda nr0,x
	pha
	lda nr0,y
	sta nr0,x
	pla
	sta nr0,y
s23	dey
	cpy xbuf
	bne ly
	inx
	cpx #3
	bne lx
	
	ldy #$ff		; optimize per spreading table
	sty hstart
htl	iny
	lda col0,y
	clc
	adc col0+1,y
	lsr
	cmp #16
	bcc s24
	lda #15
s24	sta hend
	lda nr0,y
	ldx hstart
htl1	inx
	sta htab,x
	cpx hend
	bcc htl1
	cpx #15
	bcs s25
	stx hstart
	cpy #3
	bne htl
s25	lda #0
	sta byte
	ldy #3
rl	lda (src),y
	bit nibflg
	bmi lonib3
	lsr
	lsr
	lsr
	lsr
lonib3	and #$0f
	tax
	lda htab,x
	and mask,y
	ora byte
	sta byte
	dey
	bpl rl
;
	jsr write		; save bit pattern
;
	lda src		; next
	clc
	adc #4
	sta src
	bne s26
	inc src+1
s26	dec zlcnt
	beq s27
	jmp zlloop
s27	inc src3
	bne s28
	inc src3+1
s28	lda src+1
	cmp #$bd
	beq ok121
	jmp bmloop
ok121	rts
;
; ----------------------------------------- Write gaps

write0	lda #0
	jsr bsout
	dey
	bne write0
	rts
;
; ----------------------------------------- Data
;
dnib	!by $00,$11,$22,$33,$44,$55,$66,$77
	!by $88,$99,$aa,$bb,$cc,$dd,$ee,$ff
;
bits	!by $00,$55,$aa,$ff
;
mask1	!by $c0		;11000000
	!by $30		;00110000
	!by $0c		;00001100
	!by $03		;00000011
;
; ----------------------------------------- Write data and show gauge

write	pha
	txa
	pha
	tya
	pha
	jsr action
	pla
	tay
	pla
	tax
	pla
	jmp bsout
;
; ----------------------------------------- Create IFLI color table

makec64	ldy #0
mc64	tya
	lsr
	lsr
	lsr
	lsr
	tax
	lda cols64,x
	and #$f0
	sta bbuf
	tya
	and #$0f
	tax
	lda cols64,x
	and #$0f
	ora bbuf
	sta c64,y
	iny
	bne mc64
	rts
;
; ----------------------------------------- GoDot palette

cols64	!by $00,$66,$99,$bb
	!by $22,$44,$88,$cc
	!by $ee,$aa,$55,$ff
	!by $33,$77,$dd,$11
;
; ----------------------------------------- variables

comp0	!by 0
col0	!by 0,0,0,0,0
nr0	!by 0,0,0,0
mask	!by 0,0,0,0
max	!by 0,0
maxcol	!by 0
bbuf	!by 0
xbuf	!by 0
blcnt	!by 0
vrcnt	!by 0
zlcnt	!by 0
hstart	!by 0
hend	!by 0
byte	!by 0
data	!by 0
crcnt	!by 0
nibflg	!by 0
hmbuf	!by 0,0,0
;
xrheader	!by $01,$08,$0B,$08,$00,$00,$9E,$32,$30,$36,$34,$00,$00,$00,$00,$00
	!by $00,$78,$E6,$01,$A9,$BD,$85,$FA,$A9,$8C,$85,$FB,$A9,$00,$85,$FC
	!by $A9,$FF,$85,$FD,$A0,$00,$B1,$FA,$91,$FC,$C8,$D0,$F9,$C6,$FB,$C6
	!by $FD,$A5,$FD,$C9,$BE,$D0,$EF,$A9,$D3,$85,$FA,$A9,$4D,$85,$FB,$A9
	!by $FE,$85,$FC,$A9,$83,$85,$FD,$A0,$00,$B1,$FA,$91,$FC,$C8,$D0,$F9
	!by $C6,$FB,$C6,$FD,$A5,$FD,$C9,$3E,$D0,$EF,$C6,$01,$A9,$0B,$8D,$11
	!by $D0,$A9,$FF,$CD,$12,$D0,$D0,$FB,$A9,$22,$8D,$FE,$FF,$A9,$09,$8D
	!by $FF,$FF,$A9,$7F,$8D,$0D,$DC,$AD,$0D,$DC,$A9,$01,$8D,$1A,$D0,$8D
	!by $19,$D0,$A9,$24,$8D,$1D,$D0,$8D,$12,$D0,$A9,$35,$85,$01,$A9,$37
	!by $8D,$FA,$FF,$A9,$09,$8D,$FB,$FF,$A9,$D8,$8D,$16,$D0,$85,$09,$AD
	!by $00,$DD,$29,$FC,$09,$02,$8D,$00,$DD,$85,$05,$AD,$FF,$3F,$8D,$21
	!by $D0,$AD,$FE,$3F,$8D,$20,$D0,$A9,$00,$8D,$15,$D0,$85,$08,$20,$DB
	!by $08,$20,$04,$09,$78,$A9,$01,$8D,$19,$D0,$58,$A5,$08,$F0,$FC,$78
	!by $A9,$37,$85,$01,$A9,$00,$8D,$00,$DE,$6C,$FC,$FF,$A2,$00,$8A,$29
	!by $07,$A8,$B9,$C3,$09,$9D,$00,$0B,$B9,$CB,$09,$9D,$00,$0C,$E8,$E0
	!by $C8,$D0,$EB,$60,$A9,$7F,$8D,$00,$DC,$AD,$01,$DC,$C9,$FF,$F0,$04
	
xrheader2	!by $A9,$01,$85,$08,$60,$A2,$00,$BD,$00,$80,$9D,$00,$D8,$BD,$00,$81
	!by $9D,$00,$D9,$BD,$00,$82,$9D,$00,$DA,$BD,$00,$83,$9D,$00,$DB,$E8
	!by $D0,$E5,$60,$85,$02,$86,$03,$84,$04,$EE,$19,$D0,$20,$38,$09,$20
	!by $F3,$08,$A5,$02,$A6,$03,$A4,$04,$40,$A5,$05,$49,$02,$85,$05,$8D
	!by $00,$DD,$A5,$09,$49,$01,$8D,$16,$D0,$85,$09,$A9,$1B,$8D,$11,$D0
	!by $A9,$2C,$CD,$12,$D0,$D0,$FB,$A2,$09,$CA,$D0,$FD,$EA,$EA,$AD,$12
	!by $D0,$C9,$2D,$D0,$00,$A2,$0A,$CA,$D0,$FD,$EA,$EA,$AD,$12,$D0,$C9
	!by $2E,$D0,$00,$A2,$0A,$CA,$D0,$FD,$EA,$EA,$AD,$12,$D0,$C9,$2F,$D0
	!by $00,$A2,$0A,$CA,$D0,$FD,$EA,$EA,$AD,$12,$D0,$C9,$30,$D0,$00,$A2
	!by $0A,$CA,$D0,$FD,$EA,$EA,$AD,$12,$D0,$C9,$31,$D0,$00,$A2,$0A,$CA
	!by $D0,$FD,$EA,$EA,$AD,$12,$D0,$C9,$32,$D0,$00,$A2,$0A,$CA,$D0,$FD
	!by $A2,$00,$BD,$00,$0C,$8D,$18,$D0,$BD,$00,$0B,$8D,$11,$D0,$E8,$E0
	!by $C8,$D0,$EF,$60,$3B,$34,$35,$36,$37,$38,$39,$3A,$08,$18,$28,$38
	!by $48,$58,$68,$78

; border and background colors

	!by $00,$00

modend	!eof

