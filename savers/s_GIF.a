
	!src "godotlib.lib"	; Label-Library einbinden
	*= $c000		; generelle Startadresse für alle Module
	!ct pet		; Texte werden in PETSCII assembliert

; ----------------------------------------- 
;
; svr.GIF
;     Saver for CompuServe Graphics Interchange Format (GIF)
;
; 0.99: ?        - first release
; 1.00: ?
; 1.01: 27.06.98 - Fehlerkorrekturen
; 1.02: 11.10.01 - Verhindern des Überschreitens der Codelänge 12
;	         Abfrage, ob REU vorhanden
; 1.03: 12.10.01 - Einbau verschiedener Paletten
;	         Möglichkeit, Clips zu speichern
; 1.04: 02.12.03 - added: palette used in Wheels OS
; 1.05: 05.12.03 - palette "VICE" added
; 1.06: 14.11.16 - check auf Vorhandensein von ".gif"
;                  ".gif" in richtigem Zeichensatz anhängen
; 1.07: 17.11.16 - Palette "Deekay" korrigiert
; 1.08: 18.11.16 - Palette "Coco" (Community Colors) zugefügt
; 1.09: 05.04.17 - Palette "Colodore" zugefügt
; 1.10: 05.04.19 - Kommentar im Bildfile zugefügt ("gespeichert mit GoDot")
; 1.11: 08.08.19 - Default Aspect Ratio festgelegt (1:1)
; 1.12: 01.08.21 - Palette Brix gegen Ptoing ausgetauscht
; 1.13: 31.03.22 - Palette Wheels gegen PALette_v1 ausgetauscht
;
; -------------------------------------------------------------- Header
;
 	jmp start
;
	!by $40 			; $80=Lader, $40=Saver, $20=Modifier
	!by 0			; Own Requester Flag (4 = present)
	!by 1			; Dirty Flag (1 = dirty)
	!wo modend		; Endadresse+1 des Moduls
	!wo 0			; unused
	!pet "GIF 89a saver   "	; description
cvers	!pet "1.13"		; Versionsnummer
	!pet "31.03.22"		; Datum
	!pet "A.Dettke        "	; author

; -------------------------------------------------------------- Definitionen

	maxi	= $fe
	outcnt	= maxi+1

	outcode	= $30
	cnt1byte	= $31
	currbits	= $32
	mask1	= $33
	mask2	= $34
	nextcode	= $35
	outindex	= $36
	colcount	= $37
	xstore	= $38
	ystore	= $39
	tab1vek	= $3a
	tab2vek	= $3c
	now2code	= $3e
	last2code	= $3f
	ctabvek	= $40
	codebyte	= $42
	codetemp	= $43
	addrtemp	= $44
	src0	= $46
	clpbr	= $48
	clpho	= $49
	lcnt	= $4a
	lcnt8	= $4b
	adcnt	= $4c
	offy	= $4f
	offx	= $50
	clpzl	= $51
	clpsp	= $52
	tilecnt	= $53

	table1	= $4000
	table2	= $8000
	table3	= $7000

; -------------------------------------------------------------- 

start	ldx gr_nr		; Funktionsnummer testen
	dex
	bne st0		; Null, dann "Speichern"
	jmp initinp	; eins, "Input"

; -------------------------------------------------------------- Encode

sk12	jmp noreu

; -------------------------------------------------------------- 

st0	lda ls_ramdrive	; REU angeschlossen?
	and #15
	cmp #9
	beq sk12		; nein, gar kein Ram
	cmp #7		; nur SuperRAM?
	beq sk12		; ja, skip Rest
	and #12
	beq sk12		; kein REU, skip Rest

	lda #<320		; 320x200 vorbesetzen
	sta width1
	sta width2
	lda #>320
	sta width1+1
	sta width2+1
	lda #200
	sta height1
	sta height2
	lda #0
	sta height1+1
	sta height2+1
	sta filepos
	lda #$10
	sta filepos+1

	jsr requester	; display requester
	lda used		; cancelled?
	cmp #3
	bcs st12

st11	jsr gd_sproff	; Sprites aus
	lda gd_modswitch	; Slot retten
	pha
	lda ls_flen	; Filename übergeben?
	beq st1		; nein

	sta wflen		; sonst: retten
	jsr addgif	; Namen erweitern
	lda #1		; Counter für Activity setzen
	sta adcnt
	sta cntwert
	lda #9		; Undo-Kommando vorbereiten
	sta getundo+1

	ldx #3		; Versionsnummer eintragen	### 1.10
-	lda cvers,x
	sta version,x
	dex
	bpl -

	jsr wopen		; Writefile öffnen
	bne st2		; wenn Fehler: Ende
	jsr getname	; Filenamen sichern
	ldx #12		; OPEN #12, out
	jsr ckout
	jsr gd_clrms	; Anzeige initialisieren
	ldx #0		; Text eintragen
	jsr tcopy
	jsr write		; Bild speichern

st2	jsr clrch		; Bus freigeben
	lda #12
	jsr close
	jsr err9		; Floppystatus zeigen (kurz)
	bne st1		; wenn fehlerfrei:
	jsr setname	; Fileinfo aufbereiten

st1	pla		; Modularea wieder setzen
	sta gd_modswitch

st12	jsr canc
	jsr gd_spron	; Sprites wieder an
	sec		; Leave-Flag
	rts		; fertig

; --------------------------- 
; --------------------------- Input Routines

!src "input.inc"

; --------------------------- 
; --------------------------- 

; --------------------------- Disk Access

pw	!pet "w,p,"
giftx	!pet "fig."
giftxs	!scr "fig."
drinit	!pet "i0"
wflen	!by 0
used	!by $ff
gadoffs	!by 9,19,29,39,49,59,69,79,89
gadoffs2	!by 3,7
palflag	!by 0
areaflag	!by $ff
filepos	!wo $1000

paltxts	!scr "  GoDot   "	; 0
	!scr "   CoCo   "	; 10	# 1.08 Community Colors
	!scr " Colodore "	; 20	# 1.09 
	!scr "  Pepto   "	; 30
	!scr "  Deekay  "	; 40
	!scr "  Ptoing  "	; 50	# 1.12
	!scr "   VICE   "	; 60	# 1.05
	!scr "PALette v1"	; 70	# 1.13
	!scr "  Gray16  "	; 80
areatxts	!scr "Full" ; 0
	!scr "Clip" ; 4

palgodot	!by $00,$00,$00,$00,$00,$aa,$66,$44,$00,$33,$33,$33
	!by $88,$00,$00,$cc,$44,$cc,$dd,$88,$55,$77,$77,$77
	!by $00,$88,$ff,$ff,$77,$77,$00,$cc,$55,$bb,$bb,$bb
	!by $aa,$ff,$ee,$ee,$ee,$77,$aa,$ff,$66,$ff,$ff,$ff
palvici	!by $00,$00,$00,$32,$2d,$ab,$52,$3d,$01,$4e,$4e,$4e	; # 1.13 ---
	!by $8a,$32,$3d,$8d,$36,$a1,$8e,$50,$1a,$76,$76,$76
	!by $6b,$66,$e4,$bc,$63,$6e,$4b,$a6,$48,$a3,$a3,$a3
	!by $67,$bf,$b3,$cd,$d2,$56,$8e,$e9,$8b,$ff,$ff,$ff	;  --- # 1.13
palpepto	!by $00,$00,$00,$35,$28,$79,$43,$39,$00,$44,$44,$44
	!by $68,$37,$2b,$6f,$3d,$86,$6f,$4f,$25,$6c,$6c,$6c
	!by $6c,$5e,$b5,$9a,$67,$59,$58,$8d,$43,$95,$95,$95
	!by $70,$a4,$b2,$b8,$c7,$6f,$9a,$d2,$84,$ff,$ff,$ff
paldeekay	!by $00,$00,$00,$1a,$0c,$92,$44,$1e,$00,$46,$46,$46	; # 1.07 --- Palette korrigiert
	!by $68,$37,$2b,$a7,$3b,$9f,$a9,$4b,$02,$8b,$8b,$8b
	!by $4d,$91,$d1,$d2,$80,$74,$4d,$ab,$19,$ba,$ba,$ba
	!by $65,$cd,$a8,$eb,$e3,$53,$8e,$f6,$8e,$ff,$ff,$ff	; # 1.07 ---
palptoing	!by $00,$00,$00,$3e,$31,$a2,$57,$42,$00,$54,$54,$54
	!by $8c,$3e,$34,$8d,$47,$b3,$90,$5f,$25,$80,$80,$80
	!by $7c,$70,$da,$bb,$77,$6d,$68,$a9,$41,$ab,$ab,$ab
	!by $7a,$bf,$c7,$d0,$dc,$71,$ac,$ea,$88,$ff,$ff,$ff
palgray	!by $00,$00,$00,$11,$11,$11,$22,$22,$22,$33,$33,$33
	!by $44,$44,$44,$55,$55,$55,$66,$66,$66,$77,$77,$77
	!by $88,$88,$88,$99,$99,$99,$aa,$aa,$aa,$bb,$bb,$bb
	!by $cc,$cc,$cc,$dd,$dd,$dd,$ee,$ee,$ee,$ff,$ff,$ff
palvice	!by $00,$00,$00,$21,$1b,$ae,$6a,$33,$04,$42,$45,$40	; # 1.05 ---
	!by $be,$1a,$24,$b4,$1a,$e2,$b8,$41,$04,$70,$74,$6f
	!by $5f,$53,$fe,$fe,$4a,$57,$1f,$d2,$1e,$a4,$a7,$a2
	!by $30,$e6,$c6,$df,$d6,$0a,$59,$fe,$59,$fd,$fe,$fc	; # 1.05 ---
palcoco	!by $00,$00,$00,$37,$39,$c4,$68,$38,$08,$4d,$4d,$4d	; # 1.08 ---
	!by $af,$2a,$29,$b0,$3f,$b6,$b6,$59,$1c,$84,$84,$84
	!by $70,$7c,$e6,$ea,$74,$6c,$4a,$c6,$4a,$b6,$b6,$b5
	!by $62,$d8,$cc,$e4,$ed,$4e,$a6,$fa,$9e,$ff,$ff,$ff	; # 1.08 ---
palcolod	!by $00,$00,$00,$2d,$2b,$9a,$54,$37,$00,$49,$49,$49	; # 1.09 ---
	!by $81,$33,$37,$8d,$3b,$97,$8d,$50,$29,$7b,$7b,$7b
	!by $6f,$6d,$eb,$c3,$6c,$71,$55,$aa,$4c,$b1,$b1,$b1
	!by $75,$ce,$c8,$ed,$f0,$71,$a9,$fe,$9f,$ff,$ff,$ff	; # 1.09 ---

; -------------------------------------------------------------- Filehandling

wopen	jsr inull		; Initialize
	bne err8
	ldy wflen		; ",p,w" anhängen
	ldx #3
wo1	lda pw,x
	sta ls_nambuf,y
	iny
	dex
	bpl wo1
	sty wflen
	lda #12		; OPEN 12,drive,12,"name,p,w"
	tay
	ldx ls_drive
	jsr filpar
	lda wflen
	ldx #<ls_nambuf
	ldy #>ls_nambuf
	jsr filnam
	jsr copen
	jmp err9

inull	ldx #<drinit
	ldy #>drinit
	lda #2
	jsr gd_sendcom
err9	jsr gd_xmess
	lda ls_err2
	and #15
err8 	sec
	rts

; -------------------------------------------------------------- Activity

messout	ldx #<message	; Textausgabe
	ldy #>message
	jmp gd_xtxout2

tcopy	ldy #0		; Text zur Ausgabe puffern
tc0 	lda txt,x		; Offset in .x!
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0

action	dec adcnt		; Activity, wenn 0
	bne ld4
	lda cntwert	; dann: Reload des Zählers
	sta adcnt
	ldy offy		; Offset auf Balkenende
	ldx offx		; Dicke des Balkenendes
	lda filltab,x
	sta mess,y
	jsr messout	; Balken ausgeben
	dec offx		; Ende nächstes Mal dicker
	bpl ld4		; bis gefüllt
	inc offy		; dann Balken länger
	lda #7		; Ende wieder dünn
	sta offx
ld4 	rts

clrmess	ldx #25		; Puffer für Balken löschen
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0		; Balkenlänge 0 
	ldx #7		; Dicke am Ende 0
	sty offy
	stx offx
	rts

filltab	!by 160,93,103,127,126,124,105,109
cntwert	!by 1
txt	!scr " 89a"
	!by 0
message	!fill 6,32
mess	!fill 26,32
	!by 0

; -------------------------------------------------------------- Image Info

getname	ldx #0		; aktuellen Filenamen sichern
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts

setname	lda #0		; Namen in Image Info eintragen
	ldx #<ls_picname
	ldy #>ls_picname
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts

nbuf	!fill 16,32
	!by 0

; ----------------------------------------- Startup requester

requ 	inc used
	ldx #<sgiflst
	ldy #>sgiflst
	jsr gd_xmloop

; ----------------------------------------- Requester management

requester	ldx used
	bmi requ
	rts

; ----------------------------------------- Leave saver

cn2 	lda #3
	!by $2c
canc 	lda #$ff
	sta used
	sec
	rts

; ------------------------------------ Event: Choose Palette

evpalette	lda palflag
	cmp #8
	bne dp0
	lda #$ff
	sta palflag
dp0	inc palflag
	jsr setpalette
	ldx palflag
	lda gadoffs,x
	tax
	ldy #9
dpi1	lda paltxts,x
	sta paltx,y
	dex
	dey
	bpl dpi1
	ldy #0
dpi2	jsr settext
	ldy #6
	jmp gd_xtxout1

; ------------------------------------ Event: Choose area

evarea	lda areaflag
	bmi ea0
	lda #$fe
	sta areaflag
ea0	inc areaflag
	beq ea1
	ldx #3
	!by $2c
ea1	ldx #7
	ldy #3
ea2	lda areatxts,x
	sta areatx,y
	dex
	dey
	bpl ea2
	ldy #2
	bne dpi2

; ----------------------------------------- Set Save GIF data parameters

evsavgif	inc used
	jsr setclip
	jsr setvals
	sec
	rts

; ------------------------------------ Output gadget text routines

tabigad	!wo palgad
	!wo areagad

settext	lda #<tabigad
	sta ls_vekta8
	lda #>tabigad
	sta ls_vekta8+1

	lda (ls_vekta8),y
	sta sc_screentab
	iny
	lda (ls_vekta8),y
	sta sc_screentab+1
	lda #0
	tax
	tay
gt0	jsr gd_setpos
	cpx #3
	bne gt0
	stx sc_ho
	jsr gd_trim
	jmp gd_initmove

; ----------------------------------------- Convert to Binary

convert	sta sc_pos	; value times 8
	sty sc_pos+1
	clc
	asl sc_pos
	rol sc_pos+1
	asl sc_pos
	rol sc_pos+1
	asl sc_pos
	rol sc_pos+1
	ldx sc_pos
	lda sc_pos+1
	rts

; ----------------------------------------- Set file values for width and height

setvals	ldy #0		; width
	lda clpbr
	jsr convert	; convert to binary 
	stx width1
	stx width2
	sta width1+1
	sta width2+1

	ldy #0		; height
	lda clpho
	jsr convert	; convert to binary
	stx height1
	stx height2
	sta height1+1
	sta height2+1

	rts

; ----------------------------------------- Set palette values

setpalette
	ldx palflag	; 0: GoDot
	bne spl01
	lda #<palgodot
	ldx #>palgodot
	bne spl5		; 	# 1.08 ---
spl01	dex		; 1: CoCo
	bne spl02
	lda #<palcoco
	ldx #>palcoco
	bne spl5		;         # 1.09 ---
spl02	dex		; 2: Colodore
	bne spl1
	lda #<palcolod
	ldx #>palcolod
	bne spl5
spl1	dex		; 3: Pepto
	bne spl2
	lda #<palpepto
	ldx #>palpepto
	bne spl5
spl2	dex		; 4: Deekay
	bne spl3
	lda #<paldeekay
	ldx #>paldeekay
	bne spl5
spl3	dex		; 5: Ptoing
	bne spl31		;    # 1.12
	lda #<palptoing
	ldx #>palptoing
	bne spl5		; 	# 1.05 ---
spl31	dex		; 6: Vice
	bne spl0
	lda #<palvice
	ldx #>palvice
	bne spl5
spl0	dex		; 7: PALettev1
	bne spl41		;    # 1.13
	lda #<palvici
	ldx #>palvici
	bne spl5
spl41	lda #<palgray	; 8: Gray16
	ldx #>palgray	; 	# 1.05 ---

spl5	sta sc_pos
	stx sc_pos+1
	ldy #47
spl6	lda (sc_pos),y
	sta palette,y
	dey
	bpl spl6
	rts

; ---------------------------------------- Compute Start address of Clip

setclip	lda #$10		; 4Bit starting from $1000 in REU
	sta filepos+1
	ldy #0
	sty filepos
	sty clpzl
	sty clpsp
	lda #40
	sta clpbr
	lda #25 
	sta clpho
	lda areaflag 
	bmi scp8

	lda sc_lastclpzl	; row
	beq scp1		; is zero: skip
	sta clpzl
scp4	clc
	lda filepos+1	; else add 1280, "row" times
	adc #5
	sta filepos+1
	dec clpzl
	bne scp4

scp1	lda sc_lastclpsp	; column
	beq scp5		; is zero: skip
	sta clpsp
scp6	clc
	lda filepos	; else add 32, "column" times
	adc #$20
	sta filepos
	bcc scp7
	inc filepos+1
scp7	dec clpsp
	bne scp6
scp5	 lda sc_lastclpbr
	sta clpbr
	lda sc_lastclpho
	sta clpho
scp8	rts

; ----------------------------------------- Screenlist

sgiflst	!by 0
	!by 4,11,18,14,$81,0,0
	!scr "Save GIF@"
palgad	!by 9,11,18,3,$ca
	!wo evpalette
paltx	!scr "  GoDot   @"
areagad	!by 11,23,6,3,$ce
	!wo evarea
areatx	!scr "Full@"
	!by 13,11,18,3,$cb
	!wo evsavgif
	!scr "Save Image@"
	!by 15,11,18,3,$cb
	!wo cn2
	!scr "Cancel Save@"
	!by $c0,7,12,15
	!scr "Select Palette:@"
	!by $c0,11,12,10
	!scr "Save Area:@"
	!by $80

; -------------------------------------------------------------------------
; -------------------------------------------------------------- Write GIF
; -------------------------------------------------------------------------

write	ldx #0		; Header ausgeben (Länge: 108 Bytes)
wr0	lda gifheader,x
	jsr bsout
	inx
	cpx #109		; ### 1.10
	bne wr0

	lda #9		; Funktion "Undo ins Ram" setzen
	sta getundo+1
	jsr doundo	; automatisches Undo ausführen
	jsr initgif	; Vektoren initialisieren
	jsr scanlines	; packen und wegschreiben
	jsr newcode	; letzten Block aufbereiten
	jsr closefile	; Codierung abschließen
	lda #8		; Funktion "Undo aus dem Ram" setzen
	sta getundo+1
	jsr doundo	; und ausführen
	sec		; Leave-Flag
	rts		; fertig

; --------------------------------------------------------------------------

gifheader	!by $47,$49,$46,$38,$39,$61	; GIF89a
width1	!wo 320			; Breite des Bildes
height1	!wo 200			; Höhe des Bildes
	!by %10110011		; Global, 8 Bit/Color, 4 Bit/Pixel
	!by 0			; Backgroundcolor (Offset)
	!by $31			; default aspect ratio (1:1)  ### 1.11

palette	!by $00,$00,$00	; schwarz
	!by $00,$00,$aa	; blau
	!by $66,$44,$00	; braun
	!by $33,$33,$33	; dunkelgrau
	!by $88,$00,$00	; rot
	!by $cc,$44,$cc	; purpur
	!by $dd,$88,$55	; orange
	!by $77,$77,$77	; mittelgrau
	!by $00,$88,$ff	; hellblau
	!by $ff,$77,$77	; hellrot
	!by $00,$cc,$55	; grün
	!by $bb,$bb,$bb	; hellgrau
	!by $aa,$ff,$ee	; cyan
	!by $ee,$ee,$77	; gelb
	!by $aa,$ff,$66	; hellgrün
	!by $ff,$ff,$ff	; weiß

	!by $21,$fe	; comment follows	### 1.10
	!by 33		; length of comment
	!tx "saved by c64 godot gif saver "
version	!tx "1.10"
	!by 0		; end of comment

	!by $2c		; start of image
	!wo 0,0		; linke obere Ecke auf Screen
width2	!wo 320
height2	!wo 200		; Screengröße (wie Bildgröße)
	!by 3		; kein Interlace, 4 Bit/Pixel
	!by 4		; Codesize

; -------------------------------------------------------------- Vorbereitung

initgif	lda #$80		; Bit wird 8mal geschoben
	sta outcode
	ldx #$35		; Codeadressentabelle anlegen
	lda #$ff		; Form: Code, Adresse (lo/hi)
ig0	dex		; vorbesetzt mit $ffff
	sta table1,x
	dex
	sta table1,x
	dex
	bpl ig0
	ldx #$35
	ldy #$11		; Codes von 17 abwärts bis 0
ig1	tya		; (sind auf jeden Fall vorhanden)
	sta table1,x
	dey
	dex
	dex
	dex
	bpl ig1

	lda #5		; 4 (+1) Anzahl Bits
	sta currbits
	lda #3
	sta cnt1byte
	lda #$df		; %11011111
	sta mask1
	lda #18		; erster freier Code
	sta nextcode
	lda #$36		; table1 + $36 = nextentry
	sta tab1vek
	lda #>table1
	sta tab1vek+1

	lda #>table2	; table2 (Codetabelle) anlegen, Länge 4K
	ldx #32
	ldy #0
	sty tab2vek
	sta tab2vek+1
	lda #$ff		; vorbesetzen mit $ff
ig2	sta (tab2vek),y
	iny
	bne ig2
	inc tab2vek+1
	dex
	bne ig2

	stx outindex	; Index in Ausgabepuffer (0)
	stx colcount	; zählt bis 16 (ab 0)
	dex
	stx mask2		; %11111111
	stx now2code
	stx last2code
	lda #16
	sta table2-2
	sty table2-1	; y enthält 0
	rts

; -------------------------------------------------------------- Encodierung

encode	sta codebyte
	lda now2code
	sta ctabvek
	lda last2code
	asl ctabvek
	rol
	clc
	adc #>table2
	sta ctabvek+1

	ldy #1
	lda (ctabvek),y
	bmi newcode

	pha
	sta codetemp
	dey
	lda (ctabvek),y
	tax
	pla
	tay
	stx ctabvek
	asl ctabvek
	rol
	sta ctabvek+1
	txa
	adc ctabvek
	sta ctabvek
	tya
	adc ctabvek+1
	adc #>table1
	sta ctabvek+1

	ldy #2
	lda (ctabvek),y
	cmp codebyte
	beq exitc

	stx addrtemp
	lda codetemp
	sta addrtemp+1
	ldx now2code
	stx ctabvek
	ldy last2code
	sty ctabvek+1
	asl ctabvek
	rol ctabvek+1
	clc
	txa
	adc ctabvek
	sta ctabvek
	tya
	adc ctabvek+1
	clc
	adc #>table1
	sta ctabvek+1
	sty codetemp

enc3	ldy codetemp
	inx
	bne enc0
	iny
	sty codetemp
enc0	cpx addrtemp
	bne enc1
	cpy addrtemp+1
	beq newcode

enc1	clc
	lda ctabvek
	adc #3
	sta ctabvek
	bcc enc2
	inc ctabvek+1

enc2	ldy #0
	lda (ctabvek),y
	cmp now2code
	bne enc3
	iny
	lda (ctabvek),y
	cmp last2code
	bne enc3
	iny
	lda (ctabvek),y
	cmp codebyte
	bne enc3

exitc	stx now2code
	lda codetemp
	sta last2code
	rts

newcode	lda now2code
	pha 
	ldx codebyte
	ldy colcount
	cpy #16
	beq out1

	ldy #0
	sta (tab1vek),y
	iny
	lda last2code
	sta (tab1vek),y
	iny
	txa
	sta (tab1vek),y
	ldy nextcode
	dey
	tya
	and mask1
	bne ncd0
	lda colcount
	and mask2
	bne ncd0

; ----------------------------------------------------10.10.01------- Überschreiten der Codelänge 12 verhindern

	lda currbits
	cmp #12
	beq ncd0

; ------------------------------------------------------------------- hier ist der Fehler!

	inc currbits
	rol mask1
	rol mask2

ncd0	lda last2code
	sta ctabvek+1
	pla		; ist now2code
	pha
	asl
	rol ctabvek+1
	sta ctabvek
	lda #>table2
	ora ctabvek+1
	sta ctabvek+1
	ldy #0
	lda nextcode
	sta (ctabvek),y
	iny
	lda colcount
	sta (ctabvek),y
	inc nextcode
	bne ncd1
	inc colcount
ncd1	lda tab1vek
	adc #3
	sta tab1vek
	bcc out1
	inc tab1vek+1

out1	stx now2code	; now2code (neu) merken
	ldx currbits	; Anzahl Ausgabebits holen
	pla		; A ist now2code (alt)

out0	lsr last2code
	ror
	ror outcode
	dec cnt1byte
	beq out
out2	dex		; Ausgabebits abzählen
	bne out0		; alle durch? 
	stx last2code	; dann Rest merken, fertig codiert
	rts

; ---------------------------------------------------------

out	pha		; now2code retten
	lda #8		; erst Bytezähler auffrischen
	sta cnt1byte
	ldy outindex	; Index in Tabelle holen
	lda outcode	; codiertes Byte holen
	sta table3,y	; und in Tabelle eintragen
	cpy #maxi		; bis Maximum erreicht
	beq out3
	pla		; now2code holen
	inc outindex	; Index erhöhen
	bne out2		; unbed. Sprung

out3	lda #outcnt	; Blocklänge ausgeben (maxi+1)
	jsr bsout
	ldy #0
out4	lda table3,y	; Block ausgeben
	jsr bsout
	iny
	cpy #outcnt	; Maximum+1 Bytes
	bne out4

out5	pla		; Stack bereinigen
	ldy #0		; Y ist Null
	sty outindex
	beq out2		; und weiter codieren

; -------------------------------------------------------------- Abschluß

closefile	lda #0
	sta last2code
	lda #17
	ldx currbits	; letztes Byte codieren
	jsr out0
	ldx cnt1byte
	cpx #8
	beq cf0
	ldx currbits
	jsr out0

cf0 	ldx outindex	; letzte GIF-Blocklänge ausgeben (<> 255)
	txa		; wenn nicht Null
	beq cf1
	jsr bsout
	ldx #0		; letzten Codeblock ausgeben
cf2	lda table3,x
	jsr bsout
	inx
	cpx outindex
	bne cf2

cf1	lda #0		; GIF-Delimiter dahinter
	jsr bsout
	lda #$3b		; GIF-Terminator ";" dahinter
	jsr bsout
	jmp clrch		; File schließen, GIF gespeichert

; ---------------------------------------------------------------------
; -------------------------------------------------------------- DoUndo
; ---------------------------------------------------------------------

doundo	lda #<undo	; eigentliche Routine verschieben
	ldx #>undo	; (weil das Modul ausgeblendet wird)
	sta ls_vekta8
	stx ls_vekta8+1
	ldy #scanlines-undo
sloop	lda (ls_vekta8),y
	sta sy_global,y	; nach GLOBAL
	dey
	bpl sloop
	jmp sy_global	; und dann ausführen

undo 	jsr gd_swapd	; Ram einblenden
	ldx #10		; FirstInit
	jsr rm_ramvec

	ldx #6		; Parameter setzen
	lda #0
md0	sta rm_werte,x
	dex
	bpl md0
	lda #>table1	; 4Bit-Bereich im C64
	sta rm_werte+1
	lda #$10		; nach Undo4Bit im Ram
	sta rm_werte+3
	lda #$7d		; 32000 Bytes
	sta rm_werte+6
	lda #1		; Flag für 4Bit-Undo setzen
	sta rm_nextentry

getundo	ldx #9		; und DoUndo
	jsr rm_ramvec
	ldx #1		; danach ForceOff (Ram ausblenden)
	jsr rm_ramvec	
	jmp gd_sproff	; und Sprite wieder aus, zurück

; -------------------------------------------------------------- Scanlines

scanlines	ldx #6		; Ram-Record löschen
	lda #0
sl0	sta rm_werte,x
	dex
	bpl sl0
	ldx #1		; Parameter setzen: 1 Byte Fetch
	stx rm_werte+5
	ldx #$b0		; Ziel $b0 (MERK)
	stx rm_werte

	lda filepos	; set startaddress (in UNDO)
	ldx filepos+1
	sta src0		; Hilfszeiger für die Blockzeilen
	sta rm_werte+2
	stx src0+1
	stx rm_werte+3

	lda clpho		; Anzahl Blockzeilen
	sta lcnt8

lnloop8	lda #8		; zählt 1 Blockzeile (8 Linien)
	sta lcnt
tloop8	lda clpbr		; count x tiles (40 on full screen)
	sta tilecnt
tloop	ldx #4
lnloop	ldy #0		; 40 mal 1 Kachellinie zu 4 Bytes à 2 Pixel
btloop	stx xstore	; (x und y retten)
	sty ystore
	lda #$91		; Wert aus dem Undo holen
	jsr gd_reu
	lda sc_merk
	pha
	lsr		; zuerst linkes Pixel (Hinibble)
	lsr
	lsr
	lsr
	jsr encode
	pla		; dann rechtes Pixel (Lonibble)
	and #15
	jsr encode
	ldx xstore	; (x und y zurück)
	ldy ystore
	inc rm_werte+2	; vorrücken im Undo
	bne s4
	inc rm_werte+3
s4	dex		; 4 Bytes = 1 Kachellinie
	bne lnloop

	clc		; nächste Kachel
	lda rm_werte+2
	adc #28
	sta rm_werte+2
	bcc s3
	inc rm_werte+3
s3	dec tilecnt
	bne tloop

	lda src0		; nächste Kachellinie
	clc
	adc #4
	sta src0
	sta rm_werte+2
	bcc s5
	inc src0+1
s5	lda src0+1
	sta rm_werte+3
	jsr action	; Laufbalken vorrücken
	dec lcnt
	bne tloop8

s51	lda src0		; nächste Blockzeile
	clc
	adc #<1248
	sta src0
	sta rm_werte+2
	lda src0+1
	adc #>1248
	sta src0+1
	sta rm_werte+3
	dec lcnt8		; bis alle durch
	bne lnloop8
 	rts

; --------------------------------------------------------------Namen verlängern

addgif	pha		; Länge merken		#--- 1.06
	tay
	dey
	ldx #0
ag4	lda ls_nambuf,y	; endet auf ".GIF"?
	cmp giftx,x
	bne ag2		; nein
	dey
	inx
	cpx #4
	bcc ag4
	pla		; ja, fertig
	rts
	
ag2	pla
	tay		; Name länger als 12 Zeichen?
	cpy #13
	bcs ag0		; ja, behandeln

ag5	ldx #3		; nein, ".gif" anhängen
ag1	lda giftx,x
ag3	sta ls_nambuf,y
	lda giftxs,x	; auch für Image Info
	sta ls_lastname,y
	iny
	dex
	bpl ag1
	sty wflen		; neue Länge merken, fertig
	sty ls_flen
	rts

ag0	dey		; auf 12 verkürzen
	cpy #12
	bne ag0
	beq ag5		; unbed. Sprung		#--- 1.06

; ----------------------------------------------------- 

noreu	ldx #<warnlst
	ldy #>warnlst
	jmp gd_xmloop

; ----------------------------------------------------- 

warnlst	!by 0
	!by 8,9,21,9,$81,0,0
	!scr "MESSAGE@"
	!by 14,23,7,3,$cd,<(canc),>(canc)
	!scr "Leave@"
	!by $c0,10,10,16
	!scr "No REU detected.@"
	!by $c0,12,11,15
	!scr "You can't save.@"
	!by $80

; ----------------------------------------------------- 

modend 	!eof
