
	!src "godotlib.lib"	; Label-Library einbinden
	*= $c000		; generelle Startadresse für alle Module
	!ct pet		; Texte werden in PETSCII assembliert

; ----------------------------------------- 
;
; svr.IPaintmono
;  Saver für C128 IPaint-Bilder im Format 640x400 (fake monochrom)
;
;  1.00, 29.04.19: first release
;
; ----------------------------------------- 


; ----------------------------------------- Equates

	dst		= $30
	dst0		= $32
	cpres		= $34	; file compressed?
	cflag		= $35	; running compression?
	dbl		= $36
	vertcnt		= $37
	byte		= $38
	bitcnt		= $39
	bcnt1		= $3a
	src		= $3b
	hold		= $3d
	src0		= $3e
	adcnt		= $40
	lcnt8		= $41
	lcnt		= $42
	cnt		= $43
	cnteq		= $44
	ocnt		= $45
	xmrk		= $46
	current		= $48

	offx		= $b2
	offy		= $b3

	shift		= $028d
	oszi3		= $d40e
	wave		= $d412
	filter		= $d418
	rausch		= $d41b

	buf		= $cd00
	cbuf		= buf+80
	destbuf		= $ca00

; ----------------------------------------- Header

header	jmp start
	!by $40
	!by 0
	!by 1
	!wo modend
	!wo 0
	!pet "IPaint - 640x400"
	!pet "1.00"
	!pet "29.04.19"
	!pet "A.Dettke        "

; ----------------------------------------- Main

start	ldx gr_nr		; Input?
	dex 
	bne saver

	jmp initinp	; ja

; ----------------------------------------- Basic8mono

saver	jsr gd_sproff	; nein, Mauszeiger aus

	lda gd_modswitch	; Modulmanagement
	pha 

	lda ls_flen	; Keine Datei ausgewählt?
	beq st1		; ja, fertig

	sta wflen		; Namenslänge merken
	lda #1		; Activity beginnen
	sta adcnt

	jsr wopen		; Datei öffnen
	bne st2		; Fehlschlag?

	jsr getname	; nein, Image Info vorbereiten
	ldx #12
	jsr ckout
	jsr write		; Datei speichern

st2	jsr clrch		; Datei schließen
	lda #12
	jsr close
	jsr err9		; Fehler?
	bne st1
	jsr setname	; nein, Image Info eintragen

st1	pla 
	sta gd_modswitch

	lda shift		; Shift (-Lock) gedrückt?
	and #1
	bne cn2

	ldy #16		; nein, Balancing-Tabelle initialisieren
	sty gr_ctr
	sty gr_brt
lll	dey 
	tya 
	sta gr_btab,y
	bne lll

cn2	jsr gd_spron	; Mauszeiger an
	sec 		; fertig
	rts 

; ----------------------------------------- 
; ----------------------------------------- Input-Routinen
 
	!src "input.inc"

; ----------------------------------------- 
; ----------------------------------------- 


; ----------------------------------------- Disk Access

pw	!pet "w,p,"
drinit	!pet "i0"
wflen	!by 0

wopen	jsr inull
	bne err8
	ldy wflen
	ldx #3
wo1	lda pw,x
	sta ls_nambuf,y
	iny 
	dex 
	bpl wo1
	sty wflen
	lda #12
	tay 
	ldx ls_drive
	jsr filpar
	lda wflen
	ldx #<ls_nambuf
	ldy #>ls_nambuf
	jsr filnam
	jsr copen
	jmp err9

; ----------------------------------------- 

inull	ldx #<drinit
	ldy #>drinit
	lda #2
	jsr gd_sendcom

err9	jsr gd_xmess
	lda ls_err2
	and #15
err8	sec 
	rts 

; ----------------------------------------- Messages

messout	ldx #<message
	ldy #>message
	jmp gd_xtxout2

tcopy	ldy #0
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx 
	iny 
	bne tc0

action	dec adcnt
	bne ld4
	lda cntwert
	sta adcnt
	ldy offy
	cpy #23
	bne act0
	jsr clrmess
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	rts 

clrmess	ldx #23
	lda #32
cl0	sta mess,x
	dex 
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts 

filltab	!by 160,93,103,127,126,124,105,109

cntwert	!by 1

txt	!scr " IPaint @"

message	!fill 8,32
mess	!fill 24,32
	!by 0

; ----------------------------------------- Image Information

getname	ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx 
	cpx #16
	bcc si0
si1	rts 

setname	lda #0		; Namen in Image Info eintragen
	ldx #<ls_picname
	ldy #>ls_picname
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts

nbuf	!fill 16,32
	!by 0

; ----------------------------------------- Write Image

write	jsr gd_clrms	; Message ausgeben
	ldx #0
	jsr tcopy

	jsr wrheader	; IPaint-Header abspeichern
	lda cmpr		; file compressed?
	beq +
	lda #$80		; yes, tag it
+	sta cpres
	lda gr_dither	; Dithering berücksichtigen
	tax 
	lda dlo,x
	sta dmode
	lda dhi,x
	sta dmode+1
	lda #$80
	sta filter
	sta oszi3
	sta oszi3+1
	lda #0
	sta wave
	lda #$81
	sta wave
	jsr ipaint	; Bild abspeichern
	jsr wrcolors	; Farben anhängen
	sec 
	rts 

; ----------------------------------------- Bild rendern

ipaint	lda #<sy_4bit
	ldx #>sy_4bit
	sta src0
	sta src
	stx src0+1
	stx src+1
	lda #0
	sta dbl
	sta vertcnt

	lda #25
	sta lcnt8
lnloop8	lda #0
	sta lcnt

lnloop	jsr action
ads0	ldx #0

zloop	lda #2		; zählt zweimal (eine Kachellinie)
	sta bcnt1

byloop	lda #$c0		; zählt vier Pixel
	sta bitcnt
	lda #0
	sta byte

btloop	ldy #0
	lda (src),y	; linkes Pixel
	pha 
	lsr 
	lsr 
	lsr 
	lsr 
	tay 
	lda gr_btab,y	; Balancing berücksichtigen
	jsr makebyte
	lsr bitcnt
	lsr bitcnt
	pla 
	and #$0f		; rechtes Pixel
	tay 
	lda gr_btab,y	; Balancing berücksichtigen
	jsr makebyte
	inc src
	bne s3
	inc src+1
s3	lsr bitcnt	; bis 4 Pixel durch
	lsr bitcnt
	bcc btloop

	sta buf,x		; Ergebnis puffern
	inx 
	dec bcnt1		; zweimal das Ganze (8 Pixel)
	bne byloop

	lda src		; nächste Kachel ansteuern
	clc 
	adc #28
	sta src
	bcc s4
	inc src+1
s4	cpx #80		; bis 40 erreicht
	bne zloop

	jsr moveline	; Rasterzeile wegschreiben

	ldx vertcnt	; Zeile verdoppeln
	inx 
	cpx #8
	bne s41
	ldx #0
s41	stx vertcnt
	lda dbl
	eor #$ff
	sta dbl
	beq newline

	lda src0		; ja, Zeiger zurücksetzen
	sta src
	lda src0+1
	sta src+1
	bne ads0		; noch einmal

newline	lda src0		; nächste Rasterzeile
	clc 
	adc #4
	sta src0
	sta src
	bcc s5
	inc src0+1
s5	lda src0+1
	sta src+1
	inc lcnt
	lda #8
	cmp lcnt
	beq s51
	jmp lnloop	; Sprung, wenn Kachel noch nicht durch

s51	lda src0		; sonst: nächste Kachelzeile
	clc 
	adc #<1248
	sta src0
	sta src
	lda src0+1
	adc #>1248
	sta src0+1
	sta src+1
	dec lcnt8		; zählen (bis 25)
	beq done
	jmp lnloop8	; von vorn
done	rts 		; bzw. fertig

; ----------------------------------------- Verteiler für Dither

makebyte	jmp (dmode)

; ----------------------------------------- Dithering

dithoff	cmp #8
	bpl do0
	lda #0
	!by $2c
do0	lda bitcnt
	ora byte
	sta byte
	rts 

dithrst	ldy vertcnt
	ora offs,y
	tay 
	lda gr_orderedpat,y
	and bitcnt
	ora byte
	sta byte
	rts 

dithpat	asl 
	asl 
	asl 
	ora vertcnt
	tay 
	lda gr_pattern,y
	and bitcnt
	ora byte
	sta byte
	rts 

dithnoi	beq dn0
	cmp #15
	beq dn1
	ldy #0
	sta hold
	lda rausch
	and #$0f
	cmp hold
	bcs dn3
	ldy #$aa
dn3	lda rausch
	and #$0f
	cmp hold
	tya 
	bcs dn2
	ora #$55
dn2	!by $2c
dn1	lda #$ff
	and bitcnt
dn0	ora byte
	sta byte
	rts 

dithrnd	cmp #8
	beq dr0
	bcs dr1
	bcc dr2
dr0	lda rausch
	!by $2c
dr1	lda bitcnt
	and bitcnt
	!by $2c
dr2	lda #0
	ora byte
	sta byte
ml4	rts 

; ----------------------------------------- 

moveline	lda vertcnt
	bne ml0
	lda #<destbuf
	ldy #>destbuf
	sta dst
	sty dst+1
ml0	ldy #0
	ldx #0
mloop	lda buf,x
	sta (dst),y
	inc dst
	bne ml3
	inc dst+1
ml3	inx 
	cpx #80
	bne mloop
	ldy vertcnt
	cpy #7		; nach 8 Rasterzeilen speichern
	bne ml4

writeloop	ldx #5		; 5*128 (=8*80 =640) Bytes (1 Blockzeile)
	lda #<destbuf
	ldy #>destbuf
	sta dst0
	sty dst0+1
	ldy #0		; Wiederholungszähler auf Null
	sty cnt
	sty cnteq
	sty cflag
	sty byte		; reset lastbyte

wloop	lda (dst0),y	; Speichern: Byte holen,
	jsr pack		; packen und wegschreiben
	iny 
	cpy #128
	bne wloop
	clc 
	lda dst0
	adc #128
	sta dst0
	bcc wl5
	inc dst0+1
wl5	ldy #0
	dex 
	bne wloop		; 640 Bytes fertig?

	bit cpres		; ja, File ungepackt?
	bmi +
	rts		; dann raus

+	lda cnt		; sonst: flush buffer?
	tax
	ora cnteq
	beq ++		; nicht erforderlich
	txa		; doch: welchen?
	beq +

	sta ocnt		; flush uncompacted buffer
	jsr straight
	beq ++

+	jsr compact	; flush compacted buffer
++	stx cnteq
	rts		; jetzt: 640 Bytes fertig
	

; ----------------------------------------- RLE-Komprimierung

pack	bit cpres		; Komprimierung aktiviert?
	bmi +
	jmp bsout		; nein, unkomprimiert speichern

+	sta current
	stx xmrk		; sonst: .x retten
-	ldx cnt		; Zähler holen, neues Byte?
	beq wl1		; ja, merken
	cpx #127		; höchsten Zählerstand erreicht?
	bcc +

	jsr process	; ja, max buffer bearbeiten
	stx cnteq
	beq -		; dann normal fortsetzen

+	lda current
	cmp byte		; aktuelles Byte gleich letztem Byte?
	bne wl1		; nein, speichern

	inc cnteq		; ja, zählen
	lda cnteq
	cmp #3		; 3 erreicht?
	bcc ++
	lda #$80		; dann Komprimierungsflag setzen
	sta cflag
	bmi ++

wl1	lda cnteq		; aktives Packen?
	beq ++
	cmp #3
	bcc +
	jsr process	; ja, ausführen
+	lda #0
	sta cnteq

++	lda current	; sonst: 
	sta byte
incr	sta cbuf,x	; Byte puffern
	inc cnt		; und zählen
	ldx xmrk		; .x rekonstruieren
	rts 

; ----------------------------------------- Komprimierung durchführen

process	txa
	clc
	sbc cnteq
	sta ocnt
	beq compact
	jsr straight

compact	ldx cnteq		; sonst compress:
	inx
-	txa
	ora #$80		; Zähler ausgeben
	jsr bsout
	lda byte		; last Byte ausgeben
	jsr bsout

wl3	ldx #0		; dann Zähler zurücksetzen
	stx cnt
	stx cflag
	stx ocnt
	rts

wl2	sta cbuf,x	; Wert 127 puffern
	bit cflag		; aktive Komprimierung?
	bmi -
	stx ocnt
	txa

straight	jsr bsout		; Zähler ausgeben
	ldx #0
-	lda cbuf,x	; Puffer ausgeben
	jsr bsout
	inx
	cpx ocnt
	bne -
	beq wl3		; Werte zurücksetzen (unbed. Sprung)

; ----------------------------------------- IPaint-Header schreiben

wrheader	ldx #0
wrh0	lda ipheader,x
	jsr bsout
	inx 
	cpx #18
	bne wrh0
	rts 

; ----------------------------------------- IPaint-Colors anhängen

wrcolors	ldx #0
wrc0	lda ipcolors,x
	jsr bsout
	inx 
	cpx #130
	bne wrc0
	rts 

; ----------------------------------------- 

offs	!by $00,$10,$20,$30
	!by $00,$10,$20,$30

dlo	!by <dithoff
	!by <dithrst
	!by <dithpat
	!by <dithnoi
	!by <dithrnd

dhi	!by >dithoff
	!by >dithrst
	!by >dithpat
	!by >dithnoi
	!by >dithrnd

dmode	!by 0,0

; ----------------------------------------- IPaint Header

ipheader	!wo 0		; Startadresse (im VDC)
	!tx "brus"	; Typkennung ("Brush")
	!by 4		; Typ: Grafik
	!by 0		; Startspalte
	!wo 0		; Startlinie
cmpr	!by 1		; Packflag (1=ja)
	!by 2		; Anzahl Farben     (mode 2 = 8x4)
wid	!by 80		; Breite in Kacheln (=640 Pixel)
hgt	!wo 400		; Höhe in Linien    (=400 Pixel)
	!by 0		; BGR    (black) -> unused in mode 2
	!by 14		; FGR    (lt grey)
	!by 0		; Border (black)

; ----------------------------------------- IPaint Colors for mono

ipcolors	!tx "colr"	; Farb-Chunk

	!by $ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e	; 8000 Farbbytes
	!by $ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e
	!by $ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e
	!by $ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e
	!by $ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e
	!by $ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e
	!by $ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e
	!by $ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$ff,$0e,$fe,$0e

; ----------------------------------------- 

modend	!eof 
