
	!src "godotlib.lib"	; Label-Library einbinden
	*= $c000		; generelle Startadresse für alle Module
	!ct pet		; Texte werden in PETSCII assembliert

; ----------------------------------------- 
;
; svr.Basic8
;  Saver für C128 Basic8-Bilder
;
;  1.00, 27.04.19, first release
;  1.01, 02.05.19, bugfix: compress algorithm now works
;                  added: auto prefix ("brus.")
;                  added: options requester
;  1.02, 01.06.19, added: selective prefixes ("brus.", "pict.", "ip.")
;  1.03, 02.07.19, added: undo, colors
;
; ----------------------------------------- 


; ----------------------------------------- Equates

	dst		= $30	; /$31
	dst0		= $32	; /$33
	cpres		= $34	; file compressed? (if 1)
	cflag		= $35	; running compression? (if $80)
	dbl		= $36	; double height? (0: off, $ff: on)
	vertcnt		= $37
	byte		= $38
	bitcnt		= $39	; double width? (1: off, 2: on)
	bcnt1		= $3a
	src		= $3b	; /$3c
	hold		= $3d
	src0		= $3e	; /$3f
	adcnt		= $40
	lcnt8		= $41
	lcnt		= $42
	cnt		= $43
	cnteq		= $44
	ocnt		= $45
	xmrk		= $46
	prendx		= xmrk
	current		= $47
	yndex		= $48
	vram1		= $49	; /$4a
	vram2		= $4b	; /$4c
	max		= $4d
	col00		= $4e	; ..$51
	cols		= $52

	offx		= $b2
	offy		= $b3

	shift		= $028d
	rendered		= $2000
	undorend		= $8d00
	oszi3		= $d40e
	wave		= $d412
	filter		= $d418
	rausch		= $d41b

	buf		= rendered+8000
	cbuf		= buf+80
	destbuf		= sy_bigbuffer
	color1		= rendered
	color2		= color1+4000
	hist0		= cbuf+80
	hist1		= hist0+16

; ----------------------------------------- Header

header	jmp start
	!by $40
	!by 0
	!by 1
	!wo modend
	!wo 0
	!pet "Basic8 images   "
	!pet "1.03"
	!pet "02.07.19"
	!pet "A.Dettke        "

; ----------------------------------------- Main

start	ldx gr_nr		; Input?
	dex 
	bne saver

	jmp initinp	; ja

; ----------------------------------------- Basic8mono

saver	lda gd_modswitch	; Modulmanagement
	pha 

	lda rm_ramvec	; check for REU
	eor #$4c
	sta hasreu	; 0 if present

	lda ls_flen	; Keine Datei ausgewählt?
	beq st1		; ja, fertig

	sta wflen		; Namenslänge merken
	lda #1		; Activity beginnen
	sta adcnt
	sta cntwert

	lda hasreu
	bne +
	jsr undo		; save data if reu present

+	ldx #<b8lst	; Requester
	ldy #>b8lst
	jsr gd_screen
	jsr gd_eloop	; warten auf Klicks

st1	pla 
	sta gd_modswitch

	lda shift		; Shift (-Lock) gedrückt?
	and #1
	bne tidyup

	ldy #16		; nein, Balancing-Tabelle initialisieren
	sty gr_ctr
	sty gr_brt
lll	dey 
	tya 
	sta gr_btab,y
	bne lll

; ----------------------------------------- Event: Beenden

tidyup	lda hasreu
	bne evleave
	jsr undo		; restore data if reu present

evleave	lda #0
	sta wflen
	sec 		; fertig
	rts 

; ----------------------------------------- Event: Save Image

evsaveb8	lda wflen
	beq +

	jsr addprefix	; Prefix "brus." zufügen
	jsr gd_sproff	; Mauszeiger aus

	jsr wopen		; Datei öffnen
	bne st2		; Fehlschlag?

	jsr getname	; nein, Image Info vorbereiten
	ldx #12
	jsr ckout
	jsr write		; Datei speichern

st2	jsr clrch		; Datei schließen
	lda #12
	jsr close
	jsr err9		; Fehler?
	bne +
	jsr setname	; nein, Image Info eintragen

+	jmp gd_spron	; Mauszeiger an

; ----------------------------------------- 
; ----------------------------------------- Input-Routinen
 
	!src "input.inc"

; ----------------------------------------- 
; ----------------------------------------- 


; ----------------------------------------- Disk Access

pw	!pet "w,p,"
drinit	!pet "i0"
wflen	!by 0

wopen	jsr inull
	bne err8
	ldy wflen
	ldx #3
wo1	lda pw,x
	sta ls_nambuf,y
	iny 
	dex 
	bpl wo1
	sty wflen
	lda #12
	tay 
	ldx ls_drive
	jsr filpar
	lda wflen
	ldx #<ls_nambuf
	ldy #>ls_nambuf
	jsr filnam
	jsr copen
	jmp err9

; ----------------------------------------- 

inull	ldx #<drinit
	ldy #>drinit
	lda #2
	jsr gd_sendcom

err9	jsr gd_xmess
	lda ls_err2
	and #15
err8	sec 
	rts 

; ----------------------------------------- Messages

messout	ldx #<message
	ldy #>message
	jmp gd_xtxout2

tcopy	ldy #0
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx 
	iny 
	bne tc0

action	dec adcnt
	bne ld4
	lda cntwert
	sta adcnt
	ldy offy
	cpy #23
	bne act0
	jsr clrmess
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	rts 

clrmess	ldx #23
	lda #32
cl0	sta mess,x
	dex 
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts 

filltab	!by 160,93,103,127,126,124,105,109

cntwert	!by 1

txt	!scr " Bitmap @"	; 0
	!scr " Colors @"	; 9

message	!fill 8,32
mess	!fill 24,32
	!by 0

; ----------------------------------------- Image Information

getname	ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx 
	cpx #16
	bcc si0
si1	rts 

setname	lda #0		; Namen in Image Info eintragen
	ldx #<ls_picname
	ldy #>ls_picname
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts

nbuf	!fill 16,32
	!by 0

; ----------------------------------------- Write Image

write	lda mode		; monochrom?
	beq +		; ja, Farbe egal

	jsr gd_clrms	; Message ausgeben
	ldx #9
	jsr tcopy		; .y=0
	iny
	sty adcnt

+	jsr wrheader	; Basic8-Header schreiben
	lda cmpr		; file compressed?
	beq +
	lda #$80		; yes, tag it
+	sta cpres
	ldx dither	; Dithering berücksichtigen
	lda dlo,x
	sta dmode
	lda dhi,x
	sta dmode+1
	lda #$80		; random seed for Noise
	sta filter
	sta oszi3
	sta oszi3+1
	lda #0
	sta wave
	lda #$81
	sta wave

	lda mode		; monochrom?
	beq +		; ja, Farben übergehen
	jsr colors	; sonst: Farben rendern
	jsr mono		; Farbbitmap rendern
	jsr colorchk
	beq ++
+	jsr mono		; monochrome Bitmap rendern
++	sec 
	rts 

; ----------------------------------------- Write Chunk Signature

colorchk	ldx #0
wrc0	lda colchunk,x	; Chunk-Kennung schreiben
	jsr bsout
	inx 
	cpx #4
	bne wrc0
	rts

; ----------------------------------------- Render Colors

colors	ldx #9
	jsr tcopy		; .y=0
	iny
	sty adcnt
	ldx #6
	stx cntwert

	jsr setvecs	; fill 2x1000 bytes colors:
-	jsr dohist	; histogram for 1 tile, store result
	jsr action
	jsr cou5		; count 1000
	bne -

	rts		; to be continued

; -------------------------------------- Histogram for one Tile

dohist	ldx #15
	lda #0
-	sta hist0,x
	dex
	bpl -

	ldy #32
	sty col00
	sty col00+1
	sty col00+2
	sty col00+3
	dey

	jsr scan		; first field
	sec
	lda src
	sbc #28
	sta src
	bcs +
	dec src+1

+	ldx #2		; count 2 colors
lp7	ldy #0
	sty max

lp8	lda hist0,y	; find 2 most frequent colors
	beq +		; any pixels of this color? No if 0
	cmp max		; most frequent already found?
	bcc +		; yes if current is lower
	sta max		; otherwise: store as max (stores also if equal!)
	sty col00+1,x	; store color
+	iny
	cpy #16		; check all possible 16 colors
	bne lp8

	ldy col00+1,x	; clear found color from histogram
	cpy #32
	beq +
	lda #0
	sta hist0,y
+	dex		; now find 2nd color
	bne lp7

	ldy #0
	ldx col00+2	; only one color in tile?
	cpx #32
	bcc +		; no, don't fake the other one
	ldx col00+3	; yes, fake 2nd color (set same col there)
+	stx col00+2
	lda col00+3
	jsr storecol

	jsr scan		; second field
	sec		; adjust
	lda src
	sbc #4
	sta src
	bcs +
	dec src+1

+	ldx #2		; count next 2 colors
lp71	ldy #0
	sty max

lp81	lda hist0,y	; find 2 most frequent colors
	beq +		; any pixels of this color? No if 0
	cmp max		; most frequent already found?
	bcc +		; yes if current is lower
	sta max		; otherwise: store as max (stores also if equal!)
	sty col00-1,x	; store color
+	iny
	cpy #16		; check all possible 16 colors
	bne lp81

	ldy col00-1,x	; clear found color from histogram
	cpy #32
	beq +
	lda #0
	sta hist0,y
+	dex		; now find 2nd color
	bne lp71

	ldy #1
	ldx col00		; only one color in tile?
	cpx #32
	bcc +		; no, don't fake the other one
	ldx col00+1	; yes, fake 2nd color (set same col there)
+	stx col00
	lda col00+1
	jsr storecol

	rts

; ------------------------------------------------ Scan one tileline

scan	lda #4		; f1: src, f2: src+4
	sta lcnt8		; check 4 bytes (8 pixels)
lp5	ldy #0
lp6	lda (src),y
	pha
	lsr
	lsr
	lsr
	lsr
	tax
	inc hist0,x
	pla
	and #15
	tax
	inc hist0,x
	iny
	cpy #4
	bne lp6
	clc
	lda src
	adc #8
	sta src
	bcc +
	inc src+1
+	dec lcnt8
	bne lp5
	rts

; --------------------------------------

storecol	asl		; set .a as foreground (upper nib)
	asl
	asl
	asl
	sta cols
	txa
	and #15		; set .x as backgound (lower nib)
	ora cols
	cpy #1
	beq +
	sta (vram1),y	; into buffers
	rts
+	dey
	sta (vram2),y
	rts

; ------------------------------------------------ Counters

count	lda src		; nächste Kachel 4Bit
	clc
	adc #32
	sta src
	bcc cou5
	inc src+1
cou5	inc vram2		; und Color Fields
	bne +
	inc vram2+1
+	inc vram1
	bne cou6
	inc vram1+1
cou6	lda ls_vekta8
	bne cou7
	dec ls_vekta8+1
cou7	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	rts

; ----------------------------------------- Bitmap gedithert rendern

mono	jsr gd_clrms	; neue Message ausgeben
	ldx #0
	jsr tcopy
	iny
	sty adcnt
	sty cntwert

	jsr setvecs	; 4Bit anwählen (src/src0, vram1/2)
	jsr rstvecs	; Vektoren sichern
	lda #0		; steuert per yzoom ($00 oder $ff) die Höhe
	sta dbl		; Flag
	sta vertcnt	; zählt Ergebnisrasterzeilen (können doppelt so viele sein)

	lda #25
	sta lcnt8
lnloop8	lda #0
	sta lcnt
	sta evenodd

lnloop	jsr action
ads0	ldx #0

zloop	lda #0
	sta yndex
	lda xzoom		; 1 bei 320, 2 zählt 640 (eine Rasterlinie)
	sta bcnt1

byloop	lda xmask		; zählt vier Byte (8 Pixel)
	sta bitcnt
	lda #0
	sta byte

btloop	lda mode
	bne cbloop

	ldy yndex		; monochrom:
	lda (src),y	; linkes Pixel
	pha 
	lsr 
	lsr 
	lsr 
	lsr
	tay 
	lda gr_btab,y	; Balancing berücksichtigen (Bitmap)
	jsr makebyte
	ldy xzoom
-	lsr bitcnt
	dey
	bne -
	pla 
	and #$0f		; rechtes Pixel
	tay
	lda gr_btab,y	; Balancing berücksichtigen
	jsr makebyte
	inc yndex		; nächstes Byte (von 4)
	ldy xzoom
-	lsr bitcnt
	dey
	bne -
	bcc btloop
	bcs contn

cbloop	ldy #0
	lda evenodd
	bne +
	lda (vram1),y
	!by $2c
+	lda (vram2),y
	pha
	lsr
	lsr
	lsr
	lsr
	sta frgr
	pla
	and #15
	sta bkgr
	clc
	adc frgr
	lsr
	sta cols

--	ldy yndex
	lda (src),y
	pha
	lsr
	lsr
	lsr
	lsr
	jsr getcbmap
	ldy xzoom
-	lsr bitcnt
	dey
	bne -
	pla
	and #15
	jsr getcbmap
	inc yndex
	ldy xzoom
-	lsr bitcnt
	dey
	bne -
	bcc --

contn	sta buf,x		; Ergebnis puffern (8 Pixel)
	inx 
	dec bcnt1		; zweimal das Ganze (bei 640)
	beq +
	jmp byloop

+	jsr count		; nächste Kachel ansteuern
	cpx xtiles
	beq +
	jmp zloop

+	jsr moveline	; Rasterzeile wegschreiben bis Blockzeile voll

	ldx vertcnt	; alle 8 Rasterzeilen im Ergebnispuffer fertig?
	inx 
	cpx #8
	bne s41
	ldx #0		; (wenn ja, Zähler zurücksetzen)
s41	stx vertcnt
	lda dbl		; Zeile verdoppeln? (wenn yzoom=$ff)
	eor yzoom
	sta dbl
	beq newline

	jsr strvecs	; ja, Vektoren zurück
	lda src0		; 4Bit-Zeiger zurücksetzen
	sta src
	lda src0+1
	sta src+1
	jmp lnloop	; Rasterzeile noch einmal

newline	lda src0		; sonst: nächste Rasterzeile
	clc 
	adc #4
	sta src0
	sta src
	bcc s5
	inc src0+1
s5	lda src0+1
	sta src+1
	inc lcnt		; alle 8 Rasterzeilen im 4Bit fertig?
	lda #8
	cmp lcnt
	beq s51
	jsr strvecs	; Vektoren zurück
	jmp lnloop	; Sprung, wenn Kachel noch nicht durch

s51	lda src0		; sonst: nächste Kachelzeile
	clc 
	adc #<1248
	sta src0
	sta src
	lda src0+1
	adc #>1248
	sta src0+1
	sta src+1
	dec lcnt8		; Kachelzeilen zählen (bis 25)
	beq done
	jsr rstvecs	; neue Vektoren merken
	jmp lnloop8	; von vorn
done	rts 		; bzw. fertig

; ----------------------------------------- Verteiler für Dither

makebyte	jmp (dmode)

; ----------------------------------------- Dithering

dithrst	ldy vertcnt
	ora offs,y
	tay 
	lda gr_orderedpat,y
	jmp ddone3

dithpat	asl 
	asl 
	asl 
	ora vertcnt
	tay 
	lda gr_pattern,y
	jmp ddone3

dithnoi	beq ddone
	cmp #15
	beq dn1
	ldy #0
	sta hold
	lda rausch
	and #$0f
	cmp hold
	bcs dn3
	ldy #$aa
dn3	lda rausch
	and #$0f
	cmp hold
	tya 
	bcs dn2
	ora #$55
dn2	!by $2c
dn1	lda #$ff
ddone3	and bitcnt
	jmp ddone

dithoff	cmp #8		; vergleichen
	jmp ddone2

getcbmap	cmp cols
ddone2	bpl +
	lda #0
	!by $2c
+	lda bitcnt
ddone	ora byte
	sta byte
ml4	rts 

; ----------------------------------------- 

moveline	lda vertcnt
	bne ml0
	lda #<destbuf
	ldy #>destbuf
	sta dst
	sty dst+1
ml0	ldy #0
	ldx #0
mloop	lda buf,x
	sta (dst),y
	inc dst
	bne ml3
	inc dst+1
ml3	inx 
	cpx xtiles
	bne mloop
	ldy vertcnt
	cpy #7		; nach 8 Rasterzeilen speichern
	bne ml4

writeloop	ldx #8		; 8*80 =640 Bytes (1 Blockzeile)
	lda #<destbuf
	ldy #>destbuf
	sta dst0
	sty dst0+1
	ldy #0		; Wiederholungszähler auf Null
	sty cnt
	sty cnteq
	sty cflag
	sty byte		; reset lastbyte

wloop	lda (dst0),y	; Speichern: Byte holen,
	jsr pack		; packen und wegschreiben
	iny 
	cpy xtiles
	bne wloop
	clc 
	lda dst0
	adc xtiles
	sta dst0
	bcc wl5
	inc dst0+1
wl5	ldy #0
	dex 
	bne wloop

	bit cpres		; ja, File ungepackt?
	bmi +
	rts		; dann raus

+	lda cnt		; sonst: flush buffer?
	tax
	ora cnteq
	beq ++		; nicht erforderlich
	txa		; doch: welchen?
	beq +

	sta ocnt		; flush uncompacted buffer
	jsr straight
	beq ++

+	jsr compact	; flush compacted buffer
++	stx cnteq
	rts		; jetzt: 640 Bytes fertig
	

; ----------------------------------------- RLE-Komprimierung

pack	bit cpres		; Komprimierung aktiviert?
	bmi +
	jmp bsout		; nein, unkomprimiert speichern

+	sta current
	stx xmrk		; sonst: .x retten
-	ldx cnt		; Zähler holen, neues Byte?
	beq wl1		; ja, merken
	cpx #127		; höchsten Zählerstand erreicht?
	bcc +

	jsr process	; ja, max buffer bearbeiten
	stx cnteq
	beq -		; dann normal fortsetzen

+	lda current
	cmp byte		; aktuelles Byte gleich letztem Byte?
	bne wl1		; nein, speichern

	inc cnteq		; ja, zählen
	lda cnteq
	cmp #3		; 3 erreicht?
	bcc ++
	lda #$80		; dann Komprimierungsflag setzen
	sta cflag
	bmi ++

wl1	lda cnteq		; aktives Packen?
	beq ++
	cmp #3
	bcc +
	jsr process	; ja, ausführen
+	lda #0
	sta cnteq

++	lda current	; sonst: 
	sta byte
incr	sta cbuf,x	; Byte puffern
	inc cnt		; und zählen
	ldx xmrk		; .x rekonstruieren
	rts 

; ----------------------------------------- Komprimierung durchführen

process	txa
	clc
	sbc cnteq
	sta ocnt
	beq compact
	jsr straight

compact	ldx cnteq		; sonst compress:
	inx
-	txa
	ora #$80		; Zähler ausgeben
	jsr bsout
	lda byte		; last Byte ausgeben
	jsr bsout

wl3	ldx #0		; dann Zähler zurücksetzen
	stx cnt
	stx cflag
	stx ocnt
	rts

wl2	sta cbuf,x	; Wert 127 puffern
	bit cflag		; aktive Komprimierung?
	bmi -
	stx ocnt
	txa

straight	jsr bsout		; Zähler ausgeben
	ldx #0
-	lda cbuf,x	; Puffer ausgeben
	jsr bsout
	inx
	cpx ocnt
	bne -
	beq wl3		; Werte zurücksetzen (unbed. Sprung)

; ----------------------------------------- Basic8-Header schreiben

wrheader	ldx #0
wrh0	lda b8header,x
	jsr bsout
	inx 
	cpx #18
	bne wrh0
	rts 

; ----------------------------------------- Namen verlängern

addprefix	pha		; Länge merken

	lda mode		; Welcher Modus?
	beq ap1
	cmp #1
	bne +
	lda #<prepict	; 1: "pict."
	ldx #>prepict
	bne ap2
+	cmp #2
	bne ap1
	ldy #3
	lda #<preip	; 2: "ip."
	ldx #>preip
	bne ap0
ap1	lda #<prefix	; 0, 3 u. 4: "brus."
	ldx #>prefix
ap2	ldy #5
ap0	sta src
	clc
	tya
	adc src
	sta src0
	stx src+1
	stx src0+1
	sty prendx
	
	ldy #0
ag4	lda ls_nambuf,y	; beginnt mit "xxx."?
	cmp (src),y
	bne ag2		; nein
	iny
	cpy prendx
	bcc ag4
	pla		; ja, fertig
	rts
	
ag2	pla		; verlängern um .y Zeichen
	clc
	adc prendx
	tay		; Name nun länger als 16 Zeichen?
	cpy #16
	bcs ag0		; ja, behandeln

ag5	sty wflen		; neue Länge merken, fertig
	sty ls_flen
	lda #15		; nein, "xxx." vor den Namen
	sec
	sbc prendx
	tax		; .x=10 oder =12
	clc
	adc prendx
	tay		; .y=.x+prendx
ag1	lda ls_nambuf,x
	sta ls_nambuf,y
	lda ls_lastname,x
	sta ls_lastname,y
	dey
	dex
	bpl ag1
	ldy prendx	; Länge
	dey
ag3	lda (src),y
	sta ls_nambuf,y
	lda (src0),y
	sta ls_lastname,y
	dey
	bpl ag3
	rts

ag0	dey		; auf 16 verkürzen
	cpy #16
	bne ag0
	beq ag5		; unbed. Sprung

; ----------------------------------------- Event: XSize

evxsize	ldx xsize
	beq exs0
exs1	ldx #$ff
exs0	lda #40
	inx
	beq +
	asl
+	sta xtiles	; double if .x=1 (dann 80)
	sta wid		; in header
	stx xsize		; .x: 0: 320 (40), 1: 640 (80)
	stx xzoom		; Verdoppelungsfaktor setzen (1 oder 2)
	inc xzoom
	lda #$80
	cpx #0
	beq +
	ora #$40
+	sta xmask		; entweder %10000000 oder %11000000

	lda xyoffs,x
	tax
	ldy #2
-	lda xsizets,x
	sta xsizetx,y
	dex
	dey
	bpl -
	ldy #4
	jmp esd0

; ----------------------------------------- Event: YSize

evysize	ldx ysize
	beq eys0
eys1	ldx #$ff
eys0	lda #200
	inx
	stx hgt+1		; in header
	beq +
	lda #$90
+	sta hgt

++	stx ysize		; .x: 0: off (200), 1: on (400)
	beq +
	lda #$ff
	!by $2c
+	lda #0
	sta yzoom		; .a: $00: 200, $ff: 400

	lda xyoffs,x
	tax
	ldy #2
-	lda ysizets,x
	sta ysizetx,y
	dex
	dey
	bpl -
	ldy #6
	jmp esd0

; -------------------------------------- Event: Set Compress Mode

evsetcmpr	ldx cmpr
	beq +
	ldx #$ff
+	inx
	stx cmpr		; 0: off, 1: on
	lda #<cmprstx	; Adresse in der Screenlist setzen
	sta sc_texttab
	lda #>cmprstx
	sta sc_texttab+1
	txa
	asl
	tay
	lda caddrs,y	; Adresse des neuen Textes holen
	tax		; nach .x und .y
	lda caddrs+1,y
esc0	tay
	jmp gd_xtxtggl	; Texte austauschen und Ergebnis anzeigen

; ----------------------------------------- Event: Set Color Mode

evsetmode	lda #$8e		; care for correct dither mode
	sta dithgad+4
	lda #$ce
	sta ysizegad+4
	ldx #4
	jsr esd1

	lda modes
	cmp #3
	bne +
	lda #$ff
	sta modes
+	inc modes
	lda modes
	pha

	ldx #0		; .x preset to 0 (=off)
	cmp #1		; 8x2? (Mode 1)
	bne +
	lda #$8e
	sta ysizegad+4
	jsr exs0		; 640x200 (returns .c=0, .x=0)
	jsr eys1
	bcc ++
+	cmp #2		; 8x4? (Mode 2)
	bne +
	jsr exs0		; 640x400
	jsr eys0
	bcc ++
+	cmp #3		; 8x8? (Mode 3)
	bne +
	jsr exs1		; 320x200
	jsr eys1
	bcc ++

+	lda #$ce		; nein, mono (Mode 0)
	sta dithgad+4	; care for correct dither mode
	jsr esd2
	
++	pla
	sta mode
	tax
	lda modeoffs,x
	tax
	ldy #3
-	lda modetxts,x
	sta modetx,y
	dex
	dey
	bpl -
	ldy #0
	beq esd0

; ----------------------------------------- Event: Set Dither Mode

evsetdith	lda dither
	cmp #3
	bne +
	lda #$ff
	sta dither
+	inc dither
esd2	ldx dither
esd1	lda dithoffs,x
	tax
	ldy #6
-	lda dithtxts,x
	sta dithtx,y
	dex
	dey
	bpl -
	ldy #2
esd0	jsr settext
	ldy #6
	jmp gd_xtxout1


; ------------------------------------ 

setvecs	lda #<color1	; into buffer from $2000
	ldx #>color1
	sta vram1
	stx vram1+1
	lda #<color2
	ldx #>color2
	sta vram2
	stx vram2+1
	lda #<1000	; tile counter (1000)
	ldx #>1000
	sta ls_vekta8
	stx ls_vekta8+1
setstart	lda #<sy_4bit	; from $4000 (4Bit)
	ldx #>sy_4bit
	sta src
	stx src+1
	sta src0
	stx src0+1
	rts

strvecs	ldy #3
-	lda vecs,y
	sta vram1,y
	dey
	bpl -
	rts

rstvecs	ldy #3
-	lda vram1,y
	sta vecs,y
	dey
	bpl -
	rts

; ----------------------------------------- Save Rendered Bitmap if REU present

undo	jsr initreu	; reset values
	ldx #>rendered	; from $2000 in C64
	stx rm_werte+1
	ldx #>undorend	; to $008d00 in REU
	stx rm_werte+3
	lda #<8000	; only bitmap!
	ldx #>8000
	sta rm_werte+5
	stx rm_werte+6
	lda #$92		; swap 8000 bytes
	jsr gd_reu

; ---------------------------------------- Init rm_werte

initreu	ldx #6
	lda #0		; RM_WERTE (am Ende): 
sl0	sta rm_werte,x	; $00, $c0, $00, $00, 0, 0, 0
	dex		; - C64 - | -  REU   - | Anzahl 
	bpl sl0
	lda #$c0
	sta rm_werte+1
	rts

; ------------------------------------ Output gadget text routines

tabigad	!wo modegad	; 0
	!wo dithgad	; 2
	!wo xsizegad	; 4
	!wo ysizegad	; 6

settext	lda #<tabigad
	sta ls_vekta8
	lda #>tabigad
	sta ls_vekta8+1
; ---	rts

gettext	lda (ls_vekta8),y
	sta sc_screentab
	iny
	lda (ls_vekta8),y
	sta sc_screentab+1
	lda #0
	tax
	tay
gt0	jsr gd_setpos
	cpx #3
	bne gt0
	stx sc_ho
	jsr gd_trim
	jmp gd_initmove

; ----------------------------------------- Screenlist

b8lst	!by 0
	!by 5,12,15,15,$81
	!wo 0
	!scr "Save Basic8",0
xsizegad	!by 7,22,5,3,$cd
	!wo evxsize
xsizetx	!scr "320",0
ysizegad	!by 9,22,5,3,$ce
	!wo evysize
ysizetx	!scr "200",0
	!by 11,22,5,3,$ce
	!wo evsetcmpr
cmprstx	!scr "yes",0
modegad	!by 13,21,6,3,$ce
	!wo evsetmode
modetx	!scr "mono",0
dithgad	!by 15,18,9,3,$ce		; toggles to $8e
	!wo evsetdith
dithtx	!scr "Ordered",0
	!by 17,13,6,3,$cc
	!wo evsaveb8
	!scr "Save",0
	!by 17,19,8,3,$ce
	!wo evleave
	!scr "Cancel",0
	!by $c0,7,12,6
	!scr "XSize:",0
	!by $c0,9,12,6
	!scr "YSize:",0
	!by $c0,11,12,9
	!scr "Compress:",0
	!by $c0,13,12,7
	!scr "Colors:",0
	!by $c0,15,12,5
	!scr "Dith:",0
	!by $80
	
; ----------------------------------------- Basic8 Header

b8header	!wo 0		; Startadresse (im VDC)
	!tx "brus"	; Kennung
	!by 4		; Typ: Grafik
	!by 0		; Startspalte
	!wo 0		; Startlinie
cmpr	!by 1		; Packflag (1=ja)
mode	!by 0		; Anzahl Farben (0=mono)
wid	!by 40		; Breite in Kacheln (80=640 Pixel)
hgt	!wo 200		; Höhe in Linien
	!by 1		; BGR (dark grey)
	!by 14		; FGR (light grey)
	!by 0		; Border (black)

; ----------------------------------------- Data

dmode	!wo 0		; Verteiler für Dither
evenodd	!by 0		; Flag für Halbbild
hasreu	!by $ff		; REU attached if 0
bkgr	!by 0
frgr	!by 0

prefix	!pet "brus."	; Länge: plus 5, max 11, mode 0/3/4
prefixs	!scr "brus."
prepict	!pet "pict."	; dito, mode 1
prepicts	!scr "pict."
preip	!pet "ip."	; Länge: plus 3, max 13, mode 2
preips	!scr "ip."

xsizets	!scr "320640"
ysizets	!scr "200400"
xyoffs	!by 2,5
xsize	!by 0		; 0: off (320), 1: on (640)
ysize	!by 0		; 0: off (200), 1: on (400)
xzoom	!by 1		; 1: 320,   2: 640
yzoom	!by 0		; 0: 200, $ff: 400
xtiles	!by 40		; zoom off: 40, on: 80
xmask	!by $80		; zoom off: $80, on: $c0

cmprst1	!scr " no@"
cmprst2	!scr "yes@"
caddrs	!wo cmprst1,cmprst2

modetxts	!scr "mono8x2 8x4 8x8 "
modeoffs	!by 3,7,11,15
modes	!by 0

dithtxts	!scr "  Off  OrderedPattern Noise  ----- "
dithoffs	!by 6,13,20,27,34
dither	!by 1

colchunk	!tx "colr"	; Farb-Chunk-Kennung

vecs	!wo 0,0		; Temp für vram1 und vram2

offs	!by $00,$10,$20,$30
	!by $00,$10,$20,$30

dlo	!by <dithoff
	!by <dithrst
	!by <dithpat
	!by <dithnoi

dhi	!by >dithoff
	!by >dithrst
	!by >dithpat
	!by >dithnoi

; ----------------------------------------- 

modend	!eof 
