
!src "..\godotlib.lib"
*	= $c000

; ----------------------------------------- 
; ldr.4BitRGBd
;     Loader for digitized images split into rgb, dithered
;
; 0.99: 20.09.93, first release
; 1.00: 02.01.02, added balancing feature
; 1.01: 03.01.02, bugfix:  lgray and white were exchanged
;                          mouse wasn't switched off
;                 changed: color level set to 3 (instead of 5)
; 1.02: 09.11.26, changed: dither of gray in color mode
;                          (was: no dither if pure gray, fixed)
;
; ----------------------------------------- 

;
	filetype		= $30
	counter		= $31
	gbyte		= $33
	red		= $38
	grn		= $39
	blu		= $3a
	pflg		= $3b
	nflg		= $3c
	minx		= $3d
	min		= $3e
	col0		= $40
	col1		= $41
	col2		= $42
	merkx1		= $43
	mcol1		= $44
	mcol2		= $45
	merkx2		= $47
	packbyte		= $ad
	offx		= $b2
	offy		= offx+1
	adcnt		= $ff
	dbuf		= $3f40
	dbuf1		= $3f50
	rndtab		= $cc00
	avrtab		= $cd00
;
; ----------------------------------------- 

header	jmp start
	!by $80
	!by 0
	!by 1
	!wo modend
	!wo 0
	!pet "RGBmerge+dither "
	!pet "1.02"
	!pet "09.11.26"
	!pet "A.Dettke/W.Kling"
;
; ----------------------------------------- 

start	jsr gd_sproff
	inc used
	ldx used
	beq st2
	dex
	beq st3
	dex
	bne jcan
	jmp st4

st2	jsr getrgb
	jsr maketabs
	stx mflag
	jsr tcopy
	lda #<(getred)
	ldx #>(getred)
	sta doit
	stx doit+1
	lda ls_flen
	sta mflen
	lda ls_nambuf+1
	cmp #$2e
	beq st0
	sta mflag
	bne st1
st0	lda #"R"
	sta ls_nambuf
st1	jsr loadrgb
	jsr checkerr
	bne jcan
	ldx #7
	jsr tcopy
	lda #<(addgrn)
	ldx #>(addgrn)
	sta doit
	stx doit+1
	lda mflag
	bne next
	lda #"G"
	sta ls_nambuf
	jsr loadrgb2
	jsr checkerr
	bne jcan
	lda #"B"
	sta ls_nambuf
last	ldx #14
	jsr tcopy
	lda #<(blurgb)
	ldx #>(blurgb)
	sta doit
	stx doit+1
	jsr loadrgb2
jcan	jsr resetbal
	sec
	rts
;
; ----------------------------------------- 

st3	lda ls_flen
	beq jcan
	jsr loadrgb3
	jsr checkerr
	bmi jcan
next	jsr gd_spron
	lda #0
	sta ls_flen
	jmp gd_eloop
;
; ----------------------------------------- 

st4	lda ls_flen
	beq jcan
	sta mflen
	jmp last
;
; ----------------------------------------- 

resetbal	ldx #$ff
	stx used
	stx gr_redisp
	jsr gd_spron
	ldy #16		; -- added in 1.00 (reset balancing)
	sty gr_ctr
	sty gr_brt
xl0	dey
	tya
	sta gr_btab,y
	bne xl0		; --
	rts

; ----------------------------------------- 

checkerr	lda ls_err2
	and #15
	bne jerror
	rts
;
; ----------------------------------------- 

jerror	jmp error
;
loadrgb2	lda mflen
	sta ls_flen
	sta ls_temp
;
loadrgb3	ldx #0
	lda #2
	stx ls_vekta8
	sta ls_vekta8+1
	stx sc_vekt20
	lda #$40
	sta sc_vekt20+1

loadrgb	jsr gd_xopen
	ldx sc_vekt20
	ldy sc_vekt20+1
	stx sc_texttab
	sty sc_texttab+1
	jsr onebyte
	bne jerror
	tay
	beq ld60
	jsr onebyte
	bne jerror
	jsr onebyte
	bne jerror

ld60	jsr onebyte
	bne jerror
	sta filetype
	tya
	bne ld61
	sta filetype
ld61	asl filetype
	jsr getname
ld6	jsr gd_clrms
	stx offy
	stx counter
	stx counter+1
	lda #200
	sta adcnt
	lda #7
	sta offx
	stx ls_vekta8
	ldy #$7d
	sty ls_vekta8+1
;
ld0	ldy #0
	jsr readfile
	tax
	lda avrtab,x
	jsr readbytes
	sta (sc_texttab),y
	inc sc_texttab
	bne ld1
	inc sc_texttab+1
ld1	lda ls_vekta8
	bne ld2
	dec ls_vekta8+1
ld2	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	beq ld3
;
	jsr action
	lda $90
	beq ld0
	bne ld7
;
ld3	jsr setinfo
ld7	jsr gd_xclose
	jsr gd_xmess
	jsr clrms
cn2	sec
	rts
;
; ----------------------------------------- 

	!by $ad		; padding
	!by $ad
	!by $ad
readbytes	jmp (doit)
;
; ----------------------------------------- 

getred	and #$f0
	rts
;
addgrn	and #$0f
	ora (sc_texttab),y
	rts
;
blurgb	and #$0f
	tax			; -- added in 1.00
	lda gr_btab,x		; --
	sta blu
	lda (sc_texttab),y
	and #$0f
	tax			; -- added in 1.00
	lda gr_btab,x		; --
	sta grn
	lda (sc_texttab),y
	lsr
	lsr
	lsr
	lsr
	tax			; -- added in 1.00
	lda gr_btab,x		; --
	sta red
	jsr assigncol
	ldy #0
	rts
;
; ----------------------------------------- 

messout	ldx #<(message)
	ldy #>(message)
	jmp gd_xtxout2
;
tcopy	ldy #0
tc0	lda txt,x
	beq clrms
	sta message,y
	inx
	iny
	bne tc0
;
clrms	ldx #21
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts
;
action	dec adcnt
	bne ld4
	lda cntwert
	sta adcnt
	ldy offy
	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	rts
;
; ----------------------------------------- 

error	jsr ld7
	jsr jcan
	clc
	rts
;
; ----------------------------------------- 

onebyte	jsr basin
	ldx $90
	rts
;
; ----------------------------------------- 

mflag	!by 0
mflen	!by 0
abuf	!by 0
bbuf	!by 0
byte	!by 0
doit	!by 0,0
used	!by $ff
level	!by 3
cntwert	!by 200
;
; ----------------------------------------- 

filltab	!by 160,93,103,127,126,124,105,109
message	!scr " Red      "
mess	!fill 22,32
	!by 0
;
txt	!scr " Red  @"
	!scr " Green@"
	!scr " Blue @"
;
; ----------------------------------------- 

getrgb	ldx #$2f
stt0	lda gr_rgb,x
	sta cred,x
	dex
	bpl stt0
	rts
;
; ----------------------------------------- 

readfile	lda counter
	ora counter+1
	bne getit2
	inc counter
	jsr basin
	cmp #packbyte
	bne getit1
	bit filetype
	bvc getit1
	jsr basin
	sta counter
	beq rb2
	lda #0
	beq rb3
rb2	lda #1
rb3	sta counter+1
	jsr basin
getit1	sta gbyte
getit2	lda counter
	bne rb4
	dec counter+1
rb4	dec counter
	lda gbyte
	rts

; ----------------------------------------- 

getname	ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts
;
; ----------------------------------------- 

setinfo	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata
;
setname	lda #0
	ldx #<(ls_picname)
	ldy #>(ls_picname)
	bne si3
setloader	lda #17
	ldx #<(ls_iloader)
	ldy #>(ls_iloader)
	bne si3
setmode	lda #25
	ldx #<(ls_imode)
	ldy #>(ls_imode)
	bne si3
setdata	lda #33
	ldx #<(ls_idrive)
	ldy #>(ls_idrive)
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts
;
nbuf	!fill 16,32
	!by 0
	!scr "4BitRGB@"
modetx	!scr "160x200@"
datatype	!scr "Color@"
;
; ----------------------------------------- 

maketabs	ldx #0
mtl	txa
	and #$0f
	sta bbuf
	txa
	lsr
	lsr
	lsr
	lsr
	clc
	adc bbuf
	lsr
	rol rndtab,x
	tay
	lda dnib,y
	sta avrtab,x
	inx
	bne mtl
	rts
;
; ----------------------------------------- 

assigncol	lda red
	clc
	adc grn
	adc blu
	tax
	lda avr,x
	ldy #0
	cmp red
	bne as0
	iny
as0	cmp grn
	bne as1
	iny
as1	cmp blu
	bne as2
	iny
as2	cpy #2
	bcc cl51
	tax

; ----------------------------------------- dithering two grays

	lda grayindhi,x
	sta merkx1
	lda grayindlo,x
	tay
	lda cpref,y
	tay
	lda dnib,y
	tay			; first value to .y

	lda gray,x
	tax
	lda cpref,x
	tax
	lda dnib,x		; second value to .a
	rts
; ----------------------------------------- dithering two colors

cl51	ldx level
cl6	lda #0
	sta dbuf1,x
	sta pflg
	sta nflg
	lda cred,x
	sec
	sbc red
	bne rd0
	inc nflg
rd0	bcs rpos
	eor #$ff
	adc #1
	inc pflg
rpos	tay
	lda quad,y
	sta dbuf,x
	lda cgrn,x
	sec
	sbc grn
	bne gn0
	inc nflg
gn0	bcs gpos
	eor #$ff
	adc #1
	inc pflg
gpos	tay
	lda quad,y
	clc
	adc dbuf,x
	sta dbuf,x
	bcc gsk
	inc dbuf1,x
gsk	lda cblu,x
	sec
	sbc blu
	bne bl0
	inc nflg
bl0	bcs bpos
	eor #$ff
	adc #1
	inc pflg
bpos	tay
	lda pflg
	beq nopf
	clc
	adc nflg
	cmp #3
	beq nopf
	lda #2
	!by $2c
nopf	lda #0
	clc
	adc quad,y
	adc dbuf,x
	sta dbuf,x
	bcc bsk
	inc dbuf1,x
bsk	inx
	cpx #16
	bne cl6
;
	stx min+1			; is 16 now
	ldx level			; (sort colors:)
ml1	lda dbuf1,x		; is 0 1st
	tay
	cmp min+1
	beq ms1
	bcs ms2
	bcc ms3
ms1	lda dbuf,x
	cmp min
	beq ms4
	bcs ms2
ms3	lda dbuf,x
ms4	sty min+1			; returns the 2 most frequent colors
	sta min
	stx minx
ms2	inx
	cpx #16
	bne ml1

	lda min+1			; dithering two colors
	sta col2
	lda min
	sta col1
	ldy minx
	sty col0
	lda #$ff
	sta dbuf1,y
	stx min+1

	ldx level
rt0	lda dbuf1,x
	tay
	cmp min+1
	beq rt1
	bcs rt2
	bcc rt3
rt1	lda dbuf,x
	cmp min
	beq rt4
	bcs rt2
rt3	lda dbuf,x
rt4	sty min+1
	sta min
	stx minx
rt2	inx
	cpx #16
	bne rt0

	lda col1			; are 0? 
	ora col2
	beq rt5			; then treat differently

	lda col1
	clc
	adc min
	sta mcol1
	lda col2
	adc min+1
	sta mcol2
	ldx #4
rt6	asl min
	rol min+1
	dex
	bne rt6

	ldx #0
rt7	lda min
	sec
	sbc mcol1
	sta min
	lda min+1
	sbc mcol2
	bmi rt5
	sta min+1
	inx
	bne rt7

rt5	stx merkx1		; is 16
	lda col0
	tax
	lda cpref,x
	tax
	lda dnib,x
	tay			; first value to .y

	lda minx
	tax
	lda cpref,x
	tax
	lda dnib,x
	sta merkx2
	lda sc_texttab
	and #15
	tax
	lda colind,x
	ldx merkx2
	cmp merkx1
	beq rt8
	bcc rt8

	txa			; second value to .a
	rts

rt8	tya
	rts
;
; ----------------------------------------- 

avr	!by 0,0,1,1,1,2,2,2
	!by 3,3,3,4,4,4,5,5,5
	!by 6,6,6,7,7,7,8,8,8
	!by 9,9,9,10,10,10
	!by 11,11,11,12,12,12
	!by 13,13,13,14,14,14
	!by 15,15
;
quad	!by 0,1,4,9,16,25,36,49,64,81,100,121,144,169,196,225
;
cred	!by 11,7,3,0,15
	!by 04,15,15,12,04,08
	!by 08,00,02,04,15

cgrn	!by 11,7,3,0,15
	!by 02,08,08,00,15,00
	!by 08,00,15,15,15

cblu	!by 11,7,3,0,15
	!by 00,08,03,12,15,00
	!by 15,08,02,08,08

cpref	!by 11,7,3,0,15
	!by 2,9,6,5,12,4
	!by 8,1,10,14,13
;
gray	!by 3,3,2,2,2,2,1,1,1,1,0,0,0,0,4,4,4

grayindlo	!by 3,3,3,2,2,2,2,1,1,1,1,0,0,0,0,4,4
grayindhi	!by 2,2,2,2,1,1,1,1,0,0,0,0,4,4,4,4,4


dnib	!by $00,$11,$22,$33
	!by $44,$55,$66,$77
	!by $88,$99,$aa,$bb
	!by $cc,$dd,$ee,$ff,$bb

colind	!by 16,08,14,06,04,12,02,10
	!by 13,05,15,07,01,09,03,11

; ----------------------------------------- 

modend	!eof
