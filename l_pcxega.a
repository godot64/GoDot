
	*= $c000
	!src "..\godotlib.lib"
	!ct pet

; ----------------------------------- 
;
; ldr.PCX-EGA
;   Loader for 16 color PCX images
;
; 1.00,         , first release
; 1.01, 20.05.93, 
; 1.02,
; 1.03, 19.07.93,
; 1.04, 11.02.94,
; 1.05, 15.11.17, added: recognition of balancing settings
;
; ----------------------------------- 

; ----------------------------------- Equates

	bytes		= $30
	red		= $35
	grn		= $36
	blu		= $37
	minx		= $3a
	counter		= $3c
	gpx		= $3d
	gpy		= $3e
	gbyte		= $3f
	min		= $40
	gsum		= min
	zp0		= $42
	zp1		= $44
	zp2		= $46
	zp3		= $48
	zp4		= $4a
	ap0		= $4c
	ap1		= $4d
	ap2		= $4e
	ap3		= $4f
	ap4		= $50
	adcnt		= $51
	nflg		= $52
	zflg		= $53

	dst		= $b0
	spalte		= $b1
	offy		= $b2
	offx		= $b3

	dst0		= $f7
	bbuf		= $f9
	lcnt8		= $fa
	lcnt		= $fb
	bcnt		= $fc
	planes		= $fd

	pal		= $ca00
	rbk		= pal+64
	gbk		= rbk+64
	bbk		= gbk+64
	p0		= $cb00
	dbuf		= $cd00
	dbuf1		= dbuf+16

	status		= $90
	shift		= $028d

; ----------------------------------- Header

header	jmp start
	!by $80
	!by 4
	!by 1
	!wo modend
	!wo 0
	!tx "PCX 16 Colors   "
	!tx "1.05"
	!tx "15.11.17"
	!tx "W.Kling/A.Dettke"

addtext	!tx "max 1024 Breite "
	!tx "4 Bit/1 Plane   "
	!tx "1 Bit/4 Planes  "
	!by 0

; ----------------------------------- Start of Loader

start	ldx #$2f		; retrieve system rgb table
stt0	lda gr_rgb,x
	sta cred,x
	dex 
	bpl stt0

; ----------------------------------- Main

stt1	ldx used		; first start: requester
	bmi requ
	beq cancel
	cpx #3
	bcs cancel

	dec used		; grey: 0, color: 1
	jsr getname
	jsr gd_xopen	; open
	jsr gd_clrms

	ldx #6		; tcopy
cl0	lda pcx,x
	sta message,x
	dex 
	bpl cl0
	stx coreld
	lda #32
	ldx #24
cl	sta mess,x
	dex 
	bpl cl

	lda #200
	sta adcnt
	lda #0
	sta offy
	sta counter

	jsr gethd		; get pcx header from file
	jsr checkpcx	; get parameters
	ldx rsizeh	; size?
	lda ausgl,x
	sta acnt
	jsr getbody	; get image body

	lda which		; image info
	beq cl01
	jsr getdatac
	beq err
cl01	jsr getdatag

; ----------------------------------- 

err	jsr gd_xclose	; close file
	jsr gd_spron
	jsr gd_xmess

; ----------------------------------- 

cancel	lda #$ff
	sta used

	lda shift		; Shift (-Lock) gedrückt?
	and #1
	bne cn2		; ja, Sprung

	ldy #16		; sonst: Balancing-Tabelle initialisieren
	sty gr_ctr
	sty gr_brt
lll	dey 
	tya 
	sta gr_btab,y
	bne lll

cn2	sec 
	rts 

; ----------------------------------- Requester

requ	inc used		; used: 0
	ldx #<(pcxlst)
	ldy #>(pcxlst)
	jsr gd_xmloop
	jmp stt1

; ----------------------------------- Event: Color

sevcol	inc used		; used: 2

; ----------------------------------- Event: Grey

sevgrey	inc used		; used: 1
	ldx used
	dex 
	stx which
	ldx #1
	jsr gd_xload

	lda #3		; used: 3 (=finished)
	sta used
	sec 
	rts 

; ----------------------------------- Action

adinc	ldy offy
	dec adcnt
	lda adcnt
	and #7
	bne adskip
	lda filltab
	sta mess,y
	inc offy
	bne messout
adskip	tax 
	lda filltab,x
	sta mess,y

messout	ldx #<(message)
	ldy #>(message)
	jmp gd_xtxout2

filltab	!by 160,93,103,127,126,124,105,109

pcx	!scr " PCX   "
message	!scr " PCX   "
mess	!scr "........................."
	!by 0

; ----------------------------------- 

err1	!scr "    ERROR: Width too large.     "
err2	!scr "    ERROR: Not a PCX file.      "
err4	!scr "        Use ldr.PCX-VGA.        "

; ----------------------------------- 

checkpcx	lda colplanes	; # of planes
	lsr 		; more than 1?
	bne cp0
	ldx bits		; no, # of bits per plane
	lda cols,x	; gives # of colors
	sta col
	cpx #4		; 16 colors?
	bne cp0
	inc coreld	; no, set flag

cp0	ldx xmax+1	; get width
	dex 
	bpl cp1
	inx 
cp1	stx rsizeh
	cpx #4		; >1024?
	bcs failc		; yes, error
	lda maxbytes,x
	sta bpln

noe	ldx used		; mode?
	beq il3
	lda #<(assigncol)	; color
	ldy #>(assigncol)
	bne il4

il3	lda #<(makegrey)	; grey
	ldy #>(makegrey)
il4	sta convmode
	sty convmode+1
	jmp getpal

; ----------------------------------- 

convcol	jmp (convmode)

convmode	!by 0,0

; ----------------------------------- Failures

faila	ldx #32		; "Not a PCX file."
	!by $2c
failc	ldx #0		; "Width too large."
	!by $2c
faild	ldx #64		; "Use ldr.PCX-VGA."
	ldy #0
fl0	lda err1,x
	sta message,y
	inx 
	iny 
	cpy #32
	bne fl0

	jsr err
	jsr gd_clrms
	jsr messout
	clc 
	jmp fail3

; ----------------------------------- 

fl1	jsr err
	jmp fail3

; ----------------------------------- Read File Header

gethd	ldx #0
	stx status
	jsr basin		; first byte $0a?
	cmp #$0a
	bne faila
	sta hdbuf
	inx 
	stx colplanes

hdloop	lda status	; read header to buffer
	bne hd1
	jsr basin
	sta hdbuf,x
	inx 
	cpx #128
	bne hdloop
hd1	bmi fl1

	inc xmax		; in header: adjust width
	bne hd2
	inc xmax+1
hd2	lda bits		; check colors: >255?
	cmp #5
	bcs faild		; yes, error

	lda colplanes	; check colors: >255?
	beq faild
	cmp #5
	bcs faild		; yes, error

	tay 
	lda cols,y
	sta col
	lda pltab,y
	sta planes

	ldx #0
	stx zp0
	stx bytes
	lda #>(p0)
	sta zp0+1
	sta zp1+1
	sta zp2+1
	sta zp3+1
	lda bytepline+1
	sta bytes+1
hd0	clc 
	lda bytes
	adc bytepline
	sta zp1,x
	sta bytes
	bcc hd3
	inc zp1+1,x
	inc bytes+1
hd3	inx 
	inx 
	dey 
	bne hd0
	rts 

; ----------------------------------- 

getpal	ldx type
	dex 
	bmi getp
	beq getp
	dex 
	bne getp

	ldx which
	bne col1

gr1	ldx #15
gr0	lda dnib,x
	sta pal,x
	dex 
	bpl gr0
	rts 

; ----------------------------------- 

col1	ldx #15
col0	lda grey,x
	tay 
	lda cpref,y
	tay 
	lda dnib,y
	sta pal,x
	dex 
	bpl col0
	rts 

; ----------------------------------- Retrieve Palette

getp	ldx #0
	ldy #0

gpl4	jsr pconv
	sta red
	jsr pconv
	sta grn
	jsr pconv
	sta blu

	stx gpx
	sty gpy
	jsr convcol
	ldx gpx
	ldy gpy
	sta pal,y

	iny 
	cpy col
	bne gpl4
	rts 

pconv	lda palette,x	; care for balancing
	lsr 
	lsr 
	lsr 
	lsr 
	stx gpx
	tax
	lda gr_btab,x	; change value according to Balancing settings
	ldx gpx
	inx
	rts

; ----------------------------------- 

assigncol	lda red
	cmp grn
	bne cl51
	cmp blu
	bne cl51
	tax 
	lda grey,x
	jmp grok

cl51	ldx level
cl6	lda #0
	sta dbuf1,x
	sta nflg
	sta zflg
	lda cred,x
	sec 
	sbc red
	bne rd0
	inc zflg
rd0	bcs rpos
	eor #$ff
	adc #1
	inc nflg
rpos	tay 
	lda quad,y
	sta dbuf,x
	lda cgrn,x
	sec 
	sbc grn
	bne gn0
	inc zflg
gn0	bcs gpos
	eor #$ff
	adc #1
	inc nflg
gpos	tay 
	lda quad,y
	clc 
	adc dbuf,x
	sta dbuf,x
	bcc gsk
	inc dbuf1,x
gsk	lda cblu,x
	sec 
	sbc blu
	bne bl0
	inc zflg
bl0	bcs bpos
	eor #$ff
	adc #1
	inc nflg
bpos	tay 
	lda nflg
	beq nopf
	clc 
	adc zflg
	cmp #3
	beq nopf
	lda #2
	!by $2c
nopf	lda #0
	clc 
	adc quad,y
	adc dbuf,x
	sta dbuf,x
	bcc bsk
	inc dbuf1,x
bsk	inx 
	cpx #16
	bne cl6

	stx min+1
	ldx level
ml1	lda dbuf1,x
	tay 
	cmp min+1
	beq ms1
	bcs ms2
	bcc ms3
ms1	lda dbuf,x
	cmp min
	beq ms4
	bcs ms2
ms3	lda dbuf,x
ms4	sty min+1
	sta min
	stx minx
ms2	inx 
	cpx #16
	bne ml1
	lda minx
grok	tay 
	lda cpref,y
	tay 
	lda dnib,y
	rts 

; ----------------------------------- 

quad	!by 0,1,4,9,16,25,36,49,64,81,100,121,144,169,196,225

cred	!by 0,3,7,11,15,0,6,7
	!by 7,15,7,15,7,15,0,7
cgrn	!by 0,3,7,11,15,0,3,0
	!by 0,7,7,7,15,15,7,15
cblu	!by 0,3,7,11,15,7,0,0
	!by 7,0,15,7,15,0,0,7

cpref	!by 11,7,3,0,15,2,9,6
	!by 5,12,4,8,1,10,14,13

grey	!by 3,3,3,2,2,2,2,1,1,1,1,0,0,0,0,4,4

; ----------------------------------- 

readline	ldy #0
	sty zp4
	lda #>(p0)
	sta zp4+1
	lda bytes
	sta bplcnt
	lda bytes+1
	sta bplcnt+1
next	jsr readpcx
	sta (zp4),y
rl01	jsr incdec
	lda bplcnt
	ora bplcnt+1
	bne next
rl02	rts 

; ----------------------------------- 

readpcx	lda comp
	beq getit0
	lda counter
	bne getit2
	inc counter
	jsr basin
	ldx status
	bne fail4
b1	tax 
	and #$c0
	cmp #$c0
	bne getit1
	txa 
	and #$3f
	sta counter
getit0	jsr basin
	ldx status
	bne fail5
b2	tax 
getit1	txa 
	sta gbyte
getit2	dec counter
	lda gbyte
	rts 

; ----------------------------------- 

fail4	pha 
	txa 
	and #$4f
	bne b3
	pla 
	jmp fail2
b3	pla 
	jmp b1

fail5	pha 
	txa 
	and #$4f
	bne b4
	pla 
	jmp fail2
b4	pla 
	jmp b2

fail2	pla 
	pla 
fail3	pla 
	pla 
	inc used
	rts 

; ----------------------------------- 

cols	!by 0,2,4,8,16

pltab	!by 0,1,3,7,15

dnib	!by $00,$11,$22,$33
	!by $44,$55,$66,$77
	!by $88,$99,$aa,$bb
	!by $cc,$dd,$ee,$ff

; ----------------------------------- 

makegrey	lda red
	cmp grn
	bne gs51
	cmp blu
	bne gs51
	jmp grok0

gs51	asl 
	tay 
	lda rtab,y
	sta gsum
	lda rtab+1,y
	sta gsum+1
	lda grn
	asl 
	tay 
	lda gtab,y
	clc 
	adc gsum
	sta gsum
	lda gtab+1,y
	adc gsum+1
	sta gsum+1
	lda blu
	asl 
	tay 
	lda btab,y
	clc 
	adc gsum
	sta gsum
	lda btab+1,y
	adc gsum+1
	sta gsum+1
	lda gsum
	clc 
	adc #128
	lda gsum+1
	adc #0
grok0	tay 
	lda dnib,y
	rts 

; ----------------------------------- Read Image

getbody	lda coreld	; which data structure?
	beq gb0
	jmp getb2

; ----------------------------------- Read Image Data (4 bits, 1 plane)

gb0	lda #<($4000)
	ldx #>($4000)
	sta dst0
	sta dst
	stx dst0+1
	stx dst+1

	lda #25
	sta lcnt8
ln8	lda #8
	sta lcnt
lnl	jsr adinc
	jsr readline
	jsr skipline

	ldy #0
byl	lda bytes
	sta bplcnt
	lda bytes+1
	sta bplcnt+1
	sty my
	lda #4
	sta bcnt

btl	lda bplcnt
	ora bplcnt+1
	beq s63
s62	ldy #0
	lda (zp0),y
	pha 
	lsr 
	lsr 
	lsr 
	lsr 
	tax 
	lda pal,x
	and #$f0
	sta bbuf
	pla 
	and #15
	tax 
	lda pal,x
	and #$0f
	ora bbuf
	ldx #0
	sta (dst,x)
	lda bplcnt
	ora bplcnt+1
	beq s63
	jsr inczp0

s63	inc dst
	bne s30
	inc dst+1
s30	dec bcnt
	bne btl

	lda bplcnt
	ora bplcnt+1
	beq s64
	jsr decbpl
s64	jsr skipbyte2
	lda dst
	clc 
	adc #28
	sta dst
	bcc s40
	inc dst+1
s40	ldy my
	iny 
	cpy #40
	bcc byl

	lda #<(p0)
	sta zp0
	lda #>(p0)
	sta zp0+1
	lda dst0
	clc 
	adc #4
	sta dst0
	sta dst
	bcc s50
	inc dst0+1
s50	lda dst0+1
	sta dst+1
	dec lcnt
	beq s51
	jmp lnl

s51	lda dst0
	clc 
	adc #<(1248)
	sta dst0
	sta dst
	lda dst0+1
	adc #>(1248)
	sta dst0+1
	sta dst+1
	dec lcnt8
	beq s52
	jmp ln8
s52	rts 

; ----------------------------------- Read Image Data (1 bit, 4 planes)

getb2	lda #<($4000)
	ldx #>($4000)
	sta dst0
	sta dst
	stx dst0+1
	stx dst+1

	lda #25
	sta lcnt8
lnloop8	lda #8
	sta lcnt
lnloop	jsr adinc
	jsr readline
	jsr skipline

	ldy #0
byloop	lda #4
	sta bcnt
	lda (zp3),y
	sta ap3
	lda (zp2),y
	sta ap2
	lda (zp1),y
	sta ap1
	lda (zp0),y
	sta ap0

btloop	cpy bytepline
	bcs s6
	asl ap3
	rol 
	asl ap2
	rol 
	asl ap1
	rol 
	asl ap0
	rol 
	and planes
	tax 
	lda pal,x
	and #$f0
	sta bbuf
	asl ap3
	rol 
	asl ap2
	rol 
	asl ap1
	rol 
	asl ap0
	rol 
	and planes
	tax 
	lda pal,x
	and #$0f
	ora bbuf
	ldx #0
	sta (dst,x)

s6	inc dst
	bne s3
	inc dst+1
s3	dec bcnt
	bne btloop

	jsr skipbyte
	lda dst
	clc 
	adc #28
	sta dst
	bcc s4
	inc dst+1
s4	iny 
	cpy bpln
	bcc byloop

	lda dst0
	clc 
	adc #4
	sta dst0
	sta dst
	bcc s5
	inc dst0+1
s5	lda dst0+1
	sta dst+1
	dec lcnt
	beq rdy
	jmp lnloop

rdy	lda dst0
	clc 
	adc #<(1248)
	sta dst0
	sta dst
	lda dst0+1
	adc #>(1248)
	sta dst0+1
	sta dst+1
	dec lcnt8
	beq rdy1
	jmp lnloop8
rdy1	rts 

; ----------------------------------- Scale Image (width)

skipbyte	ldx rsizeh
	beq rl1
	dec acnt
	bne rl3
	lda ausgl,x
	sta acnt
rl3	iny 
	dex 
	bne rl3
rl1	rts 

; ----------------------------------- Scale Image (width)

skipbyte2	ldx rsizeh
	beq rl10
	dec acnt
	bne rl30
	lda ausgl,x
	sta acnt
rl30	jsr inczp0
	dex 
	bne rl30
rl10	rts 

; ----------------------------------- Scale Image (height)

skipline	ldx rsizeh
	beq rl100
rl000	stx mx
	jsr readline
	ldx mx
	dex 
	bne rl000
rl100	rts 

; ----------------------------------- Proceed

incdec	inc zp4
	bne decbpl
	inc zp4+1
decbpl	lda bplcnt
	bne s60
	dec bplcnt+1
s60	dec bplcnt
	rts 

; ----------------------------------- 

inczp0	inc zp0
	bne s70
	inc zp0+1
s70	rts 

; ----------------------------------- 

rtab	!by $00,$00,$4d,$00
	!by $9a,$00,$e7,$00
	!by $34,$01,$81,$01
	!by $ce,$01,$1b,$02
	!by $68,$02,$b5,$02
	!by $02,$03,$4f,$03
	!by $9c,$03,$e9,$03
	!by $36,$04,$83,$04

gtab	!by $00,$00,$97,$00
	!by $2e,$01,$c5,$01
	!by $5c,$02,$f3,$02
	!by $8a,$03,$21,$04
	!by $b8,$04,$4f,$05
	!by $e6,$05,$7d,$06
	!by $14,$07,$ab,$07
	!by $42,$08,$d9,$08

btab	!by $00,$00,$1c,$00
	!by $38,$00,$54,$00
	!by $70,$00,$8c,$00
	!by $a8,$00,$c4,$00
	!by $e0,$00,$fc,$00
	!by $18,$01,$34,$01
	!by $50,$01,$6c,$01
	!by $88,$01,$a4,$01

; ----------------------------------- 

col	!by 0
coreld	!by $ff
rsizeh	!by 0
ausgl	!by 0,0,5,16
maxbytes	!by 40,80,100,128
bpln	!by 40
mx	!by 0
my	!by 0
acnt	!by 0
bplcnt	!wo 0
used	!by $ff
which	!by 0
level	!by 0
lvlnum	!tx "012345"

; ----------------------------------- 

pcxlst	!by 0
	!by 4,11,18,16,$81,0,0
	!by 76,15,1,4,32,77,19,68,15,19,32,80,67,88,0
	!by 9,11,18,3,$ca,<(sevgrey),>(sevgrey)
	!by 71,18,5,25,32,83,3,1,12,5,0
	!by 12,11,11,3,$c8,<(sevcol),>(sevcol)
	!by 67,15,12,15,18,0
lvlgad	!by 12,22,7,3,$cf,<(sevlvl),>(sevlvl)
	!by 76,22,12,32
lvltx	!by $30,0
	!by 15,11,18,3,$ca,<(cn2),>(cn2)
	!by 67,1,14,3,5,12,32,76,15,1,4,0
	!by $c0,6,14,10,67,15,14,22,5,18,20,32,20,15,0
	!by $80

; ----------------------------------- Event: Level

sevlvl	lda spalte
	cmp #25
	bcs lvlinc
lvldec	dec level
	bpl lvl0
	lda #4
	sta level
lvlinc	inc level
lvl0	ldx level
	cpx #6
	bcc lvl1
	ldx #0
	stx level
lvl1	lda lvlnum,x
	sta lvltx
	jsr gettab
	ldy #6
	jmp gd_xtxout1

; ----------------------------------- 

gettab	lda #<(lvlgad)
	sta sc_screentab
	lda #>(lvlgad)
	sta sc_screentab+1
	lda #0
	tax 
	tay 
gt0	jsr gd_setpos
	cpx #3
	bne gt0
	stx sc_ho
	jsr gd_trim
	jmp gd_initmove

; ----------------------------------- 

getname	ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx 
	cpx #16
	bcc si0
si1	rts 

getdatac	ldx #4
	!by $2c
getdatag	ldx #9
	ldy #4
sinfo0	lda dtextc,x
	sta datatype,y
	dex 
	dey 
	bpl sinfo0
;         rts

;  setinfo   jsr getdatag
	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata

setname	lda #0
	ldx #<(ls_picname)
	ldy #>(ls_picname)
	bne si3
setloader	lda #17
	ldx #<(ls_iloader)
	ldy #>(ls_iloader)
	bne si3
setmode	lda #25
	ldx #<(ls_imode)
	ldy #>(ls_imode)
	bne si3
setdata	lda #33
	ldx #<(ls_idrive)
	ldy #>(ls_idrive)
si3	stx sc_texttab
	sty sc_texttab+1
	tax 
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx 
	iny 
	bne si4
si5	rts 

nbuf	!by 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0
	!by 80,67,88,45,69,71,65,0; "PCX-EGA"
modetx	!by $33,$32,$30,24,$32,$30,$30,0; "320x200"
datatype	!by 67,15,12,15,18,0
ttext	!by 84,5,24,20,32,32,32; "Text"
htext	!by $33,$32,$30,24,$32,$30,$30; "320x200"
mtext	!by $31,$36,$30,24,$32,$30,$30; "160x200"
dtextc	!by 67,15,12,15,18; "Color"
dtextg	!by 71,18,1,25,32; "Gray"

; ----------------------------------- 

hdbuf	!by 0
version	!by 0
comp	!by 0
bits	!by 0
xmin	!wo 0
ymin	!wo 0
xmax	!wo 0
ymax	!wo 0
xsize	!wo 0
ysize	!wo 0
palette	!by 0,0,0
	!by 0,0,0
	!by 0,0,0
	!by 0,0,0
	!by 0,0,0
	!by 0,0,0
	!by 0,0,0
	!by 0,0,0
	!by 0,0,0
	!by 0,0,0
	!by 0,0,0
	!by 0,0,0
	!by 0,0,0
	!by 0,0,0
	!by 0,0,0
	!by 0,0,0
reserved	!by 0
colplanes	!by 0
bytepline	!wo 0
type	!wo 0
dummy	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0

; ----------------------------------- 

modend	!eof 
