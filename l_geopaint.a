
	*= $c000
	!src "..\godotlib.lib"
	!ct pet

; ----------------------------------- 
; Loader GeoPaint 
;        1.00, 15.12.03: first release
;        1.01, 17.12.03, bugfix: correct retrieving of 1st block
;        1.02, 06.11.17, bugfix: recognition whether 1st block is empty
; ----------------------------------- 

; ----------------------------------- Equates

	width	= $30	; width in tiles
	col0	= $31	; paper color
	col1	= $32	; ink colors
	col2	= $33
	col3	= $34

	pass	= $35
	blrows	= $36
	dst	= $37	; /$38
	dst0	= $39	; /$3a
	src	= $3b	; /$3c
	src0	= $3d	; /$3e
	adcnt	= $3f	; activity counter
	btcnt	= $40	; counts 4 bytes
	tilecnt	= $41	; counts WIDTH tiles
	offx	= $42
	offy	= $43
	lcnt	= $44
	empty	= $45
	gbyte	= $46
	gbyte2	= $47
	merky	= $48
	comp	= $49
	skip	= $4a
	blcnt	= $4b
	cr	= $4c	; /$4d
	vr	= $4e	; /$4f
	mbr	= $50
	mho	= $51
	msp	= $52
	mrc	= $53
	zstart	= $54
	sstart	= $55
	vekt40	= $56	; /$57
	vekt42	= $58	; /$59
	vekt44	= $5a	; /$5b

	status	= $90	; floppy status byte
           
	buffer	= $0200
	cred	= gr_rgb
	cgrn	= cred+16
	cblu	= cgrn+16

	readbuf	= $2000
	colors	= $2508
	colors2	= $2558
	buf16	= $3f40
	byte1buf	= $3f80
	byte2buf	= $3f81

	intout	= $bdcd 	; convert word value to digits

	blockbuf	= $cc00
	blockbuf2	= $cd00

	get	= $ffe4

	shspace	= 160
	hlinie	= $e0
	vlinie	= $e1
	eck	= $e2

	hsign	= gr_pattern
	vsign	= gr_pattern+8
	esign	= gr_pattern+16

; ----------------------------------- Header

godheader	jmp start
	!by $80
	!by 0		; no own requester
	!by 0
	!wo modend
	!wo 0
	!tx "geoPaint 1:1 ldr"
	!tx "1.02"
	!tx "06.11.17"
	!tx "A.Dettke        "

; ----------------------------------- Main

start	ldx used
	bmi readhd
cancel	jsr last
	lda #$ff
	sta used
freq	sec
	rts
;
; -----------------------------------

cont	clc
	rts
;
; -----------------------------------

readhd	inc used
	inx
	stx xpos		; reset skip values
	stx ypos
	jsr rsbufs	; reset buffer addresses

	jsr getname
	jsr toascii	; convert name to ASCII

	jsr gd_xopen	; retrieve list of records (1 block)
	inc 1
	jsr getblock
	dec 1
	jsr ld5

	ldy #0
	jsr findgr	; ### 1.02, is empty?
	bne +
	inc used		; yes, no GeoPaint image
	inc used

+	jsr checkhght	; get actual height of image

	jsr requ		; open requester
	ldx #<(geoslst)
	ldy #>(geoslst)
	lda used		; error?
	bne rh0		; yes, show and leave
	jsr gd_xmloop	; no, wait...
rh2	jmp start

rh0 	jsr gd_screen	; show requester
	ldx used
	cpx #2
	bcs rh4
	jsr faila		; error message
	jmp rh3
rh4	jsr failb
rh3	stx sc_keyprs	; wait for key
rh1	lda sc_keyprs
	beq rh1
	bne rh2		; leave

; ----------------------------------- read image

sevgeos	ldx #1
	stx adcnt
	dex
	jsr tcopy
	ldx #$7d		; clear 4bit buffer
	lda #$40
	sta dst+1
	lda #0
	sta dst
	tay
spx0	sta (dst),y
	iny
	bne spx0
	inc dst+1
	dex
	bne spx0

	inc 1
	jsr readgeos
	dec 1

	jsr gd_spron
	jsr tobcode

ld3	jsr setinfo
ld5	jsr gd_xclose
	jsr gd_spron
	jsr gd_xmess
	sec
	rts
;
; -----------------------------------

byte2	!by 0		; height of image
byte3	!by 80		; width is always 80
cntr	!by 8		; skip counter
mro	!by 40		; right skip
rbr	!by 40		; width to read
pbr	!by 80		; width of image
pho	!by 25
xpos	!by 0		; skip offsets
ypos	!by 0
xkoo	!by 94		; selectbox (frame)
ykoo	!by 88
xkoomk	!by 0
ykoomk	!by 0
xmax	!by 134		; bottom limit
ymax	!by 163
maxbr	!by 40
maxho	!by 25
used	!by $ff
pbuffer	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
zbr	!by 0
zho	!by 0
zsph	!by 0
zspv	!by 0
hwert	!by $80,$c0,$e0,$f0,$f8,$fc,$fe
vrbuf	!wo colors
;
sprou	!by $fc,$ff,$ff
sprmi	!by $04,$00,$80
conv	!by $00,$0f,$f0,$ff
;
; ----------------------------------- Read Graphics File

readgeos	jsr opendch
	lda #<$4000
	sta dst0
	lda #>$4000
	sta dst0+1
	lda ypos
	lsr
	sta blcnt
	ldx #0		; count block lines
	stx blrows
	stx pass
rg00	jsr clearbuf	; sets readbuffer for PUT and clears it
	lda blcnt
	asl
	tay
	iny
	iny
	lda blockbuf-2,y	; open graphics file
	sta empty
	tax
	lda blockbuf-1,y
	jsr getblock2
	jsr decode
	lda vekt42
	sta vrbuf
	jsr gd_clrms
	jsr convert
	inc blcnt
	lda blrows
	cmp height
	bcs rg01
	cmp #25
	bcc rg00
	
rg01	jmp ld5
	
; -----------------------------------

put	ldx #0
	sta (src,x)
	inc src
	bne pt0
	inc src+1
pt0	rts

; -----------------------------------

toascii	ldx #15
tp2	lda ls_nambuf,x
	bpl tp1
	and #$7f
	ora #$20
tp1	cmp #","
	beq tp6
	cmp #$22
	bne tp7
tp6	lda #"?"
tp7	sta ls_nambuf,x
	dex
	bpl tp2
	rts

tobcode	ldx #15
tp3	lda ls_nambuf,x
	cmp #"?"
	bne tp5
	lda nbuf,x
tp5	eor #$e0
	clc
	adc #32
	bpl tp4
	adc #64
	bpl tp4
	eor #$a0
tp4	sta nbuf,x
	dex
	bpl tp3
	rts
	
; ----------------------------------- Decode RLE

decode	lda #1
	sta blindex
dc02	jsr getbyte2
	beq decnext
	cmp #$41
	bcs dc00
	sta comp
dc01	jsr getbyte2
	jsr put
	dec comp
	bne dc01
	beq dc02

dc00	cmp #$81
	bcs dc03
	sec
	sbc #$40
	sta comp
	lda #0
	sta merky
dc04	jsr getbyte2
	ldy merky
	sta geopat,y
	inc merky
	lda merky
	cmp #8
	bne dc04
dc06	ldy #0
dc05	lda geopat,y
	jsr put
	iny
	cpy #8
	bne dc05
	dec comp
	bne dc06
	beq dc02

dc03	sbc #$80
	sta comp
	jsr getbyte2
	ldy comp
dc07	jsr put
	dey
	bne dc07
	beq dc02

decnext	rts

; -----------------------------------

convert	lda #<(320)	; number of bytes across
	sta ls_vekta8
	lda #>(320)
	sta ls_vekta8+1
	lda blrows
	cmp #25
	bcs decnext
	lda pass
	bne cv00
	lda firstp
	ldy firstp+1	; vector to bitmap ($2000)
	bne cv01
cv00	lda secondp
	ldy secondp+1
cv01	sta cr
	sty cr+1
	lda dst0
	sta sc_texttab
	lda dst0+1	; vector to 4bit ($4000)
	sta sc_texttab+1
	lda vrbuf+1	; vector to hires colors ($2508)
	sta vr+1
	lda vrbuf
	sta vr
	ldy #0
;
hloop1	ldx #8		; 8 lines per card
	stx lcnt
hilp	lda (cr),y	; get hires bits
	sta gbyte
	jsr action
	ldy #0
	ldx #4
	lda empty
	beq hlp2
	lda (vr),y
hlp2	sta gbyte2
	asl gbyte
	bcc hlp3
	lsr
	lsr
	lsr
	lsr
hlp3	and #$0f
	tay
	lda dnib,y
	and #$f0
	sta col0
	lda gbyte2
	asl gbyte
	bcc hlp4
	lsr
	lsr
	lsr
	lsr
hlp4	and #$0f
	tay
	lda dnib,y
	and #$0f
	ora col0
	ldy #0
	sta (sc_texttab),y
;
	inc sc_texttab	; proceed in 4Bit
	bne lh5
	inc sc_texttab+1
lh5	lda gbyte2
	dex		; 4 times
	bne hlp2
	
	inc cr		; then proceed in bitmap
	bne hlp6
	inc cr+1
	
hlp6	lda ls_vekta8	; count bytes (320)
	bne hlp7
	dec ls_vekta8+1
hlp7	dec ls_vekta8
	lda ls_vekta8	; counter to zero?
	ora ls_vekta8+1
	beq hlp9
	
	dec lcnt		; next line in card
	bne hilp
	
	inc vr		; next card
	bne hloop1
	inc vr+1
	bne hloop1

hlp9	clc
	lda #5		; next row
	adc dst0+1
	sta dst0+1
	lda vekt44	; next color row
	sta vrbuf
	inc blrows	; counts card rows (25)
	inc pass
	lda pass
	and #1
	bne jconvert
	sta pass
	rts

jconvert	jmp convert

; -----------------------------------

checkhght	ldy #0
cht2	jsr findgr	; find end of graphics
	beq cht4		; if equal: end of data
	iny		; if pos  : count height
	iny
	bne cht2
	dey		; ### 1.02: End of block, so
	dey		; skip $0d,$0d
cht4	dey		; search actual bottom (skip to top)
	dey
	jsr findgr
	bmi cht4		; if neg  : skip at bottom
	iny
	iny
cht1	sty height	; set height (0 = no data)
	sty byte2
	rts
	
; -----------------------------------

findgr	lda blockbuf+1,y
	ora blockbuf,y
	rts
; ----------------------------------- error

failb	lda #32
	!by $2c
faila	lda #0
	pha
	jsr clrch
	jsr ld5
	pla
	tax
	ldy #0
fl0	lda err1,x
	sta message,y
	inx
	iny
	cpy #32
	bne fl0
	jsr gd_clrms
	  
; ----------------------------------- Message Handler

messout	ldx #<(message)
	ldy #>(message)
	jmp gd_xtxout2
;
action	dec adcnt
	bne ld4
	lda cntwert
	sta adcnt
	ldy offy
	cpy #22
	bne act0
	jsr clrmess
act0	ldx offx
	lda filltab,x
	sta mess,y
	jsr messout
	dec offx
	bpl ld4
	inc offy
	lda #7
	sta offx
ld4	rts
;
tcopy	ldy #0
tc0	lda txt,x
	beq clrmess
	sta message,y
	inx
	iny
	bne tc0
;
clrmess	ldx #20
	lda #32
cl0	sta mess,x
	dex
	bpl cl0
	ldy #0
	ldx #7
	sty offy
	stx offx
	rts
;
filltab	!by 160,93,103,127,126,124,105,109
foxtype	!by 0
cntwert	!by 50
message	!scr " geoPaint  "
mess	!fill 21,32
	!by 0
txt	!scr " geoPaint  @"
err1	!scr " ERROR: Trailing Space in Name. "
	!scr "   ERROR: No GeoPaint image.    "

; ----------------------------------------- Request Block TT SS

sendmess	pha		; save .a (SS) and .x (TT)
	txa
	pha
	ldx #15
	jsr ckout
	ldy #$00
sm1	lda message3,y	; U1 13 0 TT SS
	beq sm2
	jsr out
	iny
	bne sm1
;
sm2	lda #$20
	jsr out
	pla		; TT (aus .x)
	tax
	lda #$00
	jsr intout
	lda #$20
	jsr out
	pla		; SS (aus .a)
	tax
	lda #$00
	jsr intout
	lda #$0d
	jsr out
	jmp clrch
;
; ----------------------------------------- Set Pointer Position in Disk Buffer

sendmess2	ldx #15
	jsr ckout
	ldy #>(message4)	; B-P 13 0
	lda #<(message4)
	jsr $ab1e
	jmp clrch
;

; ----------------------------------------- Read Disk Block to 1st buffer

getblock	jsr sendmess
	jsr sendmess2
	ldx #13
	jsr chkin

	ldy #$00
gbl1	jsr in
	sta blockbuf,y
	iny
	bne gbl1
	jmp clrch
;
; ----------------------------------------- Read Disk Block to 2nd buffer

getblock2	jsr sendmess
	jsr sendmess2
	ldx #13
	jsr chkin
	ldy #$00
gbl2	jsr in
	sta blockbuf2,y
	iny
	bne gbl2
	jmp clrch
;
opendch	lda #1
	ldx #<dirchan
	ldy #>dirchan
	sta ls_temp
	stx ls_vekta8
	sty ls_vekta8+1
	jmp gd_xopen

; ----------------------------------------- Floppy Commands

message3	!tx "u1 13 0"
	!by 0
message4	!tx "b-p 13 0"
	!by 13,0

; ----------------------------------------- Variables

blindex	!by $00
picindex	!by $00
dirchan	!tx "#"
updown	!by 0
height	!by 0
left	!by 0
track	!by $00
strack	!by $00
sector	!by $00
ssector	!by $00
tlink1	!by $00
slink1	!by $00
count2	!by $00,$00
kommas	!by $00
wtrack	!by $00
wsector	!by $00
dirindex	!by $00
firstp	!wo $2000
secondp	!wo $2280
geopat	!by 0,0,0,0,0,0,0,0

; ----------------------------------------- Read Byte from Disk

in	jsr basin
	pha
	lda status
	and #$83
	beq o1
o2	lda #$00
	sta status
	pla
	inc used
	pla
	pla
	rts

; ----------------------------------------- Write Byte to Floppy

out	jsr bsout
	pha
	lda status
	and #$83
	bne o2
o1	pla
	rts
;
; ----------------------------------------- Get Byte from Buffer2

getbyte2	inc blindex
	beq gby1
	ldy blindex
	lda blockbuf2,y
	rts
;
gby1	ldx blockbuf2
	lda blockbuf2+1
	jsr getblock2
	ldy #$01
	sty blindex
	jmp getbyte2

; -----------------------------------

clearbuf	lda #<readbuf
	ldx #>readbuf
	sta dst
	stx dst+1
	sta src
	stx src+1
	ldx #5
	ldy #0
	tya
cb0	sta (dst),y
	iny
	bne cb0
	inc dst+1
	dex
	bne cb0
	rts
	
; -----------------------------------

dnib	!by $00,$ff,$44,$cc,$55,$aa,$11,$dd
	!by $66,$22,$99,$33,$77,$ee,$88,$bb
;
; ----------------------------------- Image Information

getname	ldx #0
si0	lda ls_lastname,x
	beq si1
	sta nbuf,x
	inx
	cpx #16
	bcc si0
si1	rts
;
; ----------------------------------- 

setinfo	jsr setname
	jsr setloader
	jsr setmode
	jmp setdata
;
setname	lda #0
	ldx #<(ls_picname)
	ldy #>(ls_picname)
	bne si3
setloader	lda #17
	ldx #<(ls_iloader)
	ldy #>(ls_iloader)
	bne si3
setmode	lda #25
	ldx #<(ls_imode)
	ldy #>(ls_imode)
	bne si3
setdata	lda #33
	ldx #<(ls_idrive)
	ldy #>(ls_idrive)
si3	stx sc_texttab
	sty sc_texttab+1
	tax
	ldy #0
si4	lda nbuf,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts
;
nbuf	!fill 16,32
	!by 0
	!scr "GEOS   @"
modetx	!scr "320x200@"
datatype	!scr "Color@"

; ----------------------------------- Shape routines

first	ldy #23		; save pattern and then erase
	ldx #0
f3	lda gr_pattern,y
	sta pbuffer,y
	txa
	sta gr_pattern,y
	dey
	bpl f3
	rts
;
; -----------------------------------

last	ldy #23		; restore pattern
f4	lda pbuffer,y
	sta gr_pattern,y
	dey
	bpl f4
	rts
;
; -----------------------------------

sclear	ldy #9		; clear current output row
	lda #32
f13	sta (vekt40),y
	dey
	bpl f13
	ldy zsph
	rts
;
; -----------------------------------

requ	lda #<(string1)	; first output line
	sta vekt40
	lda #>(string1)
	sta vekt40+1

r0	jsr settxt
	jsr first
	lda byte3		; width div 8 = columns (zsph)
	tay
	lsr
	lsr
	lsr
	sta zsph
	tya
	and #7
	sta zbr		; rest (zbr)
	lda byte2		; height div 8 = rows (zspv)
	tay
	lsr
	lsr
	lsr
	sta zspv
	tya
	and #7
	sta zho		; rest (zho)
	
	lda zspv		; only 1 block?
	ora zsph
	beq ecke
hline	ldy zbr		; add char right
	lda hwert,y
	ldy #7
hl0	sta hsign,y
	dey
	bpl hl0
vline	lda #$ff		; add char bottom
	ldy zho
	bne hl01
hl1	sta vsign,y
hl01	dey
	bpl hl1
ecke	ldy zbr		; add corner
	lda hwert,y
	ldy zho
	bne hl02
hl2	sta esign,y
hl02	dey
	bpl hl2
;
	ldx zspv
	beq hl8
hl7	jsr sclear
	lda zbr
	beq hl5
	lda #hlinie
	sta (vekt40),y
hl5	lda #shspace
hl6	dey
	bmi hl9
	sta (vekt40),y
	bne hl6
hl9	clc
	lda vekt40
	adc #15
	sta vekt40
	bcc hl10
	inc vekt40+1
hl10	dex
	bne hl7
;
hl8	jsr sclear
	lda zho
	beq rest
	lda zbr
	beq hl13
	lda #eck
	sta (vekt40),y
hl13	lda #vlinie
hl11	dey
	bmi rest
	sta (vekt40),y
	bne hl11
rest	clc
	lda vekt40
	adc #15
	sta vekt40
	bcc rst0
	inc vekt40+1
rst0	ldy #0
	lda (vekt40),y
	cmp #$ff
	beq rst1
	lda #32
rst2	sta (vekt40),y
	iny
	cpy #10
	bne rst2
	beq rest
rst1	rts
;
; -----------------------------------

settxt	lda byte3
	jsr gd_xcnvdez
	ldy #1
	sta xtxt,y
	txa
	and #15
	bne stx0
	lda #32
	!by $a2
stx0	txa
	dey
	sta xtxt,y
	ldy #2
	lda byte2
	cmp #$64
	bne stx1
	lda #$30
stx2	sta ytxt,y
	dey
	bpl stx2
	inc ytxt
	bne stx3
stx1	ldx #32
	stx ytxt
	jsr gd_xcnvdez
	sta ytxt,y
	txa
	and #15
	bne stx4
	lda #32
	!by $a2
stx4	txa
	dey
	sta ytxt,y
stx3	ldy fmdata+2
	dey
	dey
	dey
	lda #32
	sta xpostxt+7
	sta ypostxt+7
stx5	sta geomess,y
	dey
	cpy ls_flen
	bcs stx5
stx6	lda ls_lastname,y
	sta geomess+1,y
	dey
	bpl stx6
	lda #$30
	sta xpostxt+8
	sta ypostxt+8
	rts

; -----------------------------------

rsbufs 	ldx #0
	stx firstp	; reset graphics buffers to $2000
	lda #$20
	sta firstp+1
	lda #$22		; and $2280
	sta secondp+1
	lda #$80
	sta secondp
	lda #$25		; and color buffers to $2508
	sta vekt42+1
	sta vekt44+1
	sta vrbuf+1
	lda #8
	sta vekt42
	sta vrbuf
	lda #$58		; and $2558
	sta vekt44
	rts

; ----------------------------------- Set 40x25 Clip

ss7	jmp cont
sevsclip	lda byte2
	ora byte3
	beq ss7
	
	jsr rsbufs
	ldx #$40
	stx vekt40
	dex
	stx vekt40+1
	ldy #0
ss4	ldx #2
ss0	lda sprou,x
	sta (vekt40),y
	iny
	dex
	bpl ss0
	cpy #42
	beq ss3
ss2	ldx #2
ss1	lda sprmi,x
	sta (vekt40),y
	iny
	dex
	bpl ss1
	cpy #39
	bne ss2
	beq ss4
ss3	lda #0
ss5	sta (vekt40),y
	iny
	cpy #64
	bne ss5
	lda $d002
	sta xkoomk
	clc
	lda $d003
	adc #24
	sta ykoomk
	lda $d010
	pha
	lda byte2
	sec
	sbc maxho
	beq mm0
	bcc mm0
	!by $2c
mm0	lda #0
	clc
	adc ykoo
	sta ymax
	lda byte3
	sec
	sbc maxbr
	beq mm1
	bcc mm1
	!by $2c
mm1	lda #0
	clc
	adc xkoo
	sta xmax
	lda ykoo
	sta $d003
	lda xkoo
	sta $d002
	lda #$02
	sta $d017
	sta $d01d
	sta $d015
	lda #0
	sta sc_keyprs
	sta $d01c
	sta $d010
	lda #253
	sta $07f9
ss6	jsr checkpos
	beq ss6

	lda #0
	sta vekt40+1
	lda xpos
	sta vekt40
	asl vekt40
	rol vekt40+1
	asl vekt40
	rol vekt40+1
	asl vekt40
	rol vekt40+1
	
	lda vekt40
	clc		; add x to buffer offsets
	adc firstp
	sta firstp
	lda vekt40+1
	adc firstp+1
	sta firstp+1
ss9	lda vekt40
	clc
	adc secondp
	sta secondp
	lda vekt40+1
	adc secondp+1
	sta secondp+1
	
	clc
	lda xpos
	adc vekt42
	sta vekt42
	bcc ss10
	inc vekt42+1
ss10	clc
	lda xpos
	adc vekt44
	sta vekt44
	bcc ss8
	inc vekt44+1

ss8	lda xkoomk
	sta $d002
	lda ykoomk
	sta $d003
	pla
	sta $d010
	lda #11
	sta $07f9
	lda #0
	sta $d017
	sta $d01d
	lda #3
	sta $d015
	clc
	rts
;
; -----------------------------------

over1	tay
	sec
	sbc $d002,x
	bcc ov0
ov1	tya
	sta $d002,x
ov0	rts
;
over2	tay
	sec
	sbc $d002,x
	bcc ov1
	rts
	
; -----------------------------------

checkpos	jsr settab
	ldx #0
	lda xkoo
	jsr over1
	lda xmax
	jsr over2
	inx
	lda ykoo
	jsr over1
	lda ymax
	jsr over2
	sec
	lda $d002
	sbc xkoo
	cmp xpos
	beq ch1
	sta xpos
	jsr gd_xcnvdez
	sta xpostxt+8
	txa
	and #15
	bne ch2
	lda #32
	!by $a2
ch2	txa
	sta xpostxt+7
	ldy #0
	jsr gettab
	ldy #6
	jsr gd_xtxout1
ch1	sec
	lda $d003
	sbc ykoo
	cmp ypos
	beq ch3
	sta ypos
	inc ypos
	jsr gd_xcnvdez
	sta ypostxt+8
	txa
	and #15
	bne ch4
	lda #32
	!by $a2
ch4	txa
	sta ypostxt+7
	ldy #2
	jsr gettab
	ldy #6
	jsr gd_xtxout1
ch3	lda sc_keyprs
	rts
;
; -----------------------------------

tabigad	!by <(xpostxt),>(xpostxt)
	!by <(ypostxt),>(ypostxt)

settab	lda #<(tabigad)
	sta vekt40
	lda #>(tabigad)
	sta vekt40+1
	rts
;
gettab	lda (vekt40),y
	sta sc_screentab
	iny
	lda (vekt40),y
	sta sc_screentab+1
	lda #0
	tax
	tay
gt0	jsr gd_setpos
	cpx #3
	bne gt0
	stx sc_ho
	jsr gd_trim
	jmp gd_initmove
;
; ----------------------------------- Screenlist

geoslst	!by 0
	!by 2,7,27,20,$81,0,0
	!scr "Clip 40x25 from GEOSPic@"
	!by 4,8,12,15,$00,0,0
	!by 4,20,12,3,$a0,0,0
typtxt	!scr " "
xtxt	!scr "   x "
ytxt	!scr "    @"
xpostxt	!by 7,22,4,3,$a0,0,0
	!scr " 0@"
ypostxt	!by 7,28,4,3,$a0,0,0
	!scr " 0@"
	!by 10,21,10,3,$c0,<(sevsclip),>(sevsclip)
	!scr "Set Clip@"
	!by 13,21,10,3,$c0,<(sevgeos),>(sevgeos)
	!scr "Load Pic@"
	!by 16,21,10,3,$c0,<(freq),>(freq)
	!scr "Cancel@"
fmdata	!by 19,8,25,3,$9c,0,0
geomess	!fill 23,32
	!by 0

	!by $c0,7,20,1,88,0
	!by $c0,7,26,1,89,0
	!by $c0,4,8,10		; Shape
string1	!fill 10,32
	!by 0
	!by $c0,5,8,10
	!fill 10,32
	!by 0
	!by $c0,6,8,10
	!fill 10,32
	!by 0
	!by $c0,7,8,10
	!fill 10,32
	!by 0
	!by $c0,8,8,10
	!fill 10,32
	!by 0
	!by $c0,9,8,10
	!fill 10,32
	!by 0
	!by $c0,10,8,10
	!fill 10,32
	!by 0
	!by $c0,11,8,10
	!fill 10,32
	!by 0
	!by $c0,12,8,10
	!fill 10,32
	!by 0
	!by $c0,13,8,10
	!fill 10,32
	!by 0
	!by $c0,14,8,10
	!fill 10,32
	!by 0
	!by $c0,15,8,10
	!fill 10,32
	!by 0
	!by $c0,16,8,10
	!fill 10,32
	!by 0
	!by $80,0,0,0,$ff

modend	!eof
