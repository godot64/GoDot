
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ----------------------------------------- 
;
;  mod.IFLI-Heatmap
;   Module to provide a skeleton for other modules
;
;  1.00, 30.01.22, first release
;  1.01, 08.02.22, changed output palettes
;  1.02, 09.02.22, bugfix: added SaveTemp flag
;
; ----------------------------------------- 

; ----------------------------------------- Equates

	adcnt	= $30 	; activity counter
	src	= $31	; /$32
	dst	= $33	; /$34
	lcnt	= $35
	bcnt	= $36
	tcnt	= $37
	byte1	= $38
	byte2	= $39
	iscolor	= $3a
	src0	= $3b	; /$3c
	lastkey	= $3d

	currkey	= $cb
	shift	= $028d
	sprptr	= $07f8
	spr255	= $3fc0

	spr2x	= $d004
	spr2y	= $d005
	msbx	= $d010
	spren	= $d015
	sprxe	= $d01d
	border	= $d020
	sprcol2	= $d029

; ----------------------------------------- Header

header	jmp start
	!by $20
	!by 0
	!by 0
	!wo modend
	!wo 0
	!tx "Show IFLI diffs "
	!tx "1.02"
	!tx "09.02.22"
	!tx "A.Dettke        "

; ----------------------------------------- Main

start	jsr check4reu	; reu present?
	bne noreu

	lda shift		; beim Start Shift gedrückt?
	and #1
	sta iscolor
	lda gd_modswitch	; memory management
	sta modswitch
	lda gr_redisp
	sta redisp

	lda #9		; Funktion "Undo in die REU" setzen
	sta getundo+1
	jsr doundo	; automatisches Undo ausführen
	jsr gd_spron

	jsr render	; Heatmap erzeugen und anzeigen

	lda #8		; Funktion "Undo aus der REU" setzen
	sta getundo+1
	jsr doundo	; und ausführen

	jsr gd_spron
	lda redisp
	sta gr_redisp
	lda modswitch	; memory management
	sta gd_modswitch
	lda #0		; reset Shift flag
	sta iscolor

; ----------------------------------------------------- Reset Balancing

	lda shift		; nach Display Shift gedrückt?
	and #1
	bne +

	ldy #16		; yes, reset Balancing
	sty gr_ctr
	sty gr_brt
dc8	dey
	tya
	sta gr_btab,y
	bne dc8

+	clc		; back to GoDot Main
	rts
	

; ----------------------------------------- No REU

noreu	ldx #<warnlst
	ldy #>warnlst
	jmp gd_xmloop

; ----------------------------------------------------- 

warnlst	!by 0
	!by 8,9,21,9,$81
	!wo 0
	!scr "MESSAGE@"
	!by 14,23,7,3,$cd
	!wo canc
	!scr "Leave@"
	!by $c0,10,10,16
	!scr "No REU detected.@"
	!by $c0,12,11,15
	!scr "Mod won't work.@"
	!by $80
	
; ----------------------------------------- Render Image Diffs

render	jsr initad	; init activity

	lda #<sy_4bit	; .a=0
	sta src
	sta src0
	sta bcnt		; counts tiles (0..39)
	sta lcnt		; counts rasterlines (0..199)
	sta tcnt		; counts tilelines (0..7)
	sta lastkey	; reset key buffer
	tay
	lda #>sy_4bit
	sta src+1
	sta src0+1

rloop	lda currkey	; ### 1.01: while rendering: key pressed?
	cmp #$40
	beq +
	sta lastkey	; yes, store

+	lda (src),y	; then get 2 pixels
	pha
	lsr
	lsr
	lsr
	lsr
	tax
	lda gr_btab,x	; care for balancing
	sta byte1		; left pixel (to .x)
	pla
	and #15
	tax
	lda gr_btab,x	; balancing
	sta byte2		; right pixel (in .a)

	ldx byte1
	cmp byte1		; which is brighter?
	bcc +
	beq +
	sta byte1		; if byte2: exchange
	stx byte2

+	lda byte1		; compute difference
	sec
	sbc byte2
	tax
	lda ltab,x	; take as luma
	tax

	lda iscolor	; heatmap: gray or colored?
	bne ++

	lda tcnt		; gray, rasterline: odd or even?
	and #1
	bne +
	lda gnibs1,x	; even
	jmp +++
+	lda gnibs2,x	; odd
	jmp +++

++	lda dnibs,x	; colored

+++	sta (src),y
	iny		; of one tileline
	cpy #4
	bcc rloop

	clc		; advance: next tile
	lda src
	adc #32
	sta src
	bcc +
	inc src+1
+	ldy #0
	inc bcnt		; count until 40
	lda bcnt
	cmp #40
-	bne rloop

	sty bcnt		; .y=0, reset tile counter
	jsr adinc		; activity
	clc		; advance: next rasterline
	lda src0
	adc #4
	sta src0
	sta src
	lda src0+1
	adc #0
	sta src+1
	sta src0+1
	inc lcnt		; count rasterlines (200)
	inc tcnt		; count tilelines (8)
	lda tcnt
	cmp #8
	bne -

	sty tcnt		; .y=0, reset tileline counter
	clc
	lda src0		; advance: next block row
	adc #$e0
	sta src0
	sta src
	lda src0+1
	adc #$04
	sta src0+1
	sta src+1
	
	lda lcnt		; finished?
	cmp #200
	bne -

	sta gr_redisp	; yes, now render the heatmap:
	jsr clearad
	lda lastkey
	beq +
	cmp #$0d		; was "s" pressed?
	bne +
	jsr savetemp	; yes, save heatmap to temp
	ldx #0		; (repair modified values)
	stx tbank+1
	inx		; tell GoDot there's a temp
	stx rm_tmpsaved
	lda #$10
	sta target+1
+	jmp ev_display	; finally display heatmap

; ---------------------------------------------- Save Heatmap to Temp

savetemp	ldx bank		; address temp:
	inx
	stx tbank+1
	lda #$83		; $8300: address of Temp00 in bank 7
	sta target+1
	lda #9		; Funktion "Undo in die REU" setzen
	sta getundo+1

; ---------------------------------------------- DoUndo

doundo	lda #<undo	; eigentliche Routine verschieben
	ldx #>undo	; (weil das Modul ausgeblendet wird)
	sta ls_vekta8
	stx ls_vekta8+1
	ldy #adinc-undo-1
sloop	lda (ls_vekta8),y
	sta sy_global,y	; nach GLOBAL
	dey
	bpl sloop
	jmp sy_global	; und dann ausführen

undo 	jsr gd_swapd	; Ram einblenden
	ldx #10		; FirstInit
	jsr rm_ramvec

	ldx #6		; Parameter setzen
	lda #0
md0	sta rm_werte,x	; zuerst löschen
	dex
	bpl md0
	lda #>sy_4bit	; 4Bit-Bereich im C64
	sta rm_werte+1
target	lda #$10		; nach Undo4Bit im Ram
	sta rm_werte+3	; ($8d für Undo Rendered)
tbank	lda #0		; set bank
	sta rm_werte+4	; (7 for temp00)
	lda #$7d		; 32000 Bytes
	sta rm_werte+6

	lda #1		; Flag für 4Bit-Undo setzen
	sta rm_nextentry	; (#2 für Undo Rendered!)

getundo	ldx #9		; und DoUndo
	jsr rm_ramvec
	ldx #1		; danach ForceOff (Ram ausblenden)
	jsr rm_ramvec	
	jmp gd_sproff	; und Sprite wieder aus, zurück

; ------------------------------------------------ Activity

adinc	dec adcnt		; advance after adcnt passes
	bne +
	inc spr2y
	inc spr2y+2
	jmp setadcnt	; and reset adcnt

; ------------------------------------------------ Finish Activity

clearad	lda spren		; progress bar off
	and #$f3
	sta spren
	lda msbx
	and #$f3
	sta msbx
canc	sec 		; finished
+	rts 

; ------------------------------------------------ Init Activity

initad	ldy #60		; prepare spriteblock 255
	lda #0
-	sta spr255+3,y
	dey 
	bpl -
	sty spr255	; thin line
	sty spr255+1
	sty spr255+2
	lda #15		; light gray
	sta sprcol2
	sta sprcol2+1
	lda sprxe		; x-expanded
	ora #$0c
	sta sprxe

	lda msbx		; x is beyond 255
	ora #$0c
	sta msbx
	lda #8		; so x is 8 (plus 256)
	sta spr2x
	lda #$20
	sta spr2x+2
	lda #$92		; y is 146
	sta spr2y		; (in Image Information window)
	sta spr2y+2

	sty sprptr+2	; use sprite 255
	sty sprptr+3
	lda spren
	ora #$0c		; activate bar
	sta spren

setadcnt	lda #5		; init counter to 5 (times 40 = 200 rasterlines)
	sta adcnt
	rts

; -------------------------------------- Check for REU

check4reu	lda ls_ramdrive	; welcher Ramdrive? (detected by system)
	and #15
	ldx #6
	cmp #8		; 1700
	beq graphon	; too small
	cmp #4		; 1764
	bne st2
	cpy #2		; MODs in bank 2?
	bcs graphon	; too small
	ldx #2
	bne st7
st2	cmp #5		; 1750
	bne graphon
	cpy #6		; MODs in bank 6?
	bcs graphon	; too small
st7	stx bank

	lda rm_ramvec	; Device eingebunden?
	cmp #$4c		; equal, wenn ja
	rts

; ----------------------------------------------------- Blink the Border

graphon	ldy #2		; red
	lda border	; save border color
	pha
	sty border	; set new color (in .y, here: 2 for red)
	ldx #$40
	jsr gd_dl2	; delay (.x=0)
	pla
	sta border	; reset old border color
	stx sy_tbuffer	; clear key strokes
stay	clc
	rts

; ----------------------------------------- Data

bank	!by 0			; used by CHECK4REU
redisp	!by 0
modswitch	!by 0
dnibs	!by $00,$11,$33,$55,$77,$99,$bb,$dd,$ff
;             blk blu dgr pur mgr lrd lgr yel wht
gnibs1	!by $00,$03,$33,$37,$77,$7b,$bb,$bf,$ff
gnibs2	!by $00,$30,$33,$73,$77,$b7,$bb,$fb,$ff
ltab	!by 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8

; ----------------------------------------- 

modend	!eof
