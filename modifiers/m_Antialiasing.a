	!src "godotlib.lib"
	*=$c000
	!ct pet
;	!sl "labels.txt"

; ------------------------------------------------ 
;
; mod.Antialiasing
;
; 1.00, 31.07.2019, fist release
;
; ------------------------------------------------ 

; -------------------------------------------------------------- Declarations

	lcnt		= $30
	adcnt		= $31
	xmrk		= $32
	dst		= $35
	src		= $37
	tcnt		= $3a

	gr_redisp		= $0fbd

	buf_o 		= $c601
	buf_m 		= $c801
	buf_u 		= $ca01
	buf_r 		= $cc00

	sprptr		= $07f8
	spr255		= $3fc0

	spr2x		= $d004
	spr2y		= $d005
	msbx		= $d010
	spren		= $d015
	sprxe		= $d01d
	border		= $d020
	sprcol2		= $d029

; -------------------------------------------------------------- Header

	jmp start

	!by $20		; Modifier
	!by 0
	!by 0
	!wo modend
	!wo 0		; reserved
	!pet "Antialiasing    "
	!pet "1.00"
	!pet "31.07.19"
	!pet "A.Dettke        "

; ------------------------------------------------ Main

start	jsr makechr
	stx used		; .x=$ff
	ldx #<aalst
	ldy #>aalst
	jsr gd_screen
	jsr gd_eloop
	lda gr_ctr
	eor gr_brt
	beq evleave
	lda used
	bmi evleave
	jsr breset

; ------------------------------------------------ Event: Leave

evleave	sec
	rts

; ------------------------------------------------ Events: Reset Balancing

evbreset	ldx #0		; Reset after processing!
	stx used
stay	clc
	rts

breset	ldy #16		; Balancing-Tabelle initialisieren
	sty gr_ctr
	sty gr_brt
-	dey 
	tya 
	sta gr_btab,y
	bne -
	rts

; ------------------------------------------------ Event: Set Number of Grays

evnumgray	ldx mode
	bne stay
	ldx howmany
	cpx #2
	bne +
	ldx #$ff
+	inx
	stx howmany
	lda grays,x
	tax
	ldy #15
-	lda qtabs,x
	sta qtab,y
	dex
	dey
	bpl -

	ldx howmany
setgrays	lda grayoffs,x
	tax

setnum	ldy #2
-	lda graytxts,x
	sta graytx,y
	dex
	dey
	bpl -
	ldy #2
	jmp txtout

; -------------------------------------- Event: Set Mode

evmode	ldx mode
	beq +
	ldx #$ff
+	inx
	stx mode		; 0: Gray, 1: Color
	bne +

	ldx howmany
	!by $2c
+	ldx #3		; 3: grayoffs for "no gray"
	jsr setgrays

++	ldx mode
	lda modeoffs,x
	tax
	ldy #7
-	lda modetxts,x
	sta modetx,y
	dex
	dey
	bne -
txtout	jsr settext
	ldy #6
	jmp gd_xtxout1

; ------------------------------------------------ Event: Apply

evapply	jsr init_sa
	lda #0		; ab Rasterzeile 0
	sta lcnt
	jsr puffern	; drei Zeilen puffern
	jsr umlagern

-	jsr umlagern
	inc lcnt
	jsr puffern
	jsr konvol	; und bearbeiten

	dec lcnt
	jsr w_ergeb	; abspeichern
	jsr adinc

	inc lcnt		; bis alle Zeilen durch (200)
	lda lcnt
	cmp #199
	bne -

	jsr puffern	; letzte bearbeiten (Rand!)
	jsr umlagern
	jsr konvol
	jsr w_ergeb

	jmp abschl	; fertig

; ------------------------------------------------ 
; ------------------------------------------ Konvolution
; ------------------------------------------------ 


konvol	lda mode
	bne aacolor

	ldy #0
-	clc
	lda buf_o-1,y
	adc buf_o,y
	adc buf_o+1,y
	adc buf_m-1,y
	adc buf_m+1,y
	adc buf_u-1,y
	adc buf_u,y
	adc buf_u+1,y
	lsr
	lsr
	lsr
	tax
	lda gr_btab,x
	tax
	lda qtab,x
	sta buf_r,y

	clc
	lda buf_o+159,y
	adc buf_o+160,y
	adc buf_o+161,y
	adc buf_m+159,y
	adc buf_m+161,y
	adc buf_u+159,y
	adc buf_u+160,y
	adc buf_u+161,y
	lsr
	lsr
	lsr
	tax
	lda gr_btab,x
	tax
	lda qtab,x
	sta buf_r+160,y

	iny 
	cpy #160
	bne -
	rts 

aacolor	ldy #0
-	ldx buf_m-1,y
	lda dnibs,x
	and #$f0
	ora buf_m,y
	tax
	lda coltab,x
	and #15
	sta buf_r,y

	ldx buf_m+159,y
	lda dnibs,x
	and #$f0
	ora buf_m+160,y
	tax
	lda coltab,x
	and #15
	sta buf_r+160,y

	iny 
	cpy #160
	bne -
	rts 

; ------------------------------------------------ 
; ------------------------------------------------ 
; ------------------------------------------------ 

; ------------------------------------------------ Puffer umlagern

umlagern	ldy #0		; von unten nach oben schieben
-	lda buf_m-1,y
	sta buf_o-1,y
	lda buf_m+160,y
	sta buf_o+160,y
	lda buf_u-1,y
	sta buf_m-1,y
	lda buf_u+160,y
	sta buf_m+160,y
	iny 
	cpy #161
	bne -
	rts 

; ------------------------------------------------ Puffer füllen

puffern	lda lcnt		; aktuelle Rasterzeile
	pha 
	lsr		; durch 8
	lsr
	lsr
	tax 
	pla 
	and #$07		; (rz and 7) * 4
	asl
	asl
	sta src		; nach Quelle
	lda hi_rows,x
	sta src+1
	lda #<buf_u	; Ziel
	ldx #>buf_u
	sta dst
	stx dst+1

	ldx #0
	lda #40		; 40 Bytes in Einzelpixel wandeln
	sta tcnt

--	ldy #0
-	lda (src),y	; Pixel links
	pha 
	lsr
	lsr
	lsr
	lsr
	sta (dst,x)	; puffern
	inc dst
	bne +
	inc dst+1
+	pla 		; Pixel rechts
	and #$0f
	sta (dst,x)	; puffern
	inc dst
	bne +
	inc dst+1
+	iny 
	cpy #4		; 4mal (eine Kachel)
	bne -

	lda src		; nächste Kachel
	clc 
	adc #32
	sta src
	bcc +
	inc src+1
+	dec tcnt		; 40 mal
	bne --

	lda buf_u		; für definierten Rand sorgen
	sta buf_u-1
	lda buf_u+319
	sta buf_u+320
	rts 

; ------------------------------------------------ Ergebnis nach 4Bit

w_ergeb	lda lcnt
	pha 
	lsr
	lsr
	lsr
	tax 
	pla 
	and #$07
	asl
	asl
	sta src		; Ziel: 4Bit
	lda hi_rows,x
	sta src+1
	lda #<buf_r	; Quelle: Result Buffer
	ldx #>buf_r
	sta dst
	stx dst+1

	ldx #0		; wie oben
	lda #40
	sta tcnt
--	ldy #0
-	lda (dst,x)	; Pixel wieder zusammenführen
	asl
	asl
	asl
	asl
	inc dst
	bne +
	inc dst+1
+	ora (dst,x)
	inc dst
	bne +
	inc dst+1
+	sta (src),y	; und speichern
	iny 
	cpy #4
	bne -

	lda src
	clc 
	adc #32
	sta src
	bcc +
	inc src+1
+	dec tcnt
	bne --
	rts 

; ------------------------------------------------ Activity

adinc	dec adcnt
	bne +
	inc spr2y
	inc spr2y+2
	lda #5
	sta adcnt
+	rts 

; ------------------------------------------------ Abschluss Activity

abschl	lda spren		; Wanderbalken aus
	and #$f3
	sta spren
	lda msbx
	and #$f3
	sta msbx
	lda #$ff		; Grafik verändert
	sta gr_redisp
	sec 		; fertig
	rts 

; ------------------------------------------------ Init Activity

init_sa	ldy #60
	lda #0
-	sta spr255+3,y	; Spriteblock 255 vorbereiten
	dey 
	bpl -
	sty spr255	; dünner Strich
	sty spr255+1
	sty spr255+2
	lda #$0f		; Farbe hellgrau
	sta sprcol2
	sta sprcol2+1
	lda sprxe		; doppelt breit
	ora #$0c
	sta sprxe

	lda msbx		; x über 255
	ora #$0c
	sta msbx
	lda #8		; x-Ordinate: 8 (plus 256)
	sta spr2x
	lda #$20
	sta spr2x+2
	lda #$92		; y-Ordinate: 146
	sta spr2y		; (im Image Information Fenster)
	sta spr2y+2

	sty sprptr+2	; Sprite 255
	sty sprptr+3
	lda spren
	ora #$0c		; Activity-Balken aktivieren
	sta spren
	lda #5
	sta adcnt
	rts

; --------------------------- Kringel definieren

makechr	ldx #7
-	lda chschr,x
	sta sc_undochar,x
	dex
	bpl -
	rts

; ------------------------------------ Output gadget text routines

tabigad	!wo modegad	; 0
	!wo graygad	; 2

settext	lda #<tabigad
	sta ls_vekta8
	lda #>tabigad
	sta ls_vekta8+1

	lda (ls_vekta8),y
	sta sc_screentab
	iny
	lda (ls_vekta8),y
	sta sc_screentab+1
	lda #0
	tax
	tay
gt0	jsr gd_setpos
	cpx #3
	bne gt0
	stx sc_ho
	jsr gd_trim
	jmp gd_initmove

; ------------------------------------------------ Screenlist

aalst	!by 0
	!by 10,10,16,10,$91
	!wo 0
	!scr "Antialiasing",0
modegad	!by 13,10,10,3,$c8
	!wo evmode
modetx	!scr $df," Grays ",0
	!by 17,10,9,3,$c7
	!wo evapply
	!scr " Apply ",0
graygad	!by 13,21,5,3,$cf
	!wo evnumgray
graytx	!scr $df," 5",0
	!by 15,19,7,3,$ce
	!wo evbreset
	!scr "Reset",0
	!by 17,19,7,3,$ce
	!wo evleave
	!scr "Leave",0
	!by $c0,15,10,8
	!scr "Balncng:",0
	!by $c0,13,19,1
	!scr ":",0
	!by $80

; -------------------------------------------------------------- Data
; --- 4bit-high-adressen der kachelzeilen

hi_rows	!by $40, $45, $4a, $4f, $54, $59, $5e, $63
	!by $68, $6d, $72, $77, $7c, $81, $86, $8b
	!by $90, $95, $9a, $9f, $a4, $a9, $ae, $b3, $b8 

chschr	!by $00,$3a,$46,$4e,$40,$40,$3c,$00

used	!by $ff
mode	!by 0
modetxts	!scr $df," Grays ",$df," Color "
modeoffs	!by 7,15
howmany	!by 0
grays	!by 15,31,47
graytxts	!scr $df," 5",$df," 9",$df,"16","---"
grayoffs	!by 2,5,8,11
qtab	!by 0,0,0,3,3,3,3,7,7,7,11,11,11,15,15,15
qtabs	!by 0,0,0,3,3,3,3,7,7,7,11,11,11,15,15,15	; 5  (0)
	!by 0,0,2,2,4,4,6,6,7,9, 9,11,11,13,13,15	; 9  (16)
	!by 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15	; 16 (32)

; ----------------------------------------- Tinted Colors Table

coltab	!by $00,$33,$33,$33,$33,$22,$22,$33,$33,$22,$33,$33,$33,$33,$33,$77
	!by $33,$11,$33,$11,$33,$11,$22,$33,$88,$55,$33,$77,$88,$77,$77,$88
	!by $33,$33,$22,$22,$44,$44,$22,$33,$77,$66,$33,$77,$bb,$66,$aa,$77
	!by $33,$11,$22,$33,$22,$33,$22,$33,$77,$77,$33,$77,$77,$77,$aa,$77
	!by $33,$33,$44,$22,$44,$44,$44,$33,$55,$66,$22,$77,$77,$66,$22,$99
	!by $22,$11,$44,$33,$44,$55,$44,$55,$88,$55,$77,$77,$88,$99,$55,$99
	!by $22,$22,$22,$22,$44,$44,$66,$66,$77,$99,$66,$99,$bb,$99,$aa,$99
	!by $33,$33,$33,$33,$33,$55,$66,$77,$88,$99,$77,$77,$bb,$bb,$ee,$bb
	!by $33,$88,$77,$77,$55,$88,$77,$88,$88,$99,$77,$88,$cc,$ee,$cc,$bb
	!by $22,$55,$66,$77,$66,$55,$99,$99,$99,$99,$77,$bb,$bb,$99,$bb,$bb
	!by $33,$33,$33,$33,$22,$77,$66,$77,$77,$77,$aa,$ee,$ee,$ee,$aa,$bb
	!by $33,$77,$77,$77,$77,$77,$99,$77,$88,$bb,$ee,$bb,$bb,$dd,$bb,$ff
	!by $33,$88,$bb,$77,$77,$88,$bb,$bb,$cc,$bb,$ee,$bb,$cc,$bb,$ee,$ff
	!by $33,$77,$66,$77,$66,$99,$99,$bb,$ee,$99,$ee,$dd,$bb,$dd,$ee,$ff
	!by $33,$77,$aa,$aa,$22,$55,$aa,$ee,$cc,$bb,$aa,$bb,$ee,$ee,$ee,$bb
	!by $77,$88,$77,$77,$99,$99,$99,$bb,$bb,$bb,$bb,$ff,$ff,$ff,$bb,$ff

dnibs	!by $00,$11,$22,$33,$44,$55,$66,$77	; double nibbles
	!by $88,$99,$aa,$bb,$cc,$dd,$ee,$ff

; ------------------------------------------------ 

modend	!eof
