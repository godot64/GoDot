
	!src "..\godotlib.lib"
	*	= $c000

; ------------------------------------------------------------ 
;
;  mod.Howmany
;
;  Module to output the number of colors per tile as digits
;
;  1.00: 29.11.92, first release
;  1.01: 07.10.05, added graphics display
;
; ------------------------------------------------------------ 

; --------------------------------------------- Declarations

	pport		= $01
	screen		= $0400
	sprptr		= $07f8
	grafreg		= $d011
	multreg		= $d016
	charreg		= $d018
	rahmen		= $d020
	backgr		= $d021

	src		= $35
	dst		= $37
	howmany		= $39
	slot		= $45
	v1buf		= $47
	v2buf		= $48
	cbuf		= $49

	col0		= sc_shadow

	hist		= $c400
	vram2		= $ce0b
	vram1		= $de0b
	cstart		= $ee0b

; --------------------------------------------- Header

	jmp start
	!by $20
	!wo 0
	!wo modend
	!wo 0
	!pet "colors/block    "
	!pet "1.01"
	!pet "07.10.05"
	!pet "W.Kling/A.Dettke"

; --------------------------------------------- Main

start	lda gd_modswitch	; save module management byte
	pha
	jsr check
	jsr evhowmany
	pla
	sta gd_modswitch
	sec
	rts

; --------------------------------------------- Howmany

evhowmany	jsr clrscreen
	lda #<sy_4bit
	ldy #>sy_4bit
	sta src
	sty src+1
	lda #<screen
	ldy #>screen
	sta dst
	sty dst+1

clrhist	lda #0		; clear histogram
	ldy #15
chloop	sta hist,y
	dey 
	bpl chloop

	ldy #31		; eine Kachel:
hloop	lda gr_cmode	; Grafikmodus? (0: Hires)
	bne hskip
	lda (src),y	; Hires: oberes Nibble
	lsr 
	lsr 
	lsr 
	lsr 
	tax 
	lda gr_qtab,x	; Balancing ber¸cksichtigen
	tax 
	lda gr_btab,x
	tax 
	inc hist,x	; Farbh‰ufigkeit z‰hlen
hskip	lda (src),y	; unteres Nibble
	and #$0f
	tax 
	lda gr_qtab,x	; Balancing ber¸cksichtigen
	tax 
	lda gr_btab,x
	tax 
	inc hist,x	; Farbh‰ufigkeit z‰hlen
	dey 
	bpl hloop

	lda #0		; Anzahl initialisieren
	sta howmany
	ldy #15		; Anzahl vorkommender Farben z‰hlen
hmloop	lda hist,y
	beq hmskip
	inc howmany
hmskip	dey 
	bpl hmloop

	ldx howmany	; wie viele?
	lda chars,x	; nach Ziffer wandeln (0 bis 16)
	ldy #0
	sta (dst),y	; in den Screen
	lda dst+1
	pha 
	clc 
	adc #$d4		; und ins Farbram
	sta dst+1
	lda sc_hilite
	sta (dst),y
	pla 
	sta dst+1

	lda src		; n‰chste Kachel 4Bit...
	clc 
	adc #32
	sta src
	bcc skip0
	inc src+1

skip0	inc dst		; ...Screen
	bne skip1
	inc dst+1
skip1	lda src+1
	cmp #>sy_bigbuffer	; bis 4Bit-Ende
	bne clrhist	; sonst von vorn

; --------------------------------------------- Wait

	lda #0
	sta sc_keyprs	; dann: warten auf Taste
	sta sc_stop
wloop	lda sc_keyprs
	ora sc_stop
	beq wloop
	cmp #1		; Maustaste?
	beq ++
	cmp #3		; STOP?
	beq +
	cmp #2
	bne wloop
+	rts 

++	lda gr_redisp
	bne +
	jsr redisplay
	jmp evhowmany

+	jsr gd_clrms
	lda #2
	sta 646
	ldx #<message
	ldy #>message
	jsr gd_xtxout2
	jmp wloop

; --------------------------------------------- 

clrscreen	lda #15		; Cursorfarbe: weiﬂ
	sta 646
	lda #147		; CLR/HOME
	jmp bsout

; --------------------------------------------- Data

chars	!pet "0123456789abcdef*"
message	!scr " Please render graphics first! @"
list	!wo 0

; ------------------------------------------------ 

check	sei 		; GoDot off
	ldx #$00
	stx pport

	ldy #$03		; set lobyte of...
	sty slot

	lda #$f0		; ...Slot4, check for types of module there
	sta slot+1	; (may be cram when input is active)
	jsr sethicol	; (otherwise unchanged)

	lda #$c0		; ...Slot1 and check
	sta slot+1
	jsr sethicol

	lda #$d0		; ...Slot2 and check
	sta slot+1
	jsr sethicol

	lda #$e0		; ...Slot3 and check
	sta slot+1
	jsr sethicol

	lda #$36		; GoDot on again
	sta pport
	cli 
	rts 

; ------------------------------------------------ 

sethicol	lda (slot,x)	; get type of module (at $c003): $20, $40, $80
	tay 
	and #$40		; is saver there? (contains vram1)
	beq +		; no, next type

	jsr c147		; yes, set color buffer 
	sta v1buf
	bne ++

+	tya 		; loader? ($80, contains cram)
	bpl +		; no, next type

	jsr c147		; yes, set accordingly
	sta cbuf
	bne ++

+	jsr c147		; so, it's a modifier (contains vram2)
	sta v2buf

++	rts 

c147 	lda slot+1	; get hibyte...
	ora #$0e		; ...and OR %00001110 to it (ie $ce)
	rts 		; thus: get correct hi address of color buffers

; ------------------------------------------------ 
; ------------------------------------------------ graphics display
; ------------------------------------------------ 

redisplay	ldx gr_palette	; set border to color 0 (normally black)
	stx rahmen
	jsr setcolors	; get colors from their buffers

	lda gr_cmode	; which mode?
	beq dp4
	lda #$18		; multicolor
	sta multreg
dp4	lda #$1b		; hires
	sta charreg
	lda #$3b
	sta grafreg
	lda gr_redisp	; Flag: display graphics set?
	bne dp3		; yes, branch and leave

-	lda sc_keyprs
	ora sc_stop
	beq -

; ------------------------------------------------ End display

dp2	jsr getcolors	; no, end display: save colors
	jsr tmode		; activate textmode
dp3	clc		; leave
	rts

; ------------------------------------------------ Switch textmode on

tmode	ldx #$13
	lda #$1b
	stx charreg
	sta grafreg
	lda #$08
	sta multreg
	lda sc_maincolor
	sta rahmen
	sta backgr
	rts

; ------------------------------------------------ 
; ------------------------------------------------ 
; Routines to handle GoDot's graphics color buffers
; for comments see sources for god.upmem
; ------------------------------------------------ 
; ------------------------------------------------ 

setcveks	sei
	lda #$35
	sta pport
	lda cbuf 		; color ram
	ldx #$d8
	bne scv0
setbveks	lda v1buf 	; vram1
	ldx #4
	dec pport
scv0	stx ls_adrmisc+1
	ldy #0
	sty sc_merk
	sty ls_adrmisc
	dey
setlast	sty gr_bkcol
	ldy #<(cstart)
	sty sc_vekt20
	sta sc_vekt20+1
	lda #<(500)
	sta ls_vekta8
	lda #>(500)
	sta ls_vekta8+1
	ldy #0
	rts

count	inc sc_vekt20
	bne cou5
	inc sc_vekt20+1
cou5	inc ls_adrmisc
	bne cou6
	inc ls_adrmisc+1
cou6	lda ls_vekta8
	bne cou7
	dec ls_vekta8+1
cou7	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	rts

getcolors	jsr setcveks
stco	lda (ls_adrmisc),y
	sta sc_merk
	inc ls_adrmisc
	bne stc0
	inc ls_adrmisc+1
stc0	lda (ls_adrmisc),y
	lsr
	rol sc_merk
	lsr
	rol sc_merk
	lsr
	rol sc_merk
	lsr
	rol sc_merk
	lda sc_merk
	sta (sc_vekt20),y
	jsr count
	bne stco
	jsr setbveks
stc1	lda (ls_adrmisc),y
	sta (sc_vekt20),y
	jsr count
	bne stc1
	ldy gr_bkcol
	bpl scv1
	ldy #0
	lda v2buf 	; vram2
	jsr setlast
	beq stc1
scv1	lda #$36
	sta pport
	cli
	lda backgr
	and #15
	sta gr_bkcol
	rts

setcolors	lda gr_bkcol
	sta backgr
	pha
	jsr setcveks
stc2	sty sc_merk
	lda (sc_vekt20),y
	lsr
	rol sc_merk
	lsr
	rol sc_merk
	lsr
	rol sc_merk
	lsr
	rol sc_merk
	sta (ls_adrmisc),y
	inc ls_adrmisc
	bne stc3
	inc ls_adrmisc+1
stc3	lda sc_merk
	sta (ls_adrmisc),y
	jsr count
	bne stc2
	jsr setbveks
stc4	lda (sc_vekt20),y
	sta (ls_adrmisc),y
	jsr count
	bne stc4
	ldy gr_bkcol
	bpl scv1
	pla
	tay
	lda v2buf 	; vram2
	jsr setlast
	beq stc4

; --------------------------------------------- 

modend	!eof 
