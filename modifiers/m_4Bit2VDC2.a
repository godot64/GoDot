
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ------------------------------------------------ 
;
;  mod.4Bit2VDC2
;    Modul zum Anzeigen von Bildern auf dem VDC (monochrom)
; 
;  1.00, 22.09.92, first release
;  1.01,         ,
;  1.02, 22.10.00,
;  1.03, 21.09.18, bugfixes
;
; ------------------------------------------------ 

; ------------------------------------------------ Equates

	vdcscreen		= 12	; VDC registers
	update		= 18
	gmode		= 25
	color		= 26
	bytes		= 30
	data		= 31

	plane		= $30
	dbl		= $35
	vertcnt		= $36

	src		= $b0
	ccnt		= src
	bitcnt		= $b2
	bcnt1		= $b3
	src0		= $f7
	hold		= $f9
	lcnt8		= $fa
	lcnt		= $fb
	bcnt		= $fc
	adcnt		= $fd
	byte		= $ff

	sprptr		= $07f8
	spr255		= $3fc0

	spr2x		= $d004
	spr2y		= $d005
	msbx		= spritehi
	scrcontrol	= $d011
	spren		= $d015
	sprxe		= $d01d
	border		= $d020
	sprcol2		= $d029

	oszi3		= $d40e
	wave		= $d412
	filter		= $d418
	rausch		= $d41b

	buf		= $c500

	vdcstat		= $d600
	vdcdata		= $d601

; ------------------------------------------------ 

header	jmp start
	!by $20
	!by 0
	!by 0
	!wo modend
	!wo 0
	!tx "VDC 640x400 mono"
	!tx "1.03"
	!tx "21.09.18"
	!tx "A.Dettke/W.Kling"

; ------------------------------------------------ 

start	lda rm_vdcflag	; running on a 128?
	sta vdctype
	and #1
	beq jnovdc	; no, blink border & leave

	lda gr_dither	; set dither mode
	tax
	lda dlo,x
	sta dmode
	lda dhi,x
	sta dmode+1

	jsr initvdc	; init vdc (if there is one)
	bcs jnovdc

	lda #$80		; feed randomizer
	sta filter
	sta oszi3
	sta oszi3+1
	lda #0
	sta wave
	sta plane
	sta plane+1
	lda #$81
	sta wave

	jsr initad	; init activity bar

	jsr vdcview	; render 4bit to vdc

	jsr resetbal	; reset balancing values

; ------------------------------------------------ Abschluss Activity

clearad	lda spren		; Wanderbalken aus
	and #$f3
	sta spren
	lda msbx
	and #$f3
	sta msbx
	clc 		; fertig
	rts 

; ------------------------------------------------ 

jnovdc	jmp novdc

; ------------------------------------------------ Init Activity

initad	ldy #60
	lda #0
-	sta spr255+3,y	; Spriteblock 255 vorbereiten
	dey 
	bpl -
	sty spr255	; dünner Strich
	sty spr255+1
	sty spr255+2
	lda #$0f		; Farbe hellgrau
	sta sprcol2
	sta sprcol2+1
	lda sprxe		; doppelt breit
	ora #$0c
	sta sprxe

	lda msbx		; x über 255
	ora #$0c
	sta msbx
	lda #8		; x-Ordinate: 8 (plus 256)
	sta spr2x
	lda #$20
	sta spr2x+2
	lda #$92		; y-Ordinate: 146
	sta spr2y		; (im Image Information Fenster)
	sta spr2y+2

	sty sprptr+2	; Sprite 255
	sty sprptr+3
	lda spren
	ora #$0c		; Activity-Balken aktivieren
	sta spren
	lda #5		; Startzähler (5 mal 40 = 200)
	sta adcnt
	rts

; ------------------------------------------------ Activity

adinc	dec adcnt
	bne +
	inc spr2y
	inc spr2y+2
	lda #5
	sta adcnt
+	rts 

; ----------------------------------------------------- 

novdc	lda border
	pha
	lda #2
	sta border
	ldx #$40
	jsr gd_dl2
	pla
	sta border
	clc
	rts

; ------------------------------------------------ 

vdcview	lda #<sy_4bit
	ldx #>sy_4bit
	sta src0
	sta src
	stx src0+1
	stx src+1

	lda #0
	sta dbl
	sta vertcnt
	lda #25
	sta lcnt8

lnloop8	lda #0
	sta lcnt

lnloop	jsr adinc		; activity
ads0	ldx #0

zloop	lda #2
	sta bcnt1

byloop	lda #$c0
	sta bitcnt

	lda #0
	sta byte
btloop	ldy #0
	lda (src),y	; get left pixel
	pha
	lsr
	lsr
	lsr
	lsr
	tay
	lda gr_btab,y	; care for balancing
	jsr makebyte	; dither
	lsr bitcnt
	lsr bitcnt
	pla
	and #$0f		; get right pixel
	tay
	lda gr_btab,y
	jsr makebyte	; dither

	inc src
	bne s3
	inc src+1
s3	lsr bitcnt
	lsr bitcnt
	bcc btloop

	sta buf,x		; store double scaled pixel to buffer
	inx
	dec bcnt1
	bne byloop

	lda src		; proceed to next tile
	clc
	adc #28
	sta src
	bcc s4
	inc src+1

s4	cpx #80		; until 80 bytes (one rasterline)
	bne zloop

	jsr moveline	; render to vdc

	ldx vertcnt	; next rasterline 
	inx
	cpx #8
	bne s41
	ldx #0

s41	stx vertcnt
	lda dbl		; care for double scale (vertically)
	eor #$ff
	sta dbl
	beq newline

	lda src0		; (reset start address of rasterline)
	sta src
	lda src0+1
	sta src+1
	bne ads0

newline	lda src0		; and proceed to next one
	clc
	adc #4
	sta src0
	sta src
	bcc s5
	inc src0+1
s5	lda src0+1
	sta src+1
	inc lcnt		; count rasterlines
	lda #8
	cmp lcnt
	beq s51
	jmp lnloop

s51	lda src0		; proceed to next blockrow
	clc
	adc #<1248
	sta src0
	sta src
	lda src0+1
	adc #>1248
	sta src0+1
	sta src+1
	dec lcnt8		; count blockrows
	beq done
	jmp lnloop8

done	rts

; ------------------------------------------------ 

makebyte	jmp (dmode)

dmode	!wo 0

; ------------------------------------------------ 

dithoff	cmp #8
	bpl do0
	lda #0
	!by $2c
do0	lda bitcnt
	ora byte
	sta byte
	rts

; ------------------------------------------------ 

dithrst	ldy vertcnt
	ora offs,y
	tay
	lda gr_orderedpat,y
	and bitcnt
	ora byte
	sta byte
	rts

; ------------------------------------------------ 

dithpat	asl
	asl
	asl
	ora vertcnt
	tay
	lda gr_pattern,y
	and bitcnt
	ora byte
	sta byte
	rts

; ------------------------------------------------ 

dithnoi	beq dn0
	cmp #15
	beq dn1
	ldy #0
	sta hold
	lda rausch
	and #$0f
	cmp hold
	bcs dn3
	ldy #$aa
dn3	lda rausch
	and #$0f
	cmp hold
	tya
	bcs dn2
	ora #$55
dn2	!by $2c
dn1	lda #$ff
	and bitcnt
dn0	ora byte
	sta byte
	rts

; ------------------------------------------------ 

dithrnd	cmp #8
	beq dr0
	bcs dr1
	bcc dr2
dr0	lda rausch
	!by $2c
dr1	lda bitcnt
	and bitcnt
	!by $2c
dr2	lda #0
	ora byte
	sta byte
	rts

; ------------------------------------------------ 

initvdc	lda vdctype	; vdc reserved?
	and #$40
	bne error2

	sei		; no
	lda vdctype	; which vdc?
	bpl iv0
	jmp initvdc2	; 64K?

iv0	ldy numregs1	; no, 16K
	ldx #9		; .x=reg
iv1	lda regs,y	; .a=val
	jsr setvdc
	dex
	dey
	bpl iv1

iv3	lda #0		; auf $0000 setzen
	ldx #update
	jsr setvdc
	inx
	jsr setvdc
iv4	cli
	clc
	rts

; ------------------------------------------------ 

error2	sec
	rts

numregs1	!by 9

;               0  1   2   3  4   5  6   7   8   9
regs	!by 126,80,100,$19,79,$e0,49,$00,$ff,$e7
	!by 126,80,102,$49,80,$e6,25,$49,$ff,$e7

; ------------------------------------------------ 

initvdc2	ldy #0
iv21	ldx register,y
	lda wert,y
	cpx #25		; reg 25?
	bne iv20

	jsr getvdc	; ja
	and #15
	ora wert,y	; bit 7 setzen (grafik an)

iv20	jsr setvdc
	iny
	cpy numregs2	; werte setzen
	bcc iv21

	lda #$aa		; %10101010
iv22	pha

	lda #0
	ldx #update	; auf $ffff setzen
	jsr setvdc
	inx
	jsr setvdc

	lda #0
	ldx #vdcscreen	; $0000 to reg 12/13
	jsr setvdc
	inx
	jsr setvdc

	ldx #data
	pla
	jsr setvdc

	ldy #161
iv23	ldx #bytes	; counter setzen
	lda #0
	jsr setvdc	; bereich löschen
	dey
	bne iv23

	jmp iv3		; auf startadresse zurücksetzen

	jmp iv4

; ------------------------------------------------ 

numregs2	!by 21

register	!by 000,001,002,003,004,005,006,007,008,009
	!by 024,025,027,028,020,021
	!by 012,013,026,012,013

wert	!by 126,080,102,073,080,006,025,073,003,007
	!by $00,$80,$00,$10,$a6,$e0
	!by $00,$00,$e0,$00,$00

;numregs2	!by 9
;register	!by 000,004,006,007,009,020,025,028,036
;wert	!by $7e,$d4,$c9,$c9,$01,$80,$c7,$ff,$00

; ------------------------------------------------ 

writedata	ldx #data
setvdc	stx vdcstat
wll	bit vdcstat
	bpl wll
	sta vdcdata
	rts

; ------------------------------------------------ 

getvdc	stx vdcstat
wll2	bit vdcstat
	bpl wll2
	lda vdcdata
	rts

; ------------------------------------------------ Transfer to VDC

moveline	sei
	lda dbl
	and #1
	beq ml1

	clc
	lda plane
	adc #$70
	tay
	lda plane+1
	adc #$53
	bne ml0

ml1	lda plane
	tay
	clc
	adc #80
	sta plane
	lda plane+1
	bcc ml0
	inc plane+1

ml0	ldx #update
	jsr setvdc
	inx
	tya
	jsr setvdc

	ldy #0		; write rasterline to vdc
mll	lda buf,y
	jsr writedata
	iny
	cpy #80
	bne mll

	cli
	rts

; -------------------------------------- Reset Balancing

resetbal	ldy #15
-	tya
	sta gr_btab,y
	dey
	bpl -
	lda #16
	sta gr_ctr
	sta gr_brt
	rts

; ------------------------------------------------ 

vdctype	!by 0

offs	!by $00,$10,$20,$30
	!by $00,$10,$20,$30

dlo	!by <dithoff
	!by <dithrst
	!by <dithpat
	!by <dithnoi
	!by <dithrnd

dhi	!by >dithoff
	!by >dithrst
	!by >dithpat
	!by >dithnoi
	!by >dithrnd

; ------------------------------------------------ 

modend	!eof
