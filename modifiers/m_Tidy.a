
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ----------------------------------------- 
;
;  mod.Tidy
;   Module to get rid of unwanted pixels
;
;  1.00, 23.03.20: first release
;
; ----------------------------------------- 

; ----------------------------------------- Equates

;	pport		= $01

	lcnt		= $30
	adcnt		= $31
	tcnt		= $32
	col		= $33
	dst		= $34
	src		= $36
	currentp		= $38
	countp		= $39
	valid		= $3a
	thispixel		= $3b
	max		= $3c
	maxcol		= $3d

	spalte		= sc_merk+1

	buf_o 		= $c600
	buf_m 		= $c800
	buf_u 		= $ca00
	buf_r 		= $cc00
	hist		= buf_o+340

	sprptr		= $07f8
	spr255		= $3fc0

	spr2x		= $d004
	spr2y		= $d005
	msbx		= $d010
	spren		= $d015
	sprxe		= $d01d
	border		= $d020
	sprcol2		= $d029

; ----------------------------------------- Header

header	jmp start
	!by $20
	!by 0
	!by 0
	!wo modend
	!wo 0
	!tx "CleanUpColPixels"
	!tx "1.00"
	!tx "23.03.20"
	!tx "A.Dettke        "

; ----------------------------------------- Main

start	ldx #<screenlst	; then: requester
	ldy #>screenlst
	jsr gd_screen

	sta sc_loop	; care for text mode
	ldx palgad	; palette gadget values
	inx
	stx palzl
	stx sc_zl
	ldx palgad+1
	inx
	stx palsp
	stx sc_sp
	ldx #4		; 4x4 area (color chooser)
	stx sc_br
	stx sc_ho
	jsr gd_esm3	; compute address and invert

	lda gr_picked	; get previously selected color to .x
	and #15		; (will be marked by "+")
	tax
	jsr initpal	; and show colors

	jmp gd_eloop	; now wait...

; ----------------------------------------- Event: Leave Module

evcancel	sec
	rts

; ----------------------------------------- Event: Tidy Up

evapply	jsr initad
	lda #0
	sta lcnt
	jsr puffern	; drei Zeilen puffern
	jsr umlagern

-	jsr umlagern
	inc lcnt
	jsr puffern
	jsr apply		; und bearbeiten

	dec lcnt
	jsr w_ergeb	; abspeichern
	jsr adinc

	inc lcnt		; bis alle Zeilen durch (200)
	lda lcnt
	cmp #199
	bne -

	jsr puffern	; letzte bearbeiten (Rand!)
	jsr umlagern
	jsr apply
	jsr w_ergeb

	jsr clearad	; fertig
	sec
	rts

; ----------------------------------------- Event: Set Intensity Level

evlevel	ldy level		; aktuelle Intensität
	lda spalte
	cmp #24
	bcs co4
	tya		; links geklickt: abwärts
	dey
	bmi co3
	jmp co5
co3	ldy #3

co4	cpy #4		; rechts geklickt: aufwärts
	bcc co2
	ldy #$ff
co2	iny
co5	sty level

	tya		; Level publizieren
	jsr gd_xcnvdez	; in Ziffern wandeln
	ldy #1
	sta leveltx,y	; in Screenlist eintragen
	cpx #$31
	bcs co1
	ldx #32
co1	txa
	dey
	sta leveltx,y

	ldy #0
	jsr settxt
	ldy #6		; und anzeigen
	jmp gd_xtxout1

; ----------------------------------------- Event: Pick Color

evgetcol	sec		; compute row where user clicked
	lda sc_merk
	sbc palzl
	asl
	asl
	sta hold
	sec		; compute column
	lda sc_merk+1
	sbc palsp
	clc
	adc hold
	tax		; take as index into palette
	lda gr_basepal,x
	tax
	ora #$80		; sign valid
	sta gr_picked
initpal	lda c64pal,x	; re-display palette
	sta col
	jsr makepal
stay	clc
	rts

; ----------------------------------------- create palette chooser

makepal	lda gr_picked	; get current color
	and #15
	sta plast		; and store

	lda palsp		; create chooser, first column
	sta sc_sp
	pha
	ldx #1		; width and height = 1
	stx sc_br
	stx sc_ho
	dex
	stx cnty		; counters = 0
	stx hold

mp1	stx cntx
	ldy hold
	jsr colorize	; colorize area (1x1)
	sec		; is PICKED color?
	lda sc_vekt20
	sbc #40
	sta sc_vekt20
	lda sc_vekt20+1
	sbc #$d4
	sta sc_vekt20+1
	ldy sc_chgcol
	cpy plast
	beq mp2
	lda #160		; no, write shift space
	bne mp3
mp2	lda #171		; yes, write "+"
mp3	ldy #0
	sta (sc_vekt20),y
	inc sc_sp		; next column
	inc hold
	ldx cntx
	inx
	cpx #4
	bne mp1

	pla		; re-get start column
	pha
	sta sc_sp
	ldx #0
	inc sc_zl		; next row
	inc cnty
	lda cnty
	cmp #4
	bne mp1

	pla		; clear stack
	rts		; finished

colorize	lda gr_basepal,y	; get color
	sta sc_chgcol
	ldx #4
	jmp gd_fcol	; colorize area (1x1)

; ----------------------------------------- Anwenden

apply	lda #0
	sta currentp
	ldx plast
	lda c64pal,x
	and #15
	sta col

-	jsr histogr1
	lda valid
	bmi ap0
	ldx thispixel	; color to look for
	lda hist,x	; exceeded?
	cmp level
	beq +
	bcs ap0		; no, next

+	jsr most
	lda maxcol	; yes, change pixel
	bmi ap0
	!by $2c
ap0	lda thispixel
	sta buf_r,y

	inc currentp
	lda currentp
	cmp #160
	bcc -

	lda #0
	sta currentp

-	jsr histogr2
	lda valid
	bmi ap1
	ldx thispixel	; color to look for
	lda hist,x	; exceeded?
	cmp level
	beq +
	bcs ap1		; no, next

+	jsr most
	lda maxcol	; yes, change pixel
	bmi ap1
	!by $2c
ap1	lda thispixel
	sta buf_r+160,y

	inc currentp
	lda currentp
	cmp #160
	bcc -

	rts 

; ----------------------------------------- Puffer umlagern

umlagern	ldy #0		; von unten nach oben schieben
-	lda buf_m-1,y
	sta buf_o-1,y
	lda buf_m+160,y
	sta buf_o+160,y
	lda buf_u-1,y
	sta buf_m-1,y
	lda buf_u+160,y
	sta buf_m+160,y
	iny 
	cpy #161
	bne -
	rts 

; ----------------------------------------- Puffer füllen

puffern	lda lcnt		; aktuelle Rasterzeile
	pha 
	lsr		; durch 8
	lsr
	lsr
	tax 
	pla 
	and #$07		; (rz and 7) * 4
	asl
	asl
	sta src		; nach Quelle
	lda hi_rows,x
	sta src+1
	lda #<buf_u	; Ziel
	ldx #>buf_u
	sta dst
	stx dst+1

	ldx #0
	lda #40		; 40 Bytes in Einzelpixel wandeln
	sta tcnt

--	ldy #0
-	lda (src),y	; Pixel links
	pha 
	lsr
	lsr
	lsr
	lsr
	sta (dst,x)	; puffern
	inc dst
	bne +
	inc dst+1
+	pla 		; Pixel rechts
	and #$0f
	sta (dst,x)	; puffern
	inc dst
	bne +
	inc dst+1
+	iny 
	cpy #4		; 4mal (eine Kachel)
	bne -

	lda src		; nächste Kachel
	clc 
	adc #32
	sta src
	bcc +
	inc src+1
+	dec tcnt		; 40 mal
	bne --

	lda buf_u		; für definierten Rand sorgen
	sta buf_u-1
	lda buf_u+319
	sta buf_u+320
	rts 

; ----------------------------------------- Ergebnis nach 4Bit

w_ergeb	lda lcnt
	pha 
	lsr
	lsr
	lsr
	tax 
	pla 
	and #$07
	asl
	asl
	sta src		; Ziel: 4Bit
	lda hi_rows,x
	sta src+1
	lda #<buf_r	; Quelle: Result Buffer
	ldx #>buf_r
	sta dst
	stx dst+1

	ldx #0		; wie oben
	lda #40
	sta tcnt
--	ldy #0
-	lda (dst,x)	; Pixel wieder zusammenführen
	asl
	asl
	asl
	asl
	inc dst
	bne +
	inc dst+1
+	ora (dst,x)
	inc dst
	bne +
	inc dst+1
+	sta (src),y	; und speichern
	iny 
	cpy #4
	bne -

	lda src
	clc 
	adc #32
	sta src
	bcc +
	inc src+1
+	dec tcnt
	bne --
	rts 

; ----------------------------------------- Histograms

clrhist	ldy #15
	lda #0
-	sta hist,y
	dey
	bpl -
	sty valid
	rts

histogr1	jsr clrhist
	sty maxcol
	ldy currentp	; walks from 0 to 159 (1st halve)
	lda buf_m,y	; valid pixel?
	sta thispixel
	cmp col
	bne +		; no, skip counting
	ldx buf_o-1,y	; one pixel: count neighbours
	inc hist,x
	ldx buf_o,y
	inc hist,x
	ldx buf_o+1,y
	inc hist,x
	ldx buf_m-1,y
	inc hist,x
	ldx buf_m+1,y
	inc hist,x
	ldx buf_u-1,y
	inc hist,x
	ldx buf_u,y
	inc hist,x
	ldx buf_u+1,y
	inc hist,x
	stx valid
+	rts		; result in hist

histogr2	jsr clrhist
	sty maxcol
	ldy currentp	; walks from 160 to 319 (2nd halve)
	lda buf_m+160,y	; valid pixel?
	sta thispixel
	cmp col
	bne +		; no, skip counting
	ldx buf_o+159,y	; one pixel: count neighbours
	inc hist,x
	ldx buf_o+160,y
	inc hist,x
	ldx buf_o+161,y
	inc hist,x
	ldx buf_m+159,y
	inc hist,x
	ldx buf_m+161,y
	inc hist,x
	ldx buf_u+159,y
	inc hist,x
	ldx buf_u+160,y
	inc hist,x
	ldx buf_u+161,y
	inc hist,x
	stx valid
+	rts		; result in hist

most	ldx #0
	stx max
-	lda hist,x
	cmp max
	bcc +
	stx maxcol
	sta max
+	inx
	cpx #16
	bcc -
	rts

; ----------------------------------------- Text Output Handler

tabigad	!wo levelgad	; .y:0

settxt	lda #<tabigad
	sta sc_texttab
	lda #>tabigad
	sta sc_texttab+1

gettab	lda (sc_texttab),y	; set gadget parameters (where to output)
	sta sc_screentab
	iny
	lda (sc_texttab),y
	sta sc_screentab+1

	lda #0
	tax
	tay
gt0	jsr gd_setpos
	cpx #4
	bne gt0
	jsr gd_trim
	jmp gd_initmove

; ----------------------------------------- Activity

adinc	dec adcnt		; advance after adcnt passes
	bne +
	inc spr2y
	inc spr2y+2
	jmp setadcnt	; reset adcnt

; ----------------------------------------- Abschluss Activity

clearad	lda spren		; Wanderbalken aus
	and #$f3
	sta spren
	lda msbx
	and #$f3
	sta msbx
	lda #$ff		; Grafik verändert,
	sta gr_redisp	; also Flag für System setzen
	clc 		; fertig
+	rts 

; ----------------------------------------- Init Activity

initad	ldy #60		; Spriteblock 255 vorbereiten
	lda #0
-	sta spr255+3,y
	dey 
	bpl -
	sty spr255	; dünner Strich
	sty spr255+1
	sty spr255+2
	lda #15		; Farbe hellgrau
	sta sprcol2
	sta sprcol2+1
	lda sprxe		; doppelt breit
	ora #$0c
	sta sprxe

	lda msbx		; x über 255
	ora #$0c
	sta msbx
	lda #8		; x-Ordinate: 8 (plus 256)
	sta spr2x
	lda #$20
	sta spr2x+2
	lda #$92		; y-Ordinate: 146
	sta spr2y		; (im Image Information Fenster)
	sta spr2y+2

	sty sprptr+2	; Sprite 255
	sty sprptr+3
	lda spren
	ora #$0c		; Activity-Balken aktivieren
	sta spren

setadcnt	lda #5		; Startzähler (hier: 5 mal 40 = 200)
	sta adcnt
	rts

; ----------------------------------------- Data

palzl	!by 0
palsp	!by 0
plast	!by 0
hold	!by 0
cntx	!by 0
cnty	!by 0
level	!by 2

c64pal	!by $00,$ff,$44,$cc,$55,$aa,$11,$dd
	!by $66,$22,$99,$33,$77,$ee,$88,$bb

hi_rows 	!by $40, $45, $4a, $4f, $54, $59, $5e, $63
	!by $68, $6d, $72, $77, $7c, $81, $86, $8b
	!by $90, $95, $9a, $9f, $a4, $a9, $ae, $b3, $b8 

; ----------------------------------------- Screenlist

screenlst	!by 0
	!by 9,14,13,8,$01
	!wo 0

palgad	!by 11,14,6,6,$47
	!wo evgetcol

levelgad	!by 10,22,4,3,$e0
	!wo evlevel
leveltx	!scr " 2",0	
	!by 12,20,7,3,$cd
	!wo evapply
	!scr "Apply@"
	!by 14,20,7,3,$ce
	!wo evcancel
	!scr "Leave@"

title	!by $c0,9,14,4
	!scr "Tidy",0
	!by $c0,10,20,1
	!scr "+",0
	!by $80

; ----------------------------------------- 

modend	!eof
