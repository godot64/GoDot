
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ----------------------------------------- 
;
;  mod.DynaRange
;   Modifier which expands the balancing range to the max
;   (affects grey values, enhances contrast)
;
;  0.99, 14.11.92, first release
;  1.00, 08.12.20, added GUI
;
; ----------------------------------------- 

; ----------------------------------------- Equates

	adcnt		= $30
	data		= $35		; /$36
	hasnull		= $37
	pass		= $38
	lower		= $39
	bbuf		= $3a
	range		= $3b

	histlo		= $c400
	histhi		= histlo+16
	drtab		= histhi+16
	baltab		= drtab+16

	sprptr		= $07f8
	spr255		= $3fc0

	spr2x		= $d004
	spr2y		= $d005
	msbx		= $d010
	spren		= $d015
	sprxe		= $d01d
	border		= $d020
	sprcol2		= $d029

; ----------------------------------------- Header

	jmp start
	!by $20
	!wo 0
	!wo modend
	!wo 0
	!tx "expansion2max   "
	!tx "1.00"
	!tx "08.12.20"
	!tx "W.Kling/A.Dettke"
;
; ----------------------------------------- Main

start	jsr makechr
	lda #$e0
	sta baltx
	sta dyntx
	lda #$ff
	sta pass
	jsr process	; do the thing first time, then
	jmp gd_eloop	; wait...

; ------------------------------------------------ Event: Exit

evleave	sec		; leave modifier
	rts

; ------------------------------------------------ Event: Apply

evapply	jsr initad	; re-init activity
	lda #<sy_4bit
	ldy #>sy_4bit
	sta data
	sty data+1

	ldy #0
-	lda (data),y	; get left pixel
	pha 
	lsr
	lsr
	lsr
	lsr
	tax 
	lda drtab,x	; get according balancing value
	asl
	asl
	asl
	asl
	sta bbuf		; and store
	pla 		; get right pixel
	and #$0f
	tax 
	lda drtab,x	; get according balancing value
	ora bbuf		; combine with left pixel
	sta (data),y	; and set as new value
	iny 		; one page
	bne -

	jsr adinc		; activity
	inc data+1	; next page
	lda data+1
	cmp #>sy_bigbuffer
	bne -

	sta gr_redisp	; Grafik verändert

; ------------------------------------------------ Process Data

process	jsr initad	; init activity
	jsr histo		; compute histogram and new balancing table (drtab)
	jsr dobalance	; and show original image data and
	jsr initad
	jsr dorange	; processed image data
	jsr clearad	; end activity

	ldx #<dynlst	; requester in the end
	ldy #>dynlst
	jsr gd_screen
	clc
	rts 

; ----------------------------------------- Compute Histograms

histo	lda #0		; clear histograms
	ldx #63
-	sta histlo,x
	dex 
	bpl -

	lda #<sy_4bit	; examine 4Bit data
	ldx #>sy_4bit
	sta data
	stx data+1

	ldy #0		; count colors:
aloop	lda (data),y	; left pixel
	pha 
	lsr
	lsr
	lsr
	lsr
	tax 
	inc histlo,x
	bne +
	inc histhi,x
+	pla 		; right pixel
	and #$0f
	tax 
	inc histlo,x
	bne +
	inc histhi,x
+	iny 		; one page
	bne aloop

	jsr adinc		; activity
	inc data+1	; next page
	lda data+1
	cmp #>sy_bigbuffer	; until end of 4bit
	bne aloop

	sta hasnull	; set to "black wasn't used" (>0)
	ldx #0		; determine used colors
-	lda histlo,x
	ora histhi,x
	beq ++
	txa		; color .x was used
	bne +		; was black?
	sta hasnull	; yes, set to "black was used" (=0)
+	sta baltab,x
++	inx
	cpx #16
	bcc -

	ldx #$ff		; find start of range
-	inx 		; (lowest gray value)
	lda histlo,x
	ora histhi,x
	beq -
	stx lower

	ldx #16		; find end of range
-	dex 		; (highest gray value)
	lda histlo,x
	ora histhi,x
	beq -
	stx range

	lda range		; compute range (to .y)
	sec 
	sbc lower

	tay 		; compute new balancing table
	ldx lower		; .y: index to distance (starting w/ 8)
	lda #8
-	pha 
	lsr
	lsr
	lsr
	lsr
	sta drtab,x
	pla 
	clc 
	adc distab,y
	inx 
	cpx range
	bne -

	lda #15		; fill table w/ max value
	sta drtab,x
+	rts 

; ------------------------------------------------ 

dobalance	ldy #15		; convert balancing values to dither patterns
sh2	lda baltab,y
	ora #$e0
	sta baltx,y	; write to output buffer
	dey
	bpl sh2
	bmi setnull

; ------------------------------------------------ 

dorange	inc pass
	ldy #15		; convert new balancing values to dither patterns
sh3	lda drtab,y
	and #$0f
	ora #$e0
	sta dyntx,y	; write to output buffer
	dey
	bpl sh3

	lda pass
	bne setnull
	ldx lower
	lda #$df
	sta dyntx,x

setnull	lda hasnull
	beq +
	lda #$e0
	!by $2c
+	lda #$df
	sta baltx
	sta dyntx
	clc
	rts

; --------------------------------------- New Char

makechr	ldx #7		; create
-	lda chschr,x
	sta sc_undochar,x
	dex
	bpl -
	rts

; ----------------------------------------- Data

distab	!by 0,240,120,80
	!by 60,48,40,34
	!by 30,27,24,22
	!by 20,18,17,16

chschr	!by $00,$40,$00,$00,$00,$00,$00,$00

; ------------------------------------------------ Abschluss Activity

clearad	lda spren		; Wanderbalken aus
	and #$f3
	sta spren
	lda msbx
	and #$f3
	sta msbx
	clc 		; fertig
	rts 

; ------------------------------------------------ Init Activity

initad	ldy #60
	lda #0
-	sta spr255+3,y	; Spriteblock 255 vorbereiten
	dey 
	bpl -
	sty spr255	; dünner Strich
	sty spr255+1
	sty spr255+2
	lda #$0f		; Farbe hellgrau
	sta sprcol2
	sta sprcol2+1
	lda sprxe		; doppelt breit
	ora #$0c
	sta sprxe

	lda msbx		; x über 255
	ora #$0c
	sta msbx
	lda #8		; x-Ordinate: 8 (plus 256)
	sta spr2x
	lda #$20
	sta spr2x+2
	lda #$92		; y-Ordinate: 146
	sta spr2y		; (im Image Information Fenster)
	sta spr2y+2

	sty sprptr+2	; Sprite 255
	sty sprptr+3
	lda spren
	ora #$0c		; Activity-Balken aktivieren
	sta spren
	lda #3		; Startzähler (5 mal 40 = 200)
	sta adcnt
	rts

; ----------------------------------------- 

adinc	dec adcnt
	bne +
	inc spr2y
	inc spr2y+2
	lda #3
	sta adcnt
+	rts 

; ------------------------------------------------ 

dynlst	!by 0		; no cls

	!by 6,9,20,11,$91	; Requester
	!wo 0
	!scr "Dynamic Range",0

balgad	!by 8,10,18,3,$a0	; Balancing
	!wo 0
baltx	!by $df,$e1,$e2,$e3,$e4,$e5,$e6,$e7
	!by $e8,$e9,$ea,$eb,$ec,$ed,$ee,$ef,0

dyngad	!by 11,10,18,3,$a0	; Dynamic Range
	!wo 0
dyntx	!by $df,$e1,$e2,$e3,$e4,$e5,$e6,$e7
	!by $e8,$e9,$ea,$eb,$ec,$ed,$ee,$ef,0

	!by 14,15,7,3,$cc	; Apply
	!wo evapply
	!scr "Apply",0

	!by 14,22,6,3,$cc	; Exit
	!wo evleave
	!scr "Exit",0

	!by $80

; ----------------------------------------- 

modend	!eof

