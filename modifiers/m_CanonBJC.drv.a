
	*= $c000
	!src "godotlib.lib"

; ------------------------------------
;
;  mod.CanonBJC.drv
;  printer driver for Canon BJC Color Printers
;
;  1.00, 09.03.95: first release
;  1.01,
;  1.02, 03.05.95: added cemntered printout
;  1.03, 30.05.97: added STOP key
;  1.04, 26.05.17: added color balancing
;                  new feature: publish cmy table via header
;
; ------------------------------------ 


; ------------------------------------ Declarations

	dst	= $30
	dst0	= $32
	cnt80	= $34
	vertfak	= $35
	vertcnt	= $36
	byte	= $37
	bitcnt	= $38
	bcnt1	= $39
	src	= $3a
	src0	= $3c
	adcnt	= $3e
	hori	= $3f
	kbuf	= $40
	cbuf	= $42
	mbuf	= $44
	ybuf	= $46
	dbl	= $48
	oneline	= $49
	index	= $4a
	horifak	= $4b
	fullbyte	= $4c
	pixposx	= $4d
	pixposy	= $4f
	lcnt8	= $51
	lcnt	= $52
	bcnt	= $53

	status	= $90
	geraet	= $9a

	shift	= $028d

	basebuf	= $ca00

; ------------------------------------ Header

header	jmp start
	!by $20
	!by 0
	!by 0
	!wo modend
	!wo cyan			; new: publish CMY table
	!pet "CanonBJC600/4000"
	!pet "1.04"
	!pet "26.05.17"
	!pet "Arndt Dettke    "

; ------------------------------------ Main

start	jsr makech	; Listbox-Kringel erzeugen
	bit type		; Default: $40 (Centronics)
	bvc st0
	jsr initpar	; Initialize Parallel Connection

st0	ldx #<(pflst)	; Requester
	ldy #>(pflst)
	jsr gd_screen

	ldy #3		; colorize main gadget
st01	lda maingad,y
	sta sc_zl,y
	dey
	bpl st01
	ldx #2		; with text color
	jsr gd_fcol

	lda #0		; reset centered-flag
	sta cflag
	lda dpiflag	; Bildgröße
	asl		; mal 2: Index in Tabelle
	tay
	jsr setpixpos	; set picture positions accordingly

	jsr gd_eloop	; wait

	sec		; leave driver
	rts

; ------------------------------------ Event: Render Graphics to Printer (Print)

jdone	jmp done

sevpfox	jsr centered	; Zentrierung? (.y=0, wenn nicht)
	sty cflag		; .y=3: tiny, .y=2: norm, .y=1: lrge
	beq spf0

	jsr spx41		; sonst: lfd. Bildnummer anzeigen

spf0	lda #0		; STOP: init
	sta sc_stop
	sta vertcnt
	sta index
	sta src0
	sta src
	lda #5		; activity: init
	jsr initad
	lda rasfl		; Rastertyp
	tax
	lda dlo,x
	sta dmode
	lda dhi,x
	sta dmode+1
	lda dpiflag	; Bildgröße
	jsr setvecs	; Druckvorbereitung
	jsr initprt	; Druck starten
spf1	bne jdone		; (wenn kein Fehler)

	ldx #>($4000)	; Bild ab $4000
	stx src0+1
	stx src+1
	lda vertfak	; vertikaler Vergrößerungsfaktor mindestens: 2 (sonst 4 oder 6)
	sta dbl
	lda horifak	; entsprechend waagerecht (1, 2 oder 3)
	sta hori

	lda #25		; 25 Kachelzeilen
	sta lcnt8
lnloop8	lda #0		; 8 Rasterzeilen pro Kachel
	sta lcnt

lnloop	jsr adinc		; Activity

ads0	lda #>(basebuf)	; kloop ist selbstmodifizierend (für weitere Durchgänge)
	sta kloop+2

	lda #0		; zählt eine Zeile (80 Druckbytes)
	sta cnt80
	ldx #4
	tay
kloop	sta basebuf,y	; Puffer löschen
	iny
	bne kloop
	inc kloop+2
	dex
	bne kloop

zloop	lda fullbyte	; Vergrößerungsfaktor (2, 4 oder 6)
	sta bcnt1		; nach bcnt1 

byloop	lda #$c0		; Pixelmuster: %11000000
	sta bitcnt

btloop	ldy index		; eine Druckzeile (Rasterlinie) aufbereiten
	lda (src),y	; zwei Pixel holen
	pha
	lsr
	lsr
	lsr
	lsr
	tax
	jsr colorize	; linkes Pixel rendern
	lsr bitcnt	; Pixelmuster jetzt: %00110000 bzw. %00000011
	lsr bitcnt
	pla
	and #$0f
	tax
	jsr colorize	; rechtes Pixel rendern
	dec index
	dec hori
	bne s3
	lda horifak
	sta hori
	inc index
s3	inc index
	lsr bitcnt	; Pixelmuster nun: %00001100 bzw. %00000000
	lsr bitcnt
	bcc btloop	; bis alle Pixel (8) durch

	inc cnt80		; Druckbyte zählen
	dec bcnt1		; Vergrößerung beachten
	bne byloop	; dann nochmal

	lda #0		; nächste Kachel
	sta index
	lda src
	clc
	adc #32
	sta src
	bcc s4
	inc src+1
s4	ldx cnt80		; Zeile fertig?
	cpx oneline
	bne zloop		; nein, weiter aufbereiten

	ldx sc_stop	; STOP gedrückt?
	bne done		; ja, Abbruch

	jsr moveline	; eine Rasterzeile  drucken

	ldx vertcnt	; Senkrechtzähler (bis 8)
	inx
	cpx #8
	bne s411
	ldx #0
s411	stx vertcnt
	dec dbl		; Vergrößerungsfaktor beachten
	beq newline
	lda src0		; dann Zeile nochmal drucken
	sta src
	lda src0+1
	sta src+1
	jmp ads0

newline	lda vertfak	; danach: neue Rasterzeile
	sta dbl
	lda src0
	clc
	adc #4
	sta src0
	sta src
	bcc s5
	inc src0+1
s5	lda src0+1
	sta src+1
	inc lcnt		; 8 Rasterzeilen?
	lda #8
	cmp lcnt
	beq s51
	jmp lnloop	; nein, Loop

s51	lda src0		; danach: neue Kachelzeile
	clc
	adc #<(1248)
	sta src0
	sta src
	lda src0+1
	adc #>(1248)
	sta src0+1
	sta src+1
	dec lcnt8		; Kachelzeilen zählen
	beq done		; bis alle 25 durch
	jmp lnloop8	; sonst: Loop

done	jsr endoff	; Abschluss
toutdone	jsr clearad	; Activity beenden
	jsr clrch		; Drucker aus
	lda #4
	jsr close
	jsr gd_spron	; Mauszeiger an

	ldx cflag		; Zentrierung?
	beq cok		; nein (0), dann einfach 1 weiter zählen

	lda #0		; ja, dann: re-init Centered
	sta cflag
	dex		; und ganze Bilderzeile zählen:
	beq cok		; lrge (1 weiter)
	dex
	beq ci0		; norm (2 weiter)
	jsr sevpix	; tiny (3 weiter)
ci0	jsr sevpix
cok	jmp sevpix

; ------------------------------------ Dither

makebyte	jmp (dmode)

dithrst	ldy vertcnt
	ora offs,y
	tay
	lda gr_orderedpat,y
	and bitcnt
	rts

dithpat	asl
	asl
	asl
	ora vertcnt
	tay
	lda gr_pattern,y
	and bitcnt
	rts

; ------------------------------------ Zeile drucken

moveline	ldx oneline
	stx cnt80
	lda colorfl
	sta colcnt
	beq col0
	cmp #2
	bne col1
	lda cbuf
	ldy cbuf+1
	bne col2
col0	inc trans0

col1	lda #<(basebuf)	; Zeiger auf Puffer
	ldy #>(basebuf)
col2	sta dst
	sty dst+1

coll	ldy #0		; Farbauszug einleiten (Druckerkommando senden)
col3	lda trans,y
	jsr bsout
	iny
	cpy #6
	bne col3

	ldy #0		; Farbauszüge schicken
colloop	lda (dst),y
	jsr bsout
	inc dst
	bne wl6
	inc dst+1
wl6	dex		; eine ganze Zeile
	bne colloop

wl61	lda nxcol,x	; nächste Farbe
	jsr bsout
	inx
	cpx #7
	bne wl61

	ldx colcnt	; Druckerkommando anpassen
	lda trcols,x
	sta trcolor
	ldx cnt80		; Bytezähler zurück
	dec colcnt	; Farbenzähler
	bmi col4
	bne coll		; nächste Farbe darüber drucken 
	inc trans0
	bne coll
col4	dec trans0	; Abschluss 

	rts

; ------------------------------------ Daten aufbereiten: Colorize

colorize	tay		; Wert ist in .a und identisch in .x (und jetzt auch in .y)
	lda colorfl	; Schwarzweiß?
	beq rasterize	; dann dort weiter

	cmp #2		; Anzahl Colorplanes 2? (CMY)
	beq cz0		; dann Schwarzanteil überspringen

	lda black,y	; CMYK: Schwarzanteil
	beq cz0		; keiner

	jsr makebyte	; sonst: aufbereiten
	ldy cnt80
	sta byte
	lda (kbuf),y	; und puffern
	ora byte
	sta (kbuf),y
	lda black,x	; Rest (CMY) übergehen (nicht noch mischen)
	bne cz1

cz0	txa		; Cyan
	tay
	lda cyan,y
	jsr weighted	; care for balancing settings ### 1.04
	jsr makebyte
	ldy cnt80
	sta byte
	lda (cbuf),y
	ora byte
	sta (cbuf),y

	txa		; Magenta
	tay
	lda magenta,y
	jsr weighted	; care for balancing settings ### 1.04
	jsr makebyte
	ldy cnt80
	sta byte
	lda (mbuf),y
	ora byte
	sta (mbuf),y

	txa		; Yellow
	tay
	lda yellow,y
	jsr weighted	; care for balancing settings ### 1.04
	jsr makebyte
	ldy cnt80
	sta byte
	lda (ybuf),y
	ora byte
	sta (ybuf),y

cz1	rts

; ------------------------------------ Daten aufbereiten: Rasterize

rasterize	jsr wght2		; Balancing beachten ### 1.04
	jsr makebyte	; Grauwert puffern
	ldy cnt80
	sta byte
	lda (kbuf),y
	ora byte
	sta (kbuf),y
	rts

; ------------------------------------ Give Weight for Color Balancing

weighted	lda invtab,y	; get weighted balancing value ### 1.04 ---
	tay
wght2	lda gr_btab,y
	tay
	lda invtab,y
	rts		; ### bis hier ---

; ------------------------------------ Close Parallel Connection

paroff	ldx oldbsout	; kein Centronics aktiv?
	beq p0
	ldy oldbsout+1	; doch: Aufrufadressen setzen
	stx $0326
	sty $0327
	ldx oldchkout
	ldy oldchkout+1
	stx $0320
	sty $0321
p0	rts

; ------------------------------------ Event: Set Type of Interface

sevtype	jsr paroff	; close parallel port
	lda tflag		; Typ in tflag (3 verschiedene)
	cmp #2
	bne et0
	lda #$ff
	sta tflag
et0	inc tflag

	ldx tflag
	lda ptypes,x
	sta type
	lda ptoffs,x
	tax
	ldy #6
et1	lda ptext,x
	sta pgadt,y
	dex
	dey
	bpl et1

	iny
	jsr settext	; anzeigen
	ldy #6
	jsr gd_xtxout1
	bit type
	bmi wies
	bvs cent

merl	lda #5		; Merlin/Xetec Interface, Sekundäradresse 5
	!by $2c
wies	lda #1		; Wiesemann Interface, Sekundäradresse 1
	sta sek
	clc
	rts

cent	jmp initpar	; Centronics Interface

; ------------------------------------ Textout Handler

tabigad	!wo (pgad)
	!wo (dpigad)
	!wo (maingad)
	!wo (hpgad)
	!wo (shingad)
	!wo (rasgad)
	!wo (picnogad)

settext	lda #<(tabigad)
	sta sc_texttab
	lda #>(tabigad)
	sta sc_texttab+1

gettext	lda (sc_texttab),y
	sta sc_screentab
	iny
	lda (sc_texttab),y
	sta sc_screentab+1
	lda #0
	tax
	tay
gt0	jsr gd_setpos
	cpx #3
	bne gt0
	stx sc_ho
	jsr gd_trim
	jmp gd_initmove

; ------------------------------------ Event: Bildgröße wählen

sevdpi	lda dpiflag	; 0=tiny (21 Bilder), 1=norm (8 B.), 2=lrge (3 B.)
	cmp #2
	bne dp0
	lda #$ff
	sta dpiflag
dp0	inc dpiflag
	jsr setpixmx	; Anzahl Bilder pro Seite bestimmen
	ldx dpiflag
	lda gadoffs,x
	tax
	ldy #3
dpi1	lda dpitext,x
	sta dpitx,y
	dex
	dey
	bpl dpi1
	ldy #2
dpi2	jsr settext
	ldy #6
	jmp gd_xtxout1

; ------------------------------------ Event: Modus auswählen

sevhp	lda hpflag	; Color oder B/W
	beq hp0
	lda #$ff
	sta hpflag
hp0	inc hpflag
	ldx hpflag
	lda hpoffs,x
	tax
	ldy #20
hp1	lda hptext,x
	sta hptx,y
	dex
	dey
	bpl hp1
	ldx hpflag
	lda hpplns,x
	sta planes
	tax
	dex
	stx colorfl
	ldy #6
hp5	jmp dpi2

; ------------------------------------ Event: Anzahl Druckdurchgänge wählen (Shingling)

sevshing	lda shingfl	; 4 Möglichkeiten: 4, 2, 1 oder slow (mit Trockenpause)
	cmp #3
	bne shi0
	lda #$ff
	sta shingfl
shi0	inc shingfl
	ldx shingfl
	lda passes,x
	sta qual
	lda gadoffs,x
	tax
	ldy #3
shi1	lda passtext,x
	sta shintx,y
	dex
	dey
	bpl shi1
	ldy #8
	bne hp5

; ------------------------------------ Event: Raster auswählen

sevras	lda rasfl		; "Ordered" oder "Pattern"
	beq ra0
	lda #$ff
	sta rasfl
ra0	inc rasfl
	ldx rasfl
	lda ptoffs,x
	tax
	ldy #6
ra1	lda rastext,x
	sta rastx,y
	dex
	dey
	bpl ra1
	ldy #10
hp8	bne hp5

; ------------------------------------ Anzahl der Bilder pro Seite bestimmen

setpixmx	lda dpiflag	; Bildgröße?
	asl
	tay		; (nach .y für setpixpos)
	bne spx0
	lda #20		; tiny: 21
	bne spx1
spx0	cmp #2
	bne spx2
	lda #7		; norm: 8
	bne spx1
spx2	lda #2
spx1	sta pixmx		; lrge: 3
	sta pixfl
	jsr setpixpos	; (Start-) Position festlegen

; ------------------------------------ Event: Bildnummer (und Position) anwählen

sevpix	lda pixfl		; Maximum erreicht?
	cmp pixmx
	bcc spx3
	lda #$ff		; dann auf 0
	sta pixfl
spx3	inc pixfl
	ldx pixfl

	lda dpiflag
	beq spx31
	cmp #1
	bne spx33
	ldy pixoffsy2,x	; Bildposition setzen: y
	bne spx32
spx33	ldy pixoffsy3,x
	bne spx32
spx31	ldy pixoffsy,x
spx32	ldx #1
spx4	lda (pixposy),y
	sta capy,x
	dey
	dex
	bpl spx4

	ldx pixfl		; und Bildposition: x
	lda dpiflag
	beq spx42
	cmp #1
	bne spx43
	ldy pixoffsx2,x
	bne spx41
spx43	ldy #0
	beq spx41
spx42	ldy pixoffsx,x
spx41	lda (pixposx),y
	sta capx

	ldx pixfl		; Nummer ausgeben
	inx
	txa
	jsr gd_xcnvdez
	sta picnotx+1
	txa
	and #15
	bne spx5
	ldx #32		; führende 0 zu Space
spx5	stx picnotx
	ldy #12
	jmp dpi2

; ------------------------------------ Set Picture Position

setpixpos	ldx #0		; Bildgröße (*2) in .y
spx10	lda pixx,y
	sta pixposx,x	; Startpositionen eintragen
	lda pixy,y
	sta pixposy,x
	iny
	inx
	cpx #2
	bne spx10
	rts

; ------------------------------------ Activate Centered Printout

centered	lda dpiflag	; welches Bildgröße?
	beq cen0		; 0: Tiny
	cmp #2
	beq cen1
	and #1		; 1: Norm
	beq nocent
	bne cen1

cen0	ldx pixfl		; aktuelles Bild
	lda pixoffsx,x	; am linken Rand? 
	bne nocent	; (nein, Sprung)

cen1	lda shift		; 2: Lrge
	and #1		; Shift gedrückt?
	beq nocent	; (nein, Sprung)

	ldy #0
	ldx dpiflag	; Größe zurück
	beq ctiny
	dex
	beq cnorm
	dex
	beq clarge

ctiny	iny		; tiny: .y=3
cnorm	iny		; norm: .y=2
clarge	iny		; lrge: .y=1
	rts

nocent	ldy #0		; kein Shift oder nicht am linken Rand: .y=0
	rts

; ------------------------------------ Event: Cancel

sevcan	jsr paroff
	sec
	rts

; ------------------------------------ Define Listbox Char

makech	ldx #7
mc0	lda char,x
	sta sc_undochar,x
	dex
	bpl mc0
	rts

; ------------------------------------ 

char	!by $00,$3a,$46,$4e,$40,$40,$3c,$00
invtab	!by 15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
maingad	!by 11,6,14,7

; ------------------------------------ Screenlist

pflst	!by 0
	!by 4,5,24,17,$81,0,0
	!scr "Canon BJC600 Driver@"
hpgad	!by 8,5,24,3,$ca,<(sevhp),>(sevhp),223
hptx	!scr "       Color         @"
dpigad	!by 10,23,6,3,$ce,<(sevdpi),>(sevdpi)
dpitx	!scr "norm@"
shingad	!by 12,23,6,3,$ce,<(sevshing),>(sevshing)
shintx	!scr "   2@"
picnogad	!by 14,23,6,3,$ce,<(sevpix),>(sevpix),32,32
picnotx	!scr " 1@"
rasgad	!by 16,20,9,3,$ce,<(sevras),>(sevras)
rastx	!scr "Pattern@"
pgad	!by 18,5,10,3,$c7,<(sevtype),>(sevtype),223
pgadt	!scr "Centron@"
	!by 18,15,7,3,$cc,<(sevpfox),>(sevpfox)
	!scr "Print@"
	!by 18,22,7,3,$ce,<(sevcan),>(sevcan)
	!scr "Leave@"
	!by $c0,6,5,22
	!scr "Select Options & Print@"
	!by $c0,10,5,6
	!scr "Format@"
	!by $c0,12,5,12
	!scr "Print Passes@"
	!by $c0,14,5,8
	!scr "Position@"
	!by $c0,16,5,6
	!scr "Raster@"
	!by $80

; ------------------------------------ Data

trcols	!pet "kymc"
ptypes	!by $40,$80,$00
type	!by $40
tflag	!by 0
cflag	!by 0
sek	!by 1
gadoffs	!by 3,7,11,15,19
dpiflag	!by 1
colcnt	!by 0
ptoffs	!by 6,13,20
hpoffs	!by 20,41,62
hpplns	!by 1,4
options	!by 47
colorfl	!by 3
hpflag	!by 1
passes	!by 1,0,4,3
passtext	!scr "   4   2   1slow"
shingfl	!by 1
rasfl	!by 1
pixfl	!by 0
pixmx	!by 7
pixx	!wo (tinyx),(normx),(lrgex)
pixy	!wo (tinyy),(normy),(lrgey)
ptext	!scr "Centron"
	!scr " Wiesem"
	!scr " Merlin"
dpitext	!scr "tinynormlrge"
hptext	!scr "     Black&White     "
	!scr "        Color        "
rastext	!scr "OrderedPattern"

tinyy	!by $00,$b4,$02,$d0,$04,$ec,$07,$08,$09,$24,$0b,$40,$0d,$5c
tinyx	!by 6,26,46,33
normy	!by $01,$0e,$04,$92,$08,$16,$0b,$9a
normx	!by 7,45,24
lrgey	!by $00,$b4,$05,$cd,$0a,$e6
lrgex	!by 25,15

offs	!by $00,$10,$20,$30
	!by $00,$10,$20,$30

dlo	!by <(dithrst)
	!by <(dithpat)

dhi	!by >(dithrst)
	!by >(dithpat)

dmode	!wo 0

; ------------------------------------ Activity

adinc	dec adcnt
	bne adskip
	inc $d005
	inc $d007
	lda #5
	sta adcnt
adskip	rts

; ------------------------------------ Initialize Activity Bar

initad	sta adcnt
	ldy #63
	lda #0
adl0	sta $3fc0,y
	dey
	bpl adl0
	sty $3fc0
	sty $3fc1
	sty $3fc2
	lda #15
	sta $d029
	sta $d02a
	lda $d01d
	ora #12
	sta $d01d
	lda $d010
	ora #12
	sta $d010
	lda #8
	sta $d004
	lda #32
	sta $d006

	lda #146
	sta $d005
	sta $d007
	sty $07fa
	sty $07fb
	lda $d015
	ora #12
	sta $d015
	rts

; ------------------------------------ Switch off Activity Bar

clearad	lda #3
	sta $d015
	lda $d010
	and #$f3
	sta $d010
	rts

; ------------------------------------ Start Printout

initprt	lda #4		; OPEN 4,sek
	tax
	ldy sek
	jsr filpar
	ldy #0
	sty $b7
	jsr copen
	ldx #4		; for output
	jsr ckout
	lda status	; ok?
	bne enderr
	ldx #0		; yes, send Initialize Graphics
ini0	lda initp,x
	jsr bsout
	inx
	cpx options
	bne ini0
	lda status	; ok?
enderr	rts

; ------------------------------------ Close Printer Connection

endoff	ldx #0
off0	lda endsequ,x	; send Stop Printer
	jsr bsout
	inx
	cpx #3
	bne off0
	rts

; ------------------------------------ Canon Native Mode Printer Commands

endsequ	!by $0c,$1b,$40

initp	!by $1b,$5b,$4b,$02,$00,$00,$0f
	!by $1b,$28,$61,$01,$00,$00,$1b,$28,$67,$03,$00,$75
capx	!by $07,$50,$1b,$28,$62,$01,$00,$00
	!by $1b,$28,$63,$01,$00
qual	!by $00
	!by $1b,$28,$64,$02,$00,$01,$68,$1b,$28,$65,$02,$00
capy	!by $01,$0e
trans	!by $1b,$28,$41
transw	!by $50,$00
trcolor	!by $4b
nxcol	!by $1b,$28,$65,$02,$00,$00
trans0	!by $00

dpi	!by 0
planes	!by 0

; ------------------------------------ Initialize Parallel Connection

initpar	ldx $0326		; save C64 system vectors; bsout
	ldy $0327
	stx oldbsout
	sty oldbsout+1
	ldx #<(nbsout)	; set new bsout
	ldy #>(nbsout)
	stx $0326
	sty $0327
	ldx $0320		; save ckout
	ldy $0321
	stx oldchkout
	sty oldchkout+1
	ldx #<(nchkout)	; set new ckout
	ldy #>(nchkout)
	stx $0320
	sty $0321
	clc
	rts

; ------------------------------------ Parallel Byte out 

nbsout	pha		; bsout, .a retten
	sta outmerk
	lda geraet	; welches Gerät?
	cmp #4
	beq parprint
	jmp $f1cd

; ------------------------------------ Parallel Print

parprint	sei
	txa		; .x und .y retten
	pha
	tya
	pha
	lda #$ff		; $dd01: Ausgang
	tax
	tay
	sta $dd03
	lda $dd02		; Bit 2 von $dd00 auf Ausgang
	ora #4
	sta $dd02
	lda $dd00		; setzen
	ora #4
	sta $dd00
	lda #$10		; _FLAG_ setzen
	sta $dd0d
	lda $dd0d
	cli

	lda outmerk	; Byte für die Ausgabe auf den Drucker
	sta $dd01		; setzen

	lda $dd00		; Handshake
	and #$fb
	sta $dd00		; STROBE
	ora #4
	sta $dd00
busy	lda $dd0d
	dex
	bne bsy0
	dey
	beq timeout
bsy0	and #$10		; warten auf BUSY
	beq busy

bsy1	lda #0		; dann weiter
	sta status
	pla		
	tay		; .y, .x und .a rekonstruieren
	pla
	tax
	pla
	clc
parend	rts

; ------------------------------------ Parallel Timeout

timeout	ldx #<(parend)	; nbsout zeigt nach Timeout auf RTS
	ldy #>(parend)
	stx $0326
	sty $0327
	bne bsy1		; Abschluss

; ------------------------------------ ckout für Centronics

nchkout	jsr $f30f		; logische Filenummer suchen
	beq ffound
	jmp $f701		; fail: "33, file not open"
ffound	jsr $f31f		; setlfs
	lda $ba		; Gerätenummer 4?
	cmp #4
	beq parout
	jmp $f25b		; nein: standard procedure

parout	jmp $f275		; Gerätenummer in $9a (geraet) eintragen

; ------------------------------------ 

outmerk	!by 0
oldbsout	!wo 0
oldchkout	!wo 0

; ------------------------------------ Druckvorbereitung

setvecs	pha		; .a=Größe
	asl
	tax
	lda bufs,x	; Puffer entsprechend
	sta kbuf
	lda bufs+1,x
	sta kbuf+1
	ldy #0
svc0	lda (kbuf),y
	sta cbuf,y
	iny
	cpy #6
	bne svc0
	lda #<(basebuf)	; Zeiger auf Puffer setzen
	ldy #>(basebuf)
	sta kbuf
	sty kbuf+1
	pla		; Vergrößerungsfaktor setzen
	tax
	lda faktor,x
	sta fullbyte
	sta vertfak
	lsr
	sta horifak
	lda counters,x	; Druckerkommandos anpassen
	sta oneline
	sta transw
	inc transw
	rts

; ------------------------------------ Data

bufs	!wo (b0640),(b1280),(b1920)

b0640	!wo basebuf+80,basebuf+160,basebuf+240
b1280	!wo basebuf+160,basebuf+320,basebuf+480
b1920	!wo basebuf+240,basebuf+480,basebuf+720
faktor	!by 2,4,6
counters	!by 80,160,240
trwtext	!by $30,$38,$30,$31,$36,$30,$32,$34,$30

pixoffsy	!by 1,1,1,3,3,3,5,5,5,7,7,7,9,9,9,11,11,11,13,13,13
pixoffsy2	!by 1,1,3,3,5,5,7,7
pixoffsy3	!by 1,3,5
pixoffsx	!by 0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2
pixoffsx2	!by 0,1,0,1,0,1,0,1


; ------------------------------------ CMY Table

black	!by 15,00,00,09,00,00,00,05,00,00,00,01,00,00,00,00
cyan	!by 15,08,01,09,00,01,00,05,03,00,06,01,02,00,02,00
magenta	!by 15,06,08,09,06,06,03,05,01,02,00,01,00,00,00,00
yellow	!by 15,00,11,09,06,00,08,05,00,02,06,01,00,06,02,00

; ------------------------------------ 

modend	!eof
