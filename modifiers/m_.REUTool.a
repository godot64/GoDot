
	!src "godotlib.lib"
	*= $c000
	!ct pet

; ------------------------------------------------------------ 
;
; mod..REUTool
; tool to get information about the status of your REU content,
;   especially about UNDO and TEMP.
;   Main scope of REUTool is to install modules at runtime.
;
;    1.01, 08.04.01, Bugfix
;    1.02, 09.04.01, REUSIZE gets set automatically
;    1.03, 02.07.17, added: delete entries from REU directory
;    1.04, 20.07.19, bugfixes: care for SuperCPU RAM
;    1.05, 26.04.20, bugfix: correct recognition of extended REUs
;    1.06, 28.04.20, bugfix: include real REUs, too
;    1.07, 26.10.20, slight GUI changes
;    2.00, 04.11.20, added: install of dev.REU at runtime
;
; ------------------------------------------------------------ 

; ----------------------------------------- Equates

	info		= $30	; /$31,$32
	tentry		= $33
	nextentry		= $34
	oflo		= $35
	ofhi		= $36
	rmbk		= $37	; don't use $38!
	entry		= $3a	; /$3b (is dev.REU vector!)
	bank0val		= $3d
	banknval		= $3e
	bankcval		= $3f
	curbank		= $40
	

	status		= $90
	swappfox		= $1714	; swap slots of 4KB
	func3		= $186f	; !! self modifying the kernel !!
	ramtype		= $1d8f	; ### 1.04

	devarea		= $2000	; initialisation area for devices
	mtarget		= $3000	; load space for devices
	rdinit		= devarea+$0a64	; position of dev.REU in devarea
	mal19		= $bd8c	; part of dev.REU
	back		= $befd	; part of dev.REU
	dirblock		= $bf00	; directory block
	modul		= $c000
	ramdevice		= $ca64	; start address of dev.REU
	ramstart		= $cab0	; header address of dev.REU
	kapaz		= $cde7	; !! self modifying dev.REU !!
	sprite		= $d015

; ----------------------------------------------- Header

	jmp start
	!by $20
	!by $00,$01
	!wo modend
	!by $00,$00
	!pet "Tool for REUs   "
	!pet "2.00"
	!pet "04.11.20"
	!pet "A.Dettke        "

; ----------------------------------------------- Main 

start	ldx sc_screenvek	; rette Main-Screenlist
	ldy sc_screenvek+1
	stx list
	sty list+1
	jsr makech	; erzeuge Kringel-Char
	jsr ramcheck	; welche RAMs sind angeschlossen?
	jsr newsize	; ermittele REU-Größe
	lda rm_nextram
	sta nextentry
	jsr reustat	; berechne verfügbaren Space
	jsr setram	; Anzeige des RAM-Typen vorbereiten

	ldx #<reulst	; Requester ausgeben
	ldy #>reulst
	jsr gd_screen
	ldx sc_screenvek	; und sich dies merken
	ldy sc_screenvek+1
	stx last
	sty last+1
	jsr gd_eloop	; warten

; ----------------------------------------------- Event: Cancel 

evcan	sec		; Modul verlassen
	rts

; ----------------------------------------------- Check Temp/Undo status

stats	lda rm_ramundo	; welche gibt's und wie viele?
	pha
	and #1		; Undo 4Bit
	beq st1
	ldx #2
	!by $2c
st1	ldx #5
	ldy #2
st2	lda yesno,x
	sta un4tx,y
	dex
	dey
	bpl st2
	pla
	and #2		; Undo Rendered
	beq st3
	ldx #2
	!by $2c
st3	ldx #5
	ldy #2
st4	lda yesno,x
	sta unrtx,y
	dex
	dey
	bpl st4
	lda rm_tmpsaved	; Temp
	beq st5
	cmp #3
	bne st6
	lda #2
	!by $2c
st6	lda #1
st5	ora #$30
	sta numttx+1
	rts

; ----------------------------------------------- 

setram	ldx ramflag	; get RAM type value (0-11)
	cpx #11		; ### 1.04/1.06 --
	bne +
	lda ramtype+12	; get amount
	sta scpumem+1
	lda ramtype+13
	sta scpumem+2	; ### bis hier --

	lda #3		; ### 1.08 -- allow DEV
	!by $2c
+	lda #2
	sta choomax	; ### --

	inx
	lda ramind,x	; write text to gadget
	tax
sr0	ldy #3
sr1	lda mega,x	; Anzeigetexte für RAM-Größe
	sta megatx,y
	dex
	dey
	bpl sr1
	rts

; ----------------------------------------------- Kringel

makech	ldx #7
mc0	lda char,x
	sta sc_undochar,x
	dex
	bpl mc0
ok	clc
	rts

; ----------------------------------------------- Check for REU

isreu	ldx ramflag	; Ergebnis des RAM-Check holen
	bmi ok2		; kein extra RAM? dann aussteigen
	cpx #4		; mindestens 128 K?
	bcs ok1
ok2	pla		; nein, aussteigen
	pla
ok1	cpx #11		; ### 1.04 (SuperCPU?)
	rts

; ----------------------------------------------- Event: Install module to REU

evinst	jsr isreu		; Check RAM, kehrt bei fail nicht zurück
	beq supercpu	; if SuperRAM, ### 1.04, load differently ### 1.08

ei1	jsr chgdrv	; is REU: care for bootdrive
	jsr swapmt	; save $2000 to REU Swapfile...

	lda gd_modswitch
	pha

	ldx #<devarea	; target: devarea
	ldy #>devarea
	stx ls_adrmisc
	sty ls_adrmisc+1
	jsr loadrequ	; filerequester for LDR, SVR, MOD
	beq ei0		; if no file selected, leave

	jsr gd_testram	; REU selected?
	beq fail		; no, error and leave
	jsr readfile	; yes, get file to $2000...
	jsr setfile	; ...and transfer to REU

ei0	pla
	sta gd_modswitch

	jsr swapmt	; restore $3000
	jsr reustat	; recalculate status values
	jsr chgdrv	; care for system drive

	ldx list		; create main screen
	ldy list+1
	jsr gd_screen
show	ldx last		; then overlay REUTool Requester
	ldy last+1
	jsr gd_screen
	clc
	rts

; ----------------------------------------------- 

supercpu	lda gd_modswitch
	pha

	ldx chosen	; did you want to load a DEV file at all?
	cpx #3		; (you are on a SuperCPU)
	beq +

	lda rm_reusize
	cmp #7
	beq fail2

	jmp ei1		; no, load the other ones

+	jsr chgdrv
	ldx #<mtarget	; to $3000
	ldy #>mtarget
	stx ls_adrmisc
	sty ls_adrmisc+1
	jsr loadrequ	; Filerequester for DEVs
	beq +		; if no file selected, leave

	jsr initdev1	; init device area ($2000)
	jsr readfile	; and get file...
	jsr initdev2
	jsr setdevice

+	jsr chgdrv
	lda #$ff
	sta gr_redisp	; since display is distorted: set flag

	pla
	sta gd_modswitch

	jmp show		; leave

; ----------------------------------------------- Fehler

fail2	ldx #32		; = no dev.SCPU available
	!by $2c
fail	ldx #0		; = can't clone
	ldy #0
fl0	lda err1,x
	sta message,y
	inx
	iny
	cpy #32
	bne fl0
	jsr gaugeout
	jsr gd_clrms
	ldx #<message
	ldy #>message
	jsr gd_xtxout2
	jsr wait

	jmp ei0

; ----------------------------------------------- 

initdev1	ldx #16		; Area löschen (mit $c0)
	ldy #0
	sty sc_merk
	lda #>devarea
	sta sc_merk+1
	lda #$c0
ln1	sta (sc_merk),y
	iny
	bne ln1
	inc sc_merk+1
	dex
	bne ln1
			; und Basis-Entrys eintragen:
	ldx #(reulst-rentries-1)
-	lda rentries,x
	sta devarea,x
	dex
	bpl -
	rts

initdev2	ldy #0
	sty sc_merk	; from $3000...
	lda #>mtarget
	sta sc_merk+1
	lda #<rdinit	; ...to $2a64
	sta ls_adrmisc
	lda #>rdinit
	sta ls_adrmisc+1
-	lda (sc_merk),y
	sta (ls_adrmisc),y
	iny
	bne -
	inc ls_adrmisc+1
	inc sc_merk+1
	lda ls_adrmisc+1
	cmp #>mtarget
	bcc -
	rts

; ----------------------------------------------- GoDot: Load Misc

lddir	lda #<chootype	; Kürzel angeben
	pha
	lda #>chootype
	pha
	lda #8
	jmp gd_xloadm	; Filrequester

; ----------------------------------------------- 

loadrequ	lda #$f5		; patch vector to function ForceOff
	sta func3+1	; (now init ls_flen to 0 instead)
	lda #$18
	sta func3+2
	jsr lddir		; open file requester
	jsr gd_eloop	; wait for events
	lda #<rm_ramvec	; then unpatch vector
	sta func3+1
	lda #>rm_ramvec
	sta func3+2
	lda ls_flen	; any file selected now?
	sta rm_rlen
	rts

; ----------------------------------------------- Load File

readfile	jsr gd_sproff	; load file to buffer
	sta success	; .a=0
	jsr gd_xopen
	jsr onebyte	; skip start address
	bne lderr
	jsr onebyte
	bne lderr
ld7	lda status	; get file...
	sta success
	bne lderr
	jsr basin
	sta (sc_vekt20),y	; ...to mtarget/devarea
	iny
	bne ld7
	inc sc_vekt20+1
	bne ld7
lderr	jsr gd_xclose
	jsr gd_xmess
	jsr gd_spron	; Maus wieder an
	sec
	rts

; ----------------------------------------------- 

setfile	lda success	; transfer file to REU: status?
	beq nofile	; no file, so leave
	and #$40		; no EOF, leave
	beq nofile

	lda devarea+3	; no, recognize module type (LDR, SVR, MOD)
	pha
	ldx #(setdevice-msf-1); install swap routine to global area...
sf0	lda msf,x
	sta dirblock,x
	dex
	bpl sf0
	jmp dirblock	; ...and execute:

msf	lda #>devarea	; swap $2000 and $c000
	ldx #>modul	; (now loaded file at $c000)
	jsr swappfox
	jsr gd_swapd	; swap $c000 and reu device
	pla		; re-get module type
	tay
	ldx #6		; execute function #6: Install to REU
	jsr rm_ramvec
	lda #>devarea	; swap $c000 and $2000
	ldx #>modul
	jsr swappfox
nofile	sec		; transfer complete
	rts

; ----------------------------------------------- 

setdevice	lda rdinit+79	; yes, try to install dev.REU:
	cmp #$10		; is it a DEV?	 ### 1.08
	bne +		; no, leave

	lda #$4c		; Einsprung ins dev.REU aktivieren
	sta rm_ramvec
	lda #<ramstart
	sta rm_ramvec+1
	ldx #(wait-msd-1)	; Initroutine auslagern...
sd0	lda msd,x
	sta dirblock,x
	dex
	bpl sd0
	jmp dirblock	; ...und ausführen

msd	ldx #3		; neue RAM-Größe ermitteln
	stx ramflag
	jsr tr3
	jsr setram	; und eintragen

	lda #>devarea	; Swap routine: swap $2000 and $c000
	ldx #>modul
	jsr swappfox
	ldx #10		; First Init
	jsr rm_ramvec
	jsr gd_swapd	; write device into REU
	lda #>devarea	; restore $c000 from $2000
	ldx #>modul	; (leaves garbage at $2000: SWPFILE)
	jsr swappfox

	lda #5		; ersten freien Dir-Eintrag ansteuern
	sta rm_nextram
	lda ramflag	; und REU bekannt machen
	ora #$20
	sta ls_ramdrive
	lda #12
	sta ls_bootdrive	; fertig, Device installiert

+	sec
	rts

; ----------------------------------------- Wait for Clicks

wait	lda #0
	sta sc_stop
	sta sc_keyprs
waiton	lda joy		; wait for click or STOP
	eor #$ff
	and #$10
	ora sc_keyprs
	ora sc_stop
	beq waiton
	rts

; ----------------------------------------------- 

chgdrv	ldx ls_bootdrive
	lda ls_sysdrive
	sta ls_bootdrive
	stx ls_sysdrive
	rts

; ----------------------------------------------- 

onebyte	jsr basin
	ldy #0
	ldx status
	rts

; ----------------------------------------------- Swap 

swapmt	ldx #6		; Swapwerte retten
sw0	lda rm_swapw,x
	sta swold,x
	lda swmt,x
	sta rm_swapw,x
	dex
	bpl sw0
	jsr gd_swapd	; ausführen (4096 Bytes nach Swapfile)
	ldx #6		; Swapwerte rekonstruieren
sw1	lda swold,x
	sta rm_swapw,x
	dex
	bpl sw1
	rts

; ----------------------------------------------- Byte to Hexdigits

mhex	tay		; Eingang: .a
	and #15
	tax
	lda hex,x
	pha
	tya
	lsr
	lsr
	lsr
	lsr
	tax
	lda hex,x
	tay		; zurück in .a und .y
	pla
	rts

; ----------------------------------------------- 

gstat	jsr gd_swapd	; get offsets for next mod entry
	lda modul+1
	sta oflo		; low
	lda modul+2
	sta ofhi		; high
	lda modul+3
	sta rmbk		; bank
	jmp gd_swapd

; ----------------------------------------------- Calculate AVAIL

reustat	jsr isreu
	bne +		; ### 1.04
	rts

+	ldx #(reustat-gstat-1)	; auslagern (1st pt)
rs1	lda gstat,x
	sta sy_global,x
	dex
	bpl rs1
	jsr sy_global	; execute 

	lda rmbk		; bank of next entry
	jsr mhex
	sta banktx+2	; publish
	tya
	sta banktx+1
	lda oflo		; offset
	jsr mhex
	sta offstx+3	; publish
	tya
	sta offstx+2
	lda ofhi
	jsr mhex
	sta offstx+1
	tya
	sta offstx

	ldx #(newsize-rs4-1)	; auslagern (2nd pt)
rs3	lda rs4,x
	sta sy_global,x
	dex
	bpl rs3
	jmp sy_global	; execute

rs4	jsr gd_swapd
	lda #0
	tay
	ldx #7		; execute function #7: Avail
	jsr rm_ramvec
	jsr gd_swapd
	lda back		; publish values
	jsr mhex
	sta availtx+5
	tya
	sta availtx+4
	lda back+1
	jsr mhex
	sta availtx+3
	tya
	sta availtx+2
	lda back+2
	jsr mhex
	sta availtx+1
	tya
	sta availtx
	rts

; ----------------------------------------------- Check for more RAM

newsize	jsr isreu		; Check RAM, kehrt bei fail nicht zurück
	bne tr7		; ### 1.04/1.05, returns RAMFLAG in .x
	rts

tr3	lda banks,x	; check if more RAM available: next bank
	sta curbank
	sta werte0+4
	ldy #$91		; FETCH 2nd byte from next bank to MERK
	jsr setreu0
	lda sc_merk	; save result 
	sta sc_merk+1

	inc sc_merk	; change value
	lda sc_merk
	sta banknval
	jsr stashit	; STASH different byte back to REU, same location
	inx		; .x=0:
	stx werte0+4	; from bank 0:
	ldy #$91		; FETCH very 1st retrieved byte again
	jsr setreu0
	lda sc_merk	; save result
	sta bankcval

	lda curbank	; repair new bank
	sta werte0+4
	lda sc_merk+1
	jsr stashit
	inx
	stx werte0+4
	lda bank0val	; repair bank 0 (probably necessary)
	jsr stashit

	ldx ramflag	; (get current size)
	lda sc_merk+1
	cmp #$ff		; is bank byte from emulator?
	beq tr8
	lda bankcval	; compare retrieved byte values
	eor banknval	; equal? (they shouldn't!)
	beq tr8		; yes, no more RAM: finished

	inc ramflag	; more RAM, increase flag
tr4	ldx ramflag	; check for limits
	cpx #11		; reached?
	bcc tr3

tr5	dex
	dec ramflag
tr8	stx rm_reusize	; set bank value
	jmp setsize		

tr7	lda #0
	sta werte0+4
	ldy #$91		; FETCH 2nd byte from bank 0 to bank0val
	jsr setreu0
	lda sc_merk
	sta bank0val
	jmp tr4		; continue w/ scan

stashit	sta sc_merk
	ldy #$90
	jmp setreu0

; ----------------------------------------------- Set REU Record

setreu0	ldx #8
tr6	lda werte0,x
	sta reubase+2,x
	dex
	bpl tr6
	sty reucom
-	rts

; ----------------------------------------------- publish size of RAM

setsize	jsr isreu		; Check RAM, kehrt bei fail nicht zurück
	beq -		; ### 1.04
	ldx ramflag	; get RAM size value
	lda banks,x	; get # of banks available
	pha
	ldx #(evchdel-ss0-1); transfer routine to Global...
ss0	lda ss1,x
	sta sy_global,x
	dex
	bpl ss0
	jmp sy_global	; ...and execute...

ss1	jsr gd_swapd	; ...here: switch dev.REU on
	lda ls_ramdrive	; type of RAM?
	and #15
	sta sc_merk	; times 3
	asl
	clc
	adc sc_merk
	tax		; as an index into capacity table
	pla		; write # of banks
	sta kapaz,x	; into table
	jmp gd_swapd	; switch off dev.REU

; ----------------------------------------------- Event: Choose what to Delete

evchdel	ldx delwhat	; $ff = last
	inx		; $00 = all
	beq +
	ldx #$ff
+	stx delwhat
	bmi +
	ldy #7
	!by $2c
+	ldy #3
	ldx #3
-	lda delete,y
	sta deltx,x
	dex
	dey
	bpl -
	ldy #4
	jmp evc3

; ----------------------------------------------- Event: Delete 

evdelete	ldx delwhat
	beq +
	jsr dellast	; delete last entry
	inx
	beq ++
+	jsr delall	; delete all entries
++	ldx nextentry
	stx rm_nextram	; adjust device system 
	jsr reustat	; recalculate
	jmp show		; and display

; ----------------------------------------------- Delete All

delall	jsr setnext	; nächsten Eintrag anpeilen
	ldx #5		; bis zum fünften löschen
	bne del0

; ----------------------------------------------- Delete Last

dellast	jsr setnext	; nächsten Eintrag anpeilen
del0	stx tentry	; und setzen
	jsr isreu		; ### 1.04
	beq +
	ldx tentry
	cpx #5		; letztmöglicher Eintrag erreicht?
	bcs rd6
	inc nextentry	; ja, anpassen
+	rts

setnext	ldx rm_nextram	; lowest possible entry?
	cpx #5
	bne +
	pla		; yes, leave
	pla
	rts
+	dex		; no, process delete
	stx nextentry	; next entry to delete
	rts

rd6	ldx #64		; sonst: transfer routine to Global...
rd2	lda rest0,x
	sta sy_global,x
	dex
	bpl rd2
	jmp sy_global	; ...and execute...

rest0	jsr gd_swapd	; ...from here: switch dev.REU on
	ldx #10		; function #10: FirstInit
	jsr rm_ramvec

rd1	ldx #0
rd5	lda nextentry	; calculate dir-position of next entry
	jsr mal19
	ldy #2
rd4	lda (entry),y	; get entry info
	sta info,y
	dey
	bpl rd4
	ldy #18
	lda #$c0		; delete entry completely
rd7	sta (entry),y
	dey
	bpl rd7
	lda info		; set corrected info to RM.Handler
	and #15
	sta modul+3
	lda info+1
	sta modul+1
	lda info+2
	sta modul+2

	dec nextentry	; select next entry before this one
	lda nextentry
	cmp tentry	; all deleted?
	bcs rd1		; no, loop
	inc nextentry	; adjust for next pass
	jmp gd_swapd	; yes, switch off dev.REU

; ----------------------------------------------- Check RAM types

ramcheck	jsr stats		; set status of Undo and Temp
	lda ls_ramdrive	; which RAM?
	and #15
	sta thisram	; store it
	tax
	lda #0		; default RAM flag value=0

	cpx #2		; VDC?
	bne rc00
	lda rm_vdcflag	; which VDC?
	bmi rc02
	lda #0		; eq 16K
	!by $2c
rc02	lda #2		; eq 64K

rc00	cpx #3		; Pagefox?
	bne rc01
	lda #1

rc01	cpx #9		; no extra RAM?
	bne rc0
	lda #$ff		; eq 0KB

rc0	cpx #8		; REU 1700?
	bne rc1
	lda #3		; eq 128K
rc1	cpx #4		; REU 1764?
	bne rc2
	lda #4		; eq 256K
rc2	cpx #5		; REU 1750?
	bne rc3
	lda #5		; eq 512K

rc3	cpx #7		; is SuperCPU? ### 1.04
	bne rc4
	lda #11		; yes, set flg ### 1.06

rc4	sta ramflag	; no, store to RAM flag
	rts

; ----------------------------------------------- Event: Choose type of module to install

evchoose	ldx chosen
	cpx choomax
	bcc evc1
	ldx #$ff
evc1	inx
	stx chosen
	lda choind,x
	tax
	ldy #2
evc2	lda choose,x
	sta choosetx,y
	sta chootype,y
	dex
	dey
	bpl evc2
	ldy #0
evc3	jsr settab
	jsr gettab
	ldy #6
	jmp gd_xtxout1	; returns .c=0

; ----------------------------------------------- 

tabigad	!wo choosegad,ramgad,delgad

settab	lda #<tabigad
	sta sc_texttab
	lda #>tabigad
	sta sc_texttab+1
	rts

gettab	lda (sc_texttab),y
	sta sc_screentab
	iny
	lda (sc_texttab),y
	sta sc_screentab+1
	lda #0
	tax
	tay
gt0	jsr gd_setpos
	cpx #3
	bne gt0
	stx sc_ho
	jsr gd_trim
	jmp gd_initmove

; ----------------------------------------- Gauge 

gaugeout	lda sc_screenvek	; show "requester"
	pha
	lda sc_screenvek+1
	pha
	ldx #<gaugelst
	ldy #>gaugelst
	jsr gd_screen
	pla
	sta sc_screenvek+1
	pla
	sta sc_screenvek
	rts

; ----------------------------------------- Screenlist for Gauge

gaugelst	!by 0,22,3,34,3,$02
	!wo 0
	!by $80

; ----------------------------------------------- 

char	!by $00,$3a,$46,$4e,$40,$40,$3c,$00
delete	!scr "last all"

mega	!scr "  0K"		; 0 no RAM
	!scr " 16K"		; 1 VDC 1
	!scr " 32K"		; 2 Pagefox
	!scr " 64K"		; 3 VDC 2
	!scr "128K"		; 4 REU 1700
	!scr "256K"		; 5 REU 1764
	!scr "512K"		; 6 REU 1700
	!scr "  1M"		; 7
	!scr "  2M"		; 8
	!scr "  4M"		; 9
	!scr "  8M"		; 10

scpumem	!scr " 16M"		; 11 (SuperCPU)

yesno	!scr "yes no"
choose	!scr "LDRSVRMODDEV"
choind	!by 2,5,8,11
chosen	!by 0
choomax	!by 2
chootype	!tx "ldr.*",0
thisram	!by 0
delwhat	!by $ff
banks	!by 0,0,0,2,4,8,16,32,64,128,246,0
ramflag	!by $ff
ramind	!by 3,7,11,15,19,23,27,31,35,39,43,47,47
list	!wo 0
last	!wo 0
success	!by 0
swmt	!by $00,>devarea,$1c,$b2,$00,$00,$10	; ### jetzt: 4096 Bytes
swold	!by 0,0,0,0,0,0,0
hex	!tx "0123456789abcdef"

werte0	!by sc_merk,0, 1,0,0, 1,0,  $1f,0
;	   | c64      | REU  |bytes|

err1	!scr "       Can't clone Files.       "
	!scr "        No dev.SCPU yet.        "	; ### 1.04
message	!fill 32,32
	!by 0

; --------------------------------------- Default RAM Entries

rentries	!byte 0			; REU-Flag ($00)
	!byte $1c,$c2,$00		; entry 0: 
	!pet "RM.Handler    "	;    RAM-Handler-Header
bbu	!byte 32			;    (darin: Anim-Counter und REUClear-Flag bbu)
	!byte 0,$00,$10		; entry 1:
	!pet "Undo 4Bit       "	;    Undo 4Bit
	!byte 0,$00,$8d		; entry 2:
	!pet "Undo Rendered   "	;    Undo Rendered
	!byte $f0,$1c,$b2		; entry 3:
	!pet "swp.file        "	;    Swapfile
	!byte $07,0,$83		; 
	!pet "temp00          "	; entry 4:
				;    Temp (so, first user entry: 5)

; ----------------------------------------------- 

reulst	!by 0
	!by 1,11,18,23,$81,0,0
	!scr "REU Tool@"
	!by 3,12,16,12,$b0,0,0
	!scr "Status@"
	!by 15,12,9,3,$c0
	!wo evdelete
	!scr "Delete!@"
delgad	!by 15,21,7,3,$c0
	!wo evchdel
	!by 223				; List-Kringel
deltx	!scr"last@"
	!by 18,12,9,3,$c0
	!wo evinst
	!scr "Install@"
choosegad	!by 18,21,7,3,$c0
	!wo evchoose
	!by 223,32
choosetx	!scr "LDR@"
ramgad	!by 21,12,7,3,$8c,0,0
megatx	!scr "  0KB@"
	!by 21,19,9,3,$cc
	!wo evcan
	!scr " Leave@"

	!by $c0,5,12,14
	!scr "Bank  :    "
banktx	!scr "$00@"
	!by $c0,6,12,14
	!scr "Offset:  $"
offstx	!scr "0000@"
	!by $c0,7,12,14
	!scr "Avail :$"
availtx	!scr "000000@"
	!by $c0,9,12,14
	!scr "Undo 4Bit :"
un4tx	!scr " no@"
	!by $c0,10,12,14
	!scr "Undo Rend :"
unrtx	!scr " no@"
	!by $c0,12,12,14
	!scr "# of Temps: "
numttx	!scr " 0@"
	!by $80

; ----------------------------------------------- 

modend	!eof
