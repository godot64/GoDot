	!src "godotlib.lib"
	*=$c000
	!ct pet
;	!sl "labels.txt"

; ------------------------------------------------ 
;
; GoDot Convolution Filters
; -> 18 convolution modifiers in one module
;
; 1.00, 21.08.18, first release
; 1.01, 04.02.21, replaced RemIsoPixels by Negative
; 1.02, 09.02.21, bugfix, could hang on Preview
; 1.03, 02.03.21, bugfix, didn't leave when it should leave
; 1.04, 12.07.21, added hilite of gadgets
;                 bugfix, doesn't crash anymore on Preview if launched from REU
;
; ------------------------------------------------ 

; ------------------------------------------------ Declarations

	lcnt		= $30
	adcnt		= $31
	dst		= $35
	src		= $37
	tcnt		= $3a
	bbuf		= $3b
	event		= $3c	; /$3d
	mrkx		= $3e
	mrky		= $3f
	finish		= $40	; /$41
	mrka		= $42

	bbase		= $2002
	buf_o 		= bbase
	buf_m 		= buf_o+324
	buf_u 		= buf_m+324
	buf_r 		= buf_u+324

	sprptr		= $07f8
	wbuf		= sy_global
	spr255		= $3fc0

	spr2x		= $d004
	spr2y		= $d005
	msbx		= $d010
	spren		= $d015
	sprxe		= $d01d
	border		= $d020
	sprcol2		= $d029

	oszi3		= $d40e
	wave		= $d412
	filter		= $d418
	rausch		= $d41b

; -------------------------------------------------------------- Header

	jmp start

	!by $20		; Modifier
	!by 0
	!by 0
	!wo modend
	!wo 0
	!pet "Convolve Filters"
	!pet "1.04"
	!pet "12.07.21"
	!pet "A.Dettke (+WK)  "

; ------------------------------------------------ Main

start	jsr makechr
	ldx mode
	jsr ed4
	ldx #<filtlist
	ldy #>filtlist
	jsr gd_screen
	jsr colrize
	jmp gd_eloop

; ------------------------------------------------ Puffer umlagern

umlagern	ldy #0		; von unten nach oben schieben
- 	lda buf_m-2,y
	sta buf_o-2,y
	lda buf_m+160,y
	sta buf_o+160,y
	lda buf_u-2,y
	sta buf_m-2,y
	lda buf_u+160,y
	sta buf_m+160,y
	iny 
	cpy #163
	bne -
	rts 

; ------------------------------------------------ Puffer füllen

puffern	lda lcnt		; aktuelle Rasterzeile (rz)
	pha 
	lsr		; durch 8
	lsr
	lsr
	tax 
	pla 
	and #$07		; (rz and 7) * 4
	asl
	asl
	sta src		; nach Quelle
	lda hi_rows,x
	sta src+1
	lda #<buf_u	; Ziel
	ldx #>buf_u
	sta dst
	stx dst+1

	ldx #0
	lda #40		; 40 Bytes in Einzelpixel wandeln
	sta tcnt

--	ldy #0
-	lda (src),y	; Pixel links
	pha 
	lsr
	lsr
	lsr
	lsr
	sta (dst,x)	; puffern
	inc dst
	bne +
	inc dst+1
+	pla 		; Pixel rechts
	and #$0f
	sta (dst,x)	; puffern
	inc dst
	bne +
	inc dst+1
+	iny 
	cpy #4		; 4mal (eine Kachel)
	bne -

	lda src		; nächste Kachel
	clc 
	adc #32
	sta src
	bcc +
	inc src+1
+	dec tcnt		; 40 mal
	bne --

	lda buf_u		; die ersten beiden werte davor (definierter rand)
	sta buf_u-1
	sta buf_u-2
	lda buf_u+319	; der letzte zweimal dahinter
	sta buf_u+320
	sta buf_u+321
	rts 

; ------------------------------------------------ Ergebnis nach 4Bit

w_ergeb	lda lcnt
	pha 
	lsr
	lsr
	lsr
	tax 
	pla 
	and #$07
	asl
	asl
	sta src		; Ziel: 4Bit
	lda hi_rows,x
	sta src+1
	lda #<buf_r	; Quelle: Result Buffer
	ldx #>buf_r
	sta dst
	stx dst+1

	ldx #0		; wie oben
	lda #40
	sta tcnt
--	ldy #0
-	lda (dst,x)	; Pixel wieder zusammenführen
	asl
	asl
	asl
	asl
	inc dst
	bne +
	inc dst+1
+	ora (dst,x)
	inc dst
	bne +
	inc dst+1
+	sta (src),y	; und speichern
	iny 
	cpy #4
	bne -

	lda src
	clc 
	adc #32
	sta src
	bcc +
	inc src+1
+	dec tcnt
	bne --
	rts 

; -------------------------------------------------------------- 
; --- 4bit-high-adressen der kachelzeilen

hi_rows 
	!by $40, $45, $4a, $4f, $54, $59, $5e, $63
	!by $68, $6d, $72, $77, $7c, $81, $86, $8b
	!by $90, $95, $9a, $9f, $a4, $a9, $ae, $b3, $b8 

; ------------------------------------------------ Table of Gadgets (Hilite)

tabofgads	!by 5,3,7,1	; 3  blurgad
	!by 8,3,7,1	; 7  gaussgad
	!by 11,3,7,1	; 11 watrgad
	!by 14,3,7,1	; 15 embossgad
	!by 17,3,7,1	; 19 deepprgad
	!by 20,3,7,1	; 23 xhatchgad
	!by 5,12,7,1	; 27 randomgad
	!by 8,12,7,1	; 31 smeargad
	!by 11,12,7,1	; 35 speckgad
	!by 14,12,7,1	; 39 laplcgad
	!by 17,12,7,1	; 43 sharp1gad
	!by 20,12,7,1	; 47 sharp3gad
	!by 5,21,7,1	; 51 maxgad
	!by 8,21,7,1	; 55 medgad
	!by 11,21,7,1	; 59 mingad
	!by 14,21,7,1	; 63 cartgad
	!by 17,21,7,1	; 67 outlgad
	!by 20,21,7,1	; 71 negagad

; ------------------------------------------------ Activity

adinc	dec adcnt
	bne +
	inc spr2y
	inc spr2y+2
isa1	lda #5
	sta adcnt
+	rts 

; ------------------------------------------------ Abschluss Activity

abschl	lda spren		; Wanderbalken aus
	and #$f3
	sta spren
	lda msbx
	and #$f3
	sta msbx
	lda #$ff		; Grafik verändert
	sta gr_redisp
	jmp (finish)	; fertig

; ------------------------------------------------ Init Activity

init_sa	lda #5		; 5 x 40 = 200
	sta adcnt
	ldy #60
	lda #0
-	sta spr255+3,y	; Spriteblock 255 vorbereiten
	dey 
	bpl -
	sty spr255	; dünner Strich
	sty spr255+1
	sty spr255+2
	lda #$0f		; Farbe hellgrau
	sta sprcol2
	sta sprcol2+1
	lda sprxe		; doppelt breit
	ora #$0c
	sta sprxe

	lda msbx		; x über 255
	ora #$0c
	sta msbx
	lda #8		; x-Ordinate: 8 (plus 256)
	sta spr2x
	lda #$20
	sta spr2x+2
	lda #$92		; y-Ordinate: 146
	sta spr2y		; (im Image Information Fenster)
	sta spr2y+2

	sty sprptr+2	; Sprite 255
	sty sprptr+3
	lda spren
	ora #$0c		; Activity-Balken aktivieren
	sta spren
	rts

; ----------------------------------------- Event: Show Preview

evpreview	lda rm_swapw+3	; Modul läuft aus dem RAM heraus?
	bne donot		; ja, Preview nicht ausführen

	lda gd_modswitch	; save memory manager
	pha
	lda #$f0		; force slot4
	sta gd_modswitch
	jsr ev_prviu
	pla		; restore memory manager
	sta gd_modswitch

; ----------------------------------------- Event: Stay

evstay	clc
	rts

; ----------------------------------------- Event: Cancel

evcancel	sec
	rts

; --------------------------------------- Blink the Border

donot	ldy #2

graphon	lda border
	pha
	sty border
	ldx #$40
	jsr gd_dl2
	pla
	sta border
	stx sy_tbuffer
	clc
	rts

; ----------------------------------------- Execute Gadget

blurhi	ldx #<evblurhi
	ldy #>evblurhi
	bne +
smear	ldx #<evsmear
	ldy #>evsmear
	bne +
xhatch	ldx #<evxhatch
	ldy #>evxhatch
	bne +
gauss	ldx #<evgauss
	ldy #>evgauss
	bne +
random	ldx #<evrandom
	ldy #>evrandom
	bne +
speckle	ldx #<evspeckle
	ldy #>evspeckle
	bne +
cartoon	ldx #<evcartoon
	ldy #>evcartoon
	bne +
deeppr	ldx #<evdeeppr
	ldy #>evdeeppr
	bne +
emboss	ldx #<evemboss
	ldy #>evemboss
	bne +
laplace	ldx #<evlaplace
	ldy #>evlaplace
	bne +
watrcol	ldx #<evwatrcol
	ldy #>evwatrcol
	bne +
outlnm	ldx #<evoutlnm
	ldy #>evoutlnm
	bne +
sharp1	ldx #<evsharp1
	ldy #>evsharp1
	bne +
sharp3	ldx #<evsharp3
	ldy #>evsharp3
	bne +
maximum	ldx #<evmaximum
	ldy #>evmaximum
	bne +
median	ldx #<evmedian
	ldy #>evmedian
	bne +
minimum	ldx #<evminimum
	ldy #>evminimum
	bne +
+	stx event
	sty event+1

; ----------------------------------------- Konvolution

exec	lda gd_modswitch	; save memory manager
	pha

	jsr init_sa
	lda #0		; ab Rasterzeile 0
	sta lcnt
	jsr puffern	; drei Zeilen puffern
	jsr umlagern

-	jsr umlagern
	inc lcnt
	jsr puffern
	jsr konvol	; und bearbeiten

	dec lcnt
	jsr w_ergeb	; abspeichern
	jsr adinc

	inc lcnt		; bis alle Zeilen durch (200)
	lda lcnt
	cmp #199
	bne -

	jsr puffern	; letzte bearbeiten (Rand!)
	jsr umlagern
	jsr konvol
	jsr w_ergeb

ex01	pla		; restore memory manager
	sta gd_modswitch

	jsr unhilite
	jmp abschl	; fertig	### 1.03

; ----------------------------------------- Process

konvol	jmp (event)

; ----------------------------------------- Kringel definieren

chschr	!by $00,$3a,$46,$4e,$40,$40,$3c,$00

makechr	ldx #7
-	lda chschr,x
	sta sc_undochar,x
	dex
	bpl -
	rts

; ----------------------------------------- Requester einfärben

help	!by 6,29,11,3

colrize	ldy #0
	jsr settab
	jsr gettab
	lda sc_normtext
	sta sc_chgcol
	ldx #4
	jmp gd_fcol

; ------------------------------------------ (Un)Hilight Gadgets

hilite	jsr sethilite	; .y= offset in gadlist
	ldx #3		; .x= offset in syscolors
	jmp gd_fcol

unhilite	ldy mrka
	jsr sethilite
	ldx #2
	jmp gd_fcol	; .c=0

; ------------------------------------------ 

sethilite	ldx #3		; set data to (un)hilite gadgets
-	lda tabofgads,y
	sta sc_zl,x
	dey
	dex
	bpl -
	rts

; ----------------------------------------- Display Gadget Texts

tabigad	!wo help
	!wo modegad

settab	lda #<tabigad
	sta sc_texttab
	lda #>tabigad
	sta sc_texttab+1
	rts

gettab	lda (sc_texttab),y
	sta sc_screentab
	iny
	lda (sc_texttab),y
	sta sc_screentab+1
	iny
	sty sc_merk
	stx sc_merk+1
	lda #$00
	tax
	tay
gt0	jsr gd_setpos
	cpx #$04
	bne gt0
	jsr gd_trim
	jmp gd_initmove

; --------------------------------------- Event: Set Mode

evmode	ldx mode		; 0: stay / 1: leave
	beq ed0
	ldx #$ff
ed0	inx
	stx mode
ed4	bne +		; Einsprung aus Main beim Start:
	lda #<evstay	; setzt Abschlussvektor
	ldy #>evstay
	bne ++
+	lda #<evcancel
	ldy #>evcancel
++	sta finish
	sty finish+1
	txa
	bne ed1
	ldy #5
	!by $2c
ed1	ldy #11
	ldx #5
ed2	lda modes,y
	sta modetx,x
	dey
	dex
	bpl ed2
	ldy #2
out2	jsr settab
	jsr gettab
ed3	ldy #6
	jmp gd_xtxout1

mode	!by 0
modes	!scr " Stay  Leave"

; ------------------------------------------------ 
; ------------------------------------------------ List of Filters
; ------------------------------------------------ 

; ------------------------------------------------ CrossHatch

evxhatch	ldy #23
	sty mrka
	jsr hilite

	ldy #0

-	lda buf_o-1,y
	clc 
	adc buf_o+1,y
	adc buf_u-1,y
	adc buf_u+1,y
	lsr 
	lsr 
	sta buf_r,y

	lda buf_o+160-1,y
	clc 
	adc buf_o+160+1,y
	adc buf_u+160-1,y
	adc buf_u+160+1,y
	lsr 
	lsr 
	sta buf_r+160,y

	iny 
	cpy #160
	bne -
	rts 

; ------------------------------------------------ LaPlacian

evlaplace	ldy #39
	sty mrka
	jsr hilite

	ldy #0

-	lda buf_m,y
	asl
	asl
	sec 
	sbc buf_o,y
	sbc buf_m-1,y
	sbc buf_m+1,y
	sbc buf_u,y
	bcs +
	lda #0
+	cmp #16
	bcc +
	lda #15
+	sta buf_r,y

	lda buf_m+160,y
	asl
	asl
	sec 
	sbc buf_o+160,y
	sbc buf_m+160-1,y
	sbc buf_m+160+1,y
	sbc buf_u+160,y
	bcs +
	lda #0
+	cmp #16
	bcc +
	lda #15
+	sta buf_r+160,y

	iny 
	cpy #160
	bne -
	rts 

; ------------------------------------------------ Sharpen 1

evsharp1	ldy #43
	sty mrka
	jsr hilite

	ldy #0

-	lda buf_o-1,y
	clc 
	adc buf_o,y
	adc buf_o+1,y
	adc buf_m-1,y
	adc buf_m+1,y
	adc buf_u-1,y
	adc buf_u,y
	adc buf_u+1,y
	sta bbuf
	lda buf_m,y
	asl 
	asl 
	asl 
	adc buf_m,y
	sec 
	sbc bbuf
	bcs +
	lda #0
	beq ++
+	cmp #15
	bcc ++
	lda #15
++	sta buf_r,y

	lda buf_o+160-1,y
	clc 
	adc buf_o+160,y
	adc buf_o+160+1,y
	adc buf_m+160-1,y
	adc buf_m+160+1,y
	adc buf_u+160-1,y
	adc buf_u+160,y
	adc buf_u+160+1,y
	sta bbuf
	lda buf_m+160,y
	asl 
	asl 
	asl 
	adc buf_m+160,y
	sec 
	sbc bbuf
	bcs +
	lda #0
	beq ++
+	cmp #15
	bcc ++
	lda #15
++	sta buf_r+160,y

	iny 
	cpy #160
	bne -
	rts 

; ------------------------------------------------ Random

evrandom	ldy #27
	sty mrka
	jsr hilite

	ldy #0

-	lda rausch
	lsr
	and #3
	bcc ++
	tax
	beq +
	sty bbuf
	clc
	adc bbuf
	tax
	lda buf_u-2,x
	bpl +++

+	lda buf_m-1,y
	bpl +++
++	tax
	beq ++
	sty bbuf
	clc
	adc bbuf
	tax
	lda buf_o-1,x
	bpl +++
++	lda buf_m+1,y
+++	sta buf_r,y

	lda rausch
	lsr
	and #3
	bcc ++
	tax
	beq +
	sty bbuf
	clc
	adc bbuf
	tax
	lda buf_u+160-2,x
	bpl +++

+	lda buf_m+160-1,y
	bpl +++
++	tax
	beq ++
	sty bbuf
	clc
	adc bbuf
	tax
	lda buf_o+160-1,x
	bpl +++
++	lda buf_m+160+1,y
+++	sta buf_r+160,y

	iny
	cpy #160
	bne -
	rts

; ------------------------------------------------ Smear

evsmear	ldy #31
	sty mrka
	jsr hilite

	ldy #0		; erste Hälfte bearbeiten

-	lda rausch	; Zufallswerte 0..3
	and #3
	beq kon0		; wenn 0, direkt auslesen

	pha 		; ungleich 0: Wert merken
	sty bbuf		; .y merken (0..159)
	lda rausch	; neuen holen (für Index)
	lsr		; durch 2
	and #3		; auf 0..3 beschränken
	adc bbuf		; .y addieren
	tax 		; in .x merken (Index in Zeile)
	pla 		; Ursprungswert zurück

	cmp #1		; 1: oberste Zeile auslesen
	beq ++
	cmp #2		; 2: mittlere Zeile auslesen
	beq +

	lda buf_u-2,x	; 3: untere Zeile auslesen
	bpl kon1
+	lda buf_m-2,x
	bpl kon1
++	lda buf_o-2,x
	bpl kon1

kon0	lda buf_m,y	; 0: Aktuelle Position auslesen
kon1	sta buf_r,y	; und als Ergebnis speichern

	lda rausch	; zweite Hälfte, Zufallswerte 0..3
	and #3
	beq kon2		; wenn 0, direkt auslesen

	pha 		; ungleich 0: Wert merken
	sty bbuf		; .y merken (0..159)
	lda rausch	; neuen Wert holen (für Index)
	lsr		; durch 2
	and #3		; auf 0..3 beschränken
	adc bbuf		; .y addieren
	tax 		; in .x merken (Index in Zeile)
	pla 		; Ursprungswert zurück

	cmp #1		; 1: oberste Zeile auslesen
	beq ++
	cmp #2		; 2: mittlere Zeile auslesen
	beq +

	lda buf_u+158,x	; 3: untere Zeile auslesen
	bpl kon3
+	lda buf_m+158,x
	bpl kon3
++	lda buf_o+158,x
	bpl kon3

kon2	lda buf_m+160,y	; 0: Aktuelle Position auslesen
kon3	sta buf_r+160,y	; und als Ergebnis speichern

	iny 		; bis alle 320 Pixel durch
	cpy #160
	bne -
	rts 

; ------------------------------------------------ WaterColor

evwatrcol	ldy #11
	sty mrka
	jsr hilite

	ldy #0		; erste Hälfte bearbeiten

kon4	lda #0
	sta bbuf
	ldx #15		; clear work buffer
-	sta wbuf,x
	dex
	bpl -

	lda buf_o-1,y	; 0 1 1 1 0
	tax		; an 1: Grauwerte zählen
	inc wbuf,x
	lda buf_o,y
	tax
	inc wbuf,x
	lda buf_o+1,y
	tax
	inc wbuf,x

	lda buf_m-2,y	; 1 1 1 1 1
	tax
	inc wbuf,x
	lda buf_m-1,y
	tax
	inc wbuf,x
	lda buf_m,y
	tax
	inc wbuf,x
	lda buf_m+1,y
	tax
	inc wbuf,x
	lda buf_m+2,y
	tax
	inc wbuf,x

	lda buf_u-1,y	; 0 1 1 1 0
	tax
	inc wbuf,x
	lda buf_u,y
	tax
	inc wbuf,x
	lda buf_u+1,y
	tax
	inc wbuf,x

	ldx #15		; welcher war öfter als fünfmal?
-	lda wbuf,x	; (0 mal: gleich wegschreiben)
	beq +
	cmp #6		; den als Ergebnis wegschreiben
	bcs ++
	cmp bbuf		; Untergrenze überschritten?
	bcc +
	sta bbuf		; ja, dann neue Untergrenze (Bevorzugung der Richtung!)
	stx mrkx		; Grauwert auch merken
+	dex		; Histogramm fortsetzen
	bpl -

	ldx mrkx		; letzten gefundenen Grauwert wegschreiben
++	txa
	sta buf_r,y

	lda #0		; zweite Hälfte bearbeiten
	sta bbuf
	ldx #15		; Histogramm löschen
-	sta wbuf,x
	dex
	bpl -		; weiter wie oben:

	lda buf_o+160-1,y	; 0 1 1 1 0
	tax
	inc wbuf,x
	lda buf_o+160,y
	tax
	inc wbuf,x
	lda buf_o+160+1,y
	tax
	inc wbuf,x

	lda buf_m+160-2,y	; 1 1 1 1 1
	tax
	inc wbuf,x
	lda buf_m+160-1,y
	tax
	inc wbuf,x
	lda buf_m+160,y
	tax
	inc wbuf,x
	lda buf_m+160+1,y
	tax
	inc wbuf,x
	lda buf_m+160+2,y
	tax
	inc wbuf,x

	lda buf_u+160-1,y	; 0 1 1 1 0
	tax
	inc wbuf,x
	lda buf_u+160,y
	tax
	inc wbuf,x
	lda buf_u+160+1,y
	tax
	inc wbuf,x

	ldx #15
-	lda wbuf,x
	beq +
	cmp #6
	bcs ++
	cmp bbuf
	bcc +
	sta bbuf
	stx mrkx
+	dex
	bpl -

	ldx mrkx
++	txa
	sta buf_r+160,y

	iny 		; bis alle 320 Pixel durch
	cpy #160
	beq +
	jmp kon4
+	rts

; ------------------------------------------------ Median

evmedian	ldy #55
	sty mrka
	jsr hilite

	ldy #0

kon5	lda buf_o-1,y	; aktuelle Matrix puffern
	sta wbuf
	lda buf_o,y
	sta wbuf+1
	lda buf_o+1,y
	sta wbuf+2
	lda buf_m-1,y
	sta wbuf+3
	lda buf_m,y
	sta wbuf+4
	lda buf_m+1,y
	sta wbuf+5
	lda buf_u-1,y
	sta wbuf+6
	lda buf_u,y
	sta wbuf+7
	lda buf_u+1,y
	sta wbuf+8
	sty mrkx

	jsr auswerten	; auswerten
	sta buf_r,y	; Ergebnis schreiben

	lda buf_o+160-1,y
	sta wbuf
	lda buf_o+160,y
	sta wbuf+1
	lda buf_o+160+1,y
	sta wbuf+2
	lda buf_m+160-1,y
	sta wbuf+3
	lda buf_m+160,y
	sta wbuf+4
	lda buf_m+160+1,y
	sta wbuf+5
	lda buf_u+160-1,y
	sta wbuf+6
	lda buf_u+160,y
	sta wbuf+7
	lda buf_u+160+1,y
	sta wbuf+8
	sty mrkx

	jsr auswerten
	sta buf_r+160,y

	iny
	cpy #160
	beq +
	jmp kon5
+	rts

auswerten	ldx #4
--	lda #0
	sta bbuf
	ldy #8
-	lda wbuf,y
	bmi +
	cmp bbuf
	bcc +
	sta bbuf
	sty mrky
+	dey
	bpl -

	lda bbuf
	beq +
	lda #$ff
	ldy mrky
	sta wbuf,y
	dex
	bpl --
	lda bbuf
+	ldy mrkx
	rts

; ------------------------------------------------ Emboss

evemboss	ldy #15
	sty mrka
	jsr hilite

	ldy #0

-	lda buf_u+1,y
	eor #$0f
	clc 
	adc buf_o-1,y
	lsr 
	sta buf_r,y

	lda buf_u+160+1,y
	eor #$0f
	clc 
	adc buf_o+160-1,y
	lsr 
	sta buf_r+160,y

	iny 
	cpy #160
	bne -
	rts 

; ------------------------------------------------ DeepPress

evdeeppr	ldy #19
	sty mrka
	jsr hilite

	ldy #0

-	lda buf_m+1,y
	clc 
	adc buf_u,y
	asl 
	asl 
	sta bbuf
	lda buf_o,y
	adc buf_m-1,y
	asl 
	asl 
	adc buf_m,y
	sec 
	sbc bbuf
	bcs +
	lda #0
	beq ++
+	cmp #15
	bcc ++
	lda #15
++	sta buf_r,y

	lda buf_m+160+1,y
	clc 
	adc buf_u+160,y
	asl 
	asl 
	sta bbuf
	lda buf_o+160,y
	adc buf_m+160-1,y
	asl 
	asl 
	adc buf_m+160,y
	sec 
	sbc bbuf
	bcs +
	lda #0
	beq ++
+	cmp #15
	bcc ++
	lda #15
++	sta buf_r+160,y

	iny 
	cpy #160
	bne -
	rts 

; ------------------------------------------------ Gaussian

evgauss	ldy #7
	sty mrka
	jsr hilite

	ldy #0

-	lda buf_m,y
	asl 
	clc 
	adc buf_o,y
	adc buf_m-1,y
	adc buf_m+1,y
	adc buf_u,y
	asl 
	adc buf_o-1,y
	adc buf_o+1,y
	adc buf_u-1,y
	adc buf_u+1,y
	lsr 
	lsr 
	lsr 
	lsr 
	sta buf_r,y

	lda buf_m+160,y
	asl 
	clc 
	adc buf_o+160,y
	adc buf_m+160-1,y
	adc buf_m+160+1,y
	adc buf_u+160,y
	asl 
	adc buf_o+160-1,y
	adc buf_o+160-1,y
	adc buf_u+160-1,y
	adc buf_u+160+1,y
	lsr 
	lsr 
	lsr 
	lsr 
	sta buf_r+160,y

	iny 
	cpy #160
	bne -
	rts 

; ------------------------------------------------ Sharpen 3

evsharp3	ldy #47
	sty mrka
	jsr hilite

	ldy #0

-	lda buf_o,y
	clc 
	adc buf_m-1,y
	adc buf_m+1,y
	adc buf_u,y
	asl 
	adc buf_o-1,y
	adc buf_o+1,y
	adc buf_u-1,y
	adc buf_u+1,y
	sta bbuf
	lda buf_m,y
	asl 
	asl 
	asl 
	asl 
	sec 
	sbc bbuf
	bcs +
	lda #0
	beq ++
+	lsr 
	lsr 
	cmp #15
	bcc ++
	lda #15
++	sta buf_r,y

	lda buf_o+160,y
	clc 
	adc buf_m+160-1,y
	adc buf_m+160+1,y
	adc buf_u+160,y
	asl 
	adc buf_o+160-1,y
	adc buf_o+160+1,y
	adc buf_u+160-1,y
	adc buf_u+160+1,y
	sta bbuf
	lda buf_m+160,y
	asl 
	asl 
	asl 
	asl 
	sec 
	sbc bbuf
	bcs +
	lda #0
	beq ++
+	lsr 
	lsr 
	cmp #15
	bcc ++
	lda #15
++	sta buf_r+160,y

	iny 
	cpy #160
	bne -
	rts 

; ----------------------------------------- Event: Nagative

evnegatv	ldy #71
	sty mrka
	jsr hilite

	lda gd_modswitch
	pha

	lda #3
	sta isa1+1
	jsr init_sa

	lda #<sy_4bit	; start at 4Bit
	ldy #>sy_4bit
	sta dst
	sty dst+1

	ldy #0		; perform:
-	sty mrky
	lda (dst),y	; get double pixel
	tax
	and #15
	txa
	lsr		; treat left one
	lsr
	lsr
	lsr
	tay
	lda palette,y
	and #$f0
	sta mrkx		; save result

	txa		; re-get double pixel
	and #15		; treat right one
	tay
	lda palette,y
	and #15
	ora mrkx		; join with left
	ldy mrky
	sta (dst),y	; write back new double pixel
	iny 
	bne -

	jsr adinc		; activity
	inc dst+1
	lda dst+1
	cmp #>sy_bigbuffer	; until end of 4Bit
	bne -

	lda #5
	sta isa1+1
	jmp ex01		; fertig

palette	!by $ff,$ee,$dd,$cc,$bb,$aa,$99,$88
	!by $77,$66,$55,$44,$33,$22,$11,$00

; ------------------------------------------------ Cartoon

evcartoon	ldy #63
	sty mrka
	jsr hilite

	ldy #0		; erste Hälfte bearbeiten
-	lda buf_m,y	; Zentrum der Matrix mal 4
	asl
	asl
	sec 
	sbc buf_o,y	; Matrixperipherie einarbeiten (4 Werte)
	sbc buf_m-1,y
	sbc buf_m+1,y
	sbc buf_u,y
	beq +		; nichts ändern
	bcc +
	lda #0		; oder schwarz setzen
	beq ++
+	lda buf_m,y
++	sta buf_r,y

	lda buf_m+160,y	; zweite Hälfte dito
	asl
	asl
	sec 
	sbc buf_o+160,y
	sbc buf_m+159,y
	sbc buf_m+161,y
	sbc buf_u+160,y
	beq +
	bcc +
	lda #0
	beq ++
+	lda buf_m+160,y
++	sta buf_r+160,y

	iny 		; bis alle 320 Pixel durch
	cpy #160
	bne -
	rts 

; ------------------------------------------------ Blur High

evblurhi	ldy #3
	sty mrka
	jsr hilite

 	ldy #0
-	lda buf_m,y	; matrixzentrum*2 (linke Hälfte)
	asl 
	adc buf_o-2,y	; Drumherum addieren
	adc buf_o-1,y
	adc buf_o,y
	adc buf_o+1,y
	adc buf_o+2,y
	adc buf_m-2,y
	adc buf_m-1,y
	adc buf_m+1,y
	adc buf_m+2,y
	adc buf_u-2,y
	adc buf_u-1,y
	adc buf_u,y
	adc buf_u+1,y
	adc buf_u+2,y
	lsr 
	lsr 
	lsr 
	lsr 		; ergebnis/16
	sta buf_r,y	; sichern

	lda buf_m+160,y	; (rechte Hälfte)
	asl 
	adc buf_o+158,y
	adc buf_o+159,y
	adc buf_o+160,y
	adc buf_o+161,y
	adc buf_o+162,y
	adc buf_m+158,y
	adc buf_m+159,y
	adc buf_m+161,y
	adc buf_m+162,y
	adc buf_u+158,y
	adc buf_u+159,y
	adc buf_u+160,y
	adc buf_u+161,y
	adc buf_u+162,y
	lsr 
	lsr 
	lsr 
	lsr 		; ergebnis/16 
	sta buf_r+160,y	; sichern
	iny 
	cpy #160		; zählen (320 Bytes)
	bne -
	rts 

; ------------------------------------------------ OutlineMono (LineArt)

evoutlnm	ldy #67
	sty mrka
	jsr hilite

	ldy #0		; erste Hälfte bearbeiten

-	lda buf_m,y	; Zentrum der Matrix mal 4
	asl
	asl
	sec
	sbc buf_o,y	; Matrixperipherie einarbeiten (4 Werte)
	sbc buf_m-1,y
	sbc buf_m+1,y
	sbc buf_u,y
	beq ++		; 0: nichts ändern (schwarz)
	bcc +		; neg: schwarz
	lda #15		; pos: weiß
	bne ++
+	lda #0		; oder schwarz setzen
++	sta buf_r,y

	lda buf_m+160,y	; zweite Hälfte dito
	asl
	asl
	sec 
	sbc buf_o+160,y
	sbc buf_m+159,y
	sbc buf_m+161,y
	sbc buf_u+160,y
	beq ++		; 0: nichts ändern (schwarz)
	bcc +		; neg: schwarz
	lda #15		; pos: weiß
	bne ++
+	lda #0		; oder schwarz setzen
++	sta buf_r+160,y

	iny 		; bis alle 320 Pixel durch
	cpy #160
	bne -
	rts 

; ------------------------------------------------ Minimum

evminimum	ldy #59
	sty mrka
	jsr hilite

	ldy #0		; minimum unter dem konvolutionskern suchen (linke hälfte, 160 bytes)

loop 	lda buf_m,y	; matrixzentrum (in der mittleren rasterzeile) testen
	beq ++		; wenn bereits minimum, in den ergebnispuffer, keine bearbeitung erforderlich
	sta bbuf		; nein, merken
	lda buf_o-1,y	; erstes byte der oberen rasterzeile holen
	cmp bbuf		; vergleichen
	bcs +		; größer/gleich: nicht beachten
	sta bbuf		; kleiner: als neues vergleichsbyte merken
+ 	lda buf_o,y	; zweites byte der obersten zeile: dito
	cmp bbuf
	bcs +
	sta bbuf
+ 	lda buf_o+1,y	; drittes byte: dito
	cmp bbuf
	bcs +
	sta bbuf
+ 	lda buf_m-1,y	; erstes byte der mittleren zeile testen
	cmp bbuf
	bcs +
	sta bbuf
+ 	lda buf_m+1,y	; matrixzentrum überspringen und gleich drittes byte 
	cmp bbuf
	bcs + 
	sta bbuf
+ 	lda buf_u-1,y	; erstes byte der unteren rasterzeile testen
	cmp bbuf
	bcs +
	sta bbuf
+ 	lda buf_u,y	; zweites byte
	cmp bbuf
	bcs +
	sta bbuf
+ 	lda buf_u+1,y	; drittes byte
	cmp bbuf
	bcs +
	sta bbuf
+ 	lda bbuf		; ergebnis holen, dieses byte enthält das minimum 

++ 	sta buf_r,y	; und in den ergebnispuffer schreiben
	lda buf_m+160,y	; das ganze noch einmal für die rechte hälfte (160 bytes)
	beq ++		; bei minimum keine bearbeitung erforderlich
	sta bbuf		; sonst weiter wie oben
	lda buf_o+159,y
	cmp bbuf
	bcs +
	sta bbuf
+ 	lda buf_o+160,y
	cmp bbuf
	bcs +
	sta bbuf
+ 	lda buf_o+161,y
	cmp bbuf
	bcs +
	sta bbuf
+ 	lda buf_m+159,y
	cmp bbuf
	bcs +
	sta bbuf
+ 	lda buf_m+161,y
	cmp bbuf
	bcs +
	sta bbuf
+ 	lda buf_u+159,y
	cmp bbuf
	bcs +
	sta bbuf
+ 	lda buf_u+160,y
	cmp bbuf
	bcs +
	sta bbuf
+ 	lda buf_u+161,y
	cmp bbuf
	bcs +
	sta bbuf
+ 	lda bbuf		; ergebnis holen...

++ 	sta buf_r+160,y	; ...und in den ergebnispuffer schreiben
	iny 		; alle bytes durch?
	cpy #160
	beq +		; ja, ergebnispuffer gefüllt, fertig
	jmp loop		; nein, loop
+	rts

; ------------------------------------------------ Maximum

evmaximum	ldy #51
	sty mrka
	jsr hilite

	ldy #0

loop2 	lda buf_m,y
	cmp #15
	beq ++

	sta bbuf
	lda buf_o-1,y
	cmp bbuf
	bcc +
	sta bbuf
+ 	lda buf_o,y
	cmp bbuf
	bcc +
	sta bbuf
+ 	lda buf_o+1,y
	cmp bbuf
	bcc +
	sta bbuf
+ 	lda buf_m-1,y
	cmp bbuf
	bcc +
	sta bbuf
+ 	lda buf_m+1,y
	cmp bbuf
	bcc + 
	sta bbuf
+ 	lda buf_u-1,y
	cmp bbuf
	bcc +
	sta bbuf
+ 	lda buf_u,y
	cmp bbuf
	bcc +
	sta bbuf
+ 	lda buf_u+1,y
	cmp bbuf
	bcc +
	sta bbuf

+ 	lda bbuf
++ 	sta buf_r,y

	lda buf_m+160,y
	cmp #15
	beq ++

	sta bbuf
	lda buf_o+159,y
	cmp bbuf
	bcc +
	sta bbuf
+ 	lda buf_o+160,y
	cmp bbuf
	bcc +
	sta bbuf
+ 	lda buf_o+161,y
	cmp bbuf
	bcc +
	sta bbuf
+ 	lda buf_m+159,y
	cmp bbuf
	bcc +
	sta bbuf
+ 	lda buf_m+161,y
	cmp bbuf
	bcc +
	sta bbuf
+ 	lda buf_u+159,y
	cmp bbuf
	bcc +
	sta bbuf
+ 	lda buf_u+160,y
	cmp bbuf
	bcc +
	sta bbuf
+ 	lda buf_u+161,y
	cmp bbuf
	bcc +
	sta bbuf

+ 	lda bbuf
++ 	sta buf_r+160,y

	iny
	cpy #160
	beq +
	jmp loop2
+	rts

; ------------------------------------------------ Speckle

evspeckle	ldy #35
	sty mrka
	jsr hilite

	ldy #0		; erste Hälfte bearbeiten

-	lda buf_o,y	; Kreuz aufaddieren
	clc 
	adc buf_m-1,y	; ohne Mitte
	adc buf_m+1,y
	adc buf_u,y
	asl		; mal 2
	sta bbuf		; und merken

	lda buf_m,y	; Andreaskreuz aufaddieren
	asl		; Mitte mal 5
	asl
	adc buf_m,y
	adc buf_o-1,y
	adc buf_o+1,y
	adc buf_u-1,y
	adc buf_u+1,y
	sec 
	sbc bbuf		; und erstes Kreuz subtrahieren, dieser Wert
	bcs +
	lda #0		; wenn unter 0: 0
	beq ++
+	cmp #15
	bcc ++
	lda #15		; wenn über 15: 15
++	sta buf_r,y	; als Ergebnis

	lda buf_o+160,y	; zweite Hälfte dito
	clc 
	adc buf_m+159,y
	adc buf_m+161,y
	adc buf_u+160,y
	asl
	sta bbuf

	lda buf_m+160,y
	asl
	asl
	adc buf_m+160,y
	adc buf_o+159,y
	adc buf_o+161,y
	adc buf_u+159,y
	adc buf_u+161,y
	sec 
	sbc bbuf
	bcs +
	lda #0
	beq ++
+	cmp #15
	bcc ++
	lda #15
++	sta buf_r+160,y

	iny 
	cpy #160		; bis alle 320 Pixel durch
	bne -
	rts 

; ------------------------------------------------ 
; ------------------------------------------------ 
; ------------------------------------------------ 

filtlist	!by 0
	!by 4,2,38,18,$01
	!wo 0

	!by 4,2,9,3,$c4
	!wo blurhi
	!scr " Blur  @"
	!by 7,2,9,3,$c8
	!wo gauss
	!scr " Gauss @"
	!by 10,2,9,3,$c8
	!wo watrcol
	!scr "WatrCol@"
	!by 13,2,9,3,$c8
	!wo emboss
	!scr "Emboss @"
	!by 16,2,9,3,$c8
	!wo deeppr
	!scr "DeepPrs@"
	!by 19,2,9,3,$c7
	!wo xhatch
	!scr "X-Hatch@"

	!by 4,11,9,3,$c5
	!wo random
	!scr "Random @"
	!by 7,11,9,3,$c0
	!wo smear
	!scr " Smear @"
	!by 10,11,9,3,$c0
	!wo speckle
	!scr "Speckle@"
	!by 13,11,9,3,$c0
	!wo laplace
	!scr "LaPlace@"
	!by 16,11,9,3,$c0
	!wo sharp1
	!scr "Sharpn1@"
	!by 19,11,9,3,$cc
	!wo sharp3
	!scr "Sharpn3@"

	!by 4,20,9,3,$c5
	!wo maximum
	!scr "Maximum@"
	!by 7,20,9,3,$c0
	!wo median
	!scr "Median @"
	!by 10,20,9,3,$c0
	!wo minimum
	!scr "Mimimum@"
	!by 13,20,9,3,$c0
	!wo cartoon
	!scr "Cartoon@"
	!by 16,20,9,3,$c0
	!wo outlnm
	!scr "LineArt@"
	!by 19,20,9,3,$cc
	!wo evnegatv
	!scr "Negativ@"

modegad	!by 8,30,9,3,$c0
	!wo evmode
	!by 223
modetx	!scr " Stay @"
	!by 11,29,11,7,$4f
	!wo evpreview
	!by 19,30,9,3,$dc
	!wo evcancel
	!scr " Leave @"
	!by $c0,4,30,7
	!scr "Filters@"
	!by $c0,6,29,9
	!scr "Process &@"
	!by $80

; ------------------------------------------------ 

modend	!eof
