
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ------------------------------------------------ 
;
; mod.ReduceGrays
; Modul zum Reduzieren der Farben nach dem 
; Error-Distribution-Verfahren
;
; 1.00, 06.04.93
; 1.01, 24.09.93
; 1.02, 09.07.17, added palette reset,
;                 combined Hires and MC,
;                 added requester
; re-assembled on 28.05.2017
;
; 1.03, 10.07.17, combined with EDmono
; 1.04, 11.11.18, added y2.20, all values corrected
; 1.05, 13.07.21, better UI
;
; ------------------------------------------------ 

; ------------------------------------------------ Declarations

	adcnt	= $30
	mono1	= $31
	mono2	= $32
	ymrk	= $33
	dst	= $35
	src	= $37
	linenr	= $39
	bcnt	= $3a
	m2err	= $3b
	m3err	= $3c
	perr	= $3d
	m1err	= $3e
	derr	= $3f
	count	= $41
	ccol	= $41

	makeqtab	= $17c9
	numcols	= $1ee9
	buffer	= $c600
	cpalette	= $c740

	sprptr		= $07f8
	spr255		= $3fc0

	spr2x		= $d004
	spr2y		= $d005
	msbx		= $d010
	spren		= $d015
	sprxe		= $d01d
	border		= $d020
	sprcol2		= $d029

; ------------------------------------------------ Header

	jmp start
	!by $20
	!by $00
	!by $00
	!wo modend 
	!wo 0
	!pet "reduce ed gray  "
	!pet "1.05"
	!pet "13.07.21"
	!pet "W.Kling/AD      "

; -------------------------------------- Main

start	jsr makechar	; create gamma char
	ldx #<edlst
	ldy #>edlst
	jsr gd_screen	; show requester
	jsr shownum	; show # of colors
	jmp gd_eloop	; wait for clicks

; ------------------------------------------------ Event: Set Gamma Values

evgamma	lda gamma
	cmp #3
	bne evg0
	lda #$ff
	sta gamma
evg0	inc gamma
	ldy gamma
	ldx goffs,y
	ldy #3
-	lda gammavals,x
	sta gammatx,y
	dex
	dey
	bpl -
	ldx #<sgamma
	ldy #>sgamma+1
	jmp settext

; ------------------------------------------------ Event: Reduce to Monochrome

evmono	ldy #1		; flag for MONO
	bne +

; ------------------------------------------------ Event: Reduce Hires

evhires	ldy #0		; flag for HIRES
+	sty mode
	jsr init		; clear buffer, start activity display

	jsr buildhpal
	sta mono1		; 1st and last values for mono
	lda cpalette+15
	sta mono2

--	jsr getlineh	; buffer one rasterline
	lda #<sy_bigbuffer
	ldx #>sy_bigbuffer
	sta dst
	stx dst+1
	lda #<buffer
	ldx #>buffer
	sta src
	stx src+1
	lda #$40		; count 320 bytes
	ldx #$01
	sta count
	stx count+1

	ldy #0		; apply error distribution
	sty perr
-	lda (src),y
	clc 
	adc perr
	sta derr
	lda (dst),y
	sty ymrk
	tax

	lda mode		; Hires oder Mono?
	beq +

	ldy gamma		; Mono, dann Gamma:
	beq +		; 1.00 ($00)
	dey
	beq ++		; 0.35 ($01)
	dey
	beq +++ 
	lda g220,x	; 2.20 ($03)
	jmp hr0
+++	lda g180,x	; 1.80 ($02)
	jmp hr0

+	txa		; Hires
	asl
	asl
	asl
	jmp hr0

++	lda g035,x

hr0	ldy ymrk
	sta m1err
	
	bit derr
	bmi +
	adc derr
	sec 
	ror derr+1
	jmp ++

+	lda derr
	adc m1err
	ror derr+1

++	ldx mode
	beq +

	sta m2err		; monochrome
	bit derr+1
	bpl ++
	cmp #$3c		; Mittelwert
	bcc ++
	lda mono2		; weiﬂ
	!by $2c
++	lda mono1		; schwarz
	jmp +++

+	sta m2err		; new color
	bit derr+1
	bmi +
	lda #0
+	cmp #$79
	bcc +
	lda #$78
+	lsr		; /8: index into palette
	lsr
	lsr
	tax 
	lda cpalette,x	; get new color

+++	sta (dst),y	; and set it
	asl
	asl
	asl
	sta m3err
	lda m2err
	sec 
	sbc m3err
	clc 
	bpl +
	sec 
+	ror
	sta (src),y
	sta perr
	iny 
	bne +
	inc dst+1
	inc src+1

+	lda count		; count 320 bytes
	bne +
	dec count+1
+	dec count
	lda count
	ora count+1
	bne +

	jsr putlineh	; then transfer it to 4bit 
	jsr lloop
	jmp --

+	jmp -


buildhpal	ldy #15		; prepare palette
-	ldx gr_qtab,y	; regard quantization
	lda gr_palette,x	; take GoDot palette
	tax 
	lda godcols,x
	sta cpalette,y	; build C64 palette
	dey 
	bpl -
	rts

; ------------------------------------------------ Event: Reduce Multicolor

evmcolor	jsr init
	sty mode		; .y=$ff, flag for MULTI
	jsr makepal

--	jsr getlinem
	ldy #0		; apply error distribution
	sty perr
-	lda buffer,y
	clc 
	adc perr
	sta derr
	lda sy_bigbuffer,y
	asl
	asl
	sta m1err
	bit derr
	bmi +
	adc derr
	sec 
	ror derr+1
	jmp ++

+	lda derr
	adc m1err
	ror derr+1

++	sta m2err		; new color
	bit derr+1
	bmi +
	lda #0
+	cmp #$79
	bcc +
	lda #$78
+	lsr		; /8: index into palette
	lsr
	lsr
	tax 
	lda cpalette,x	; get new color
	sta sy_bigbuffer,y
	asl
	asl
	asl
	sta m3err
	lda m2err
	sec 
	sbc m3err
	clc 
	bpl +
	sec 
+	ror
	sta buffer,y
	sta perr
	iny 
	cpy #160
	bne -
	jsr putlinem	; then transfer it to 4bit 

	jsr lloop
	jmp --

; ------------------------------------------------ 

getlineh	lda linenr	; compute 4bit address
	pha 
	lsr
	lsr
	lsr
	tax 
	pla 
	and #7
	asl
	asl
	sta src
	lda fbhigh,x
	sta src+1
	lda #<sy_bigbuffer	; destination
	ldx #>sy_bigbuffer
	sta dst
	stx dst+1

	ldx #0
	lda #40		; 40 Kacheln
	sta bcnt
--	ldy #0
-	lda (src),y	; isolate one rasterline
	pha 
	lsr		; linkes Pixel
	lsr
	lsr
	lsr
	sta (dst,x)	; ablegen
	inc dst
	bne +
	inc dst+1
+	pla 		; rechtes Pixel
	and #15
	sta (dst,x)	; ablegen
	inc dst
	bne +
	inc dst+1
+	iny 
	cpy #4
	bne -

	lda src		; n‰chste Kachel
	clc 
	adc #32
	sta src
	bcc +
	inc src+1
+	dec bcnt		; bis alle durch (320 Pixel)
	bne --
	rts 

; ------------------------------------------------ 

putlineh	lda linenr	; compute 4bit address
	pha 
	lsr
	lsr
	lsr
	tax 
	pla 
	and #7
	asl
	asl
	sta src
	lda fbhigh,x
	sta src+1
	lda #<sy_bigbuffer	; destination
	ldx #>sy_bigbuffer
	sta dst
	stx dst+1

	ldx #0
	lda #40		; 40 Kacheln
	sta bcnt
--	ldy #0
-	lda (dst,x)	; isolate one rasterline
	asl
	asl
	asl
	asl
	inc dst
	bne +
	inc dst+1
+	ora (dst,x)
	inc dst
	bne +
	inc dst+1
+	sta (src),y
	iny 
	cpy #4
	bne -

	lda src		; n‰chste Kachel
	clc 
	adc #32
	sta src
	bcc +
	inc src+1
+	dec bcnt		; bis alle durch
	bne --
	rts 

; ------------------------------------------------ 

getlinem	lda linenr	; compute 4bit address
	pha 
	lsr
	lsr
	lsr
	tax 
	pla 
	and #7
	asl
	asl
	sta dst
	ldy fbhigh,x
	sty dst+1
	sta src
	sty src+1

	ldx #0
	lda #40		; 40 Kacheln
	sta bcnt
--	ldy #0
-	lda (dst),y	; isolate one rasterline
	lsr
	lsr
	lsr
	lsr
	sta sy_bigbuffer,x
	lda (dst),y
	and #15
	clc 
	adc sy_bigbuffer,x
	sta sy_bigbuffer,x
	inx 
	iny 
	cpy #4
	bne -

	lda dst
	clc 
	adc #32
	sta dst
	bcc +
	inc dst+1
+	dec bcnt		; bis alle durch
	bne --
	rts 

; ------------------------------------------------ 

putlinem	lda src
	ldy src+1
	sta dst
	sty dst+1

	ldx #0
	lda #40		; 40 Kacheln
	sta bcnt
--	ldy #0
-	lda sy_bigbuffer,x
	asl
	asl
	asl
	asl
	ora sy_bigbuffer,x
	inx 
	sta (dst),y
	iny 
	cpy #4
	bne -
	lda dst
	clc 
	adc #32
	sta dst
	bcc +
	inc dst+1
+	dec bcnt		; bis alle durch
	bne --
	rts 

; ------------------------------------------------ 

makepal	ldy #0
-	ldx gr_palette,y
	lda godcols,x
	sta npalette,y
	iny 
	cpy gr_howmany
	bne -
	ldy #15
--	ldx #0
	lda #16
	sta ccol
-	tya 
	sec 
	sbc npalette,x
	beq ++
	bcs +
	eor #$ff
	adc #1
+	cmp ccol
	bcs +
++	sta ccol
	lda npalette,x
	sta cpalette,y
+	inx 
	cpx gr_howmany
	bne -
	dey 
	bpl --
	rts 

; ------------------------------------------------ Show # of Colors

shownum	lda gr_howmany
	jsr gd_xcnvdez	; make digits
	cpx #$30
	bne +
	ldx #$20
+	stx colstx
	sta colstx+1
	ldx #<colsgad		; and output
	ldy #>colsgad+1

; ------------------------------------------------ Text output

settext	stx sc_screentab
	sty sc_screentab+1
	lda #0
	tax
	tay
stt	jsr gd_setpos
	cpx #3
	bne stt
	jsr gd_trim
	jsr gd_initmove
	ldy #6
	jmp gd_xtxout1

; ------------------------------------------------ 

makechar	ldx #15
-	lda gammach,x
	sta sc_undochar,x
	dex
	bpl -
stay	clc
	rts

unmake	ldx #15
-	lda repair,x
	sta sc_undochar,x
	dex
	bpl -
	rts

; ------------------------------------------------ 

npalette	!fill 16,5

; ------------------------------------------------ 

fbhigh	!by $40,$45,$4a,$4f,$54
	!by $59,$5e,$63,$68,$6d
	!by $72,$77,$7c,$81,$86
	!by $8b,$90,$95,$9a,$9f
	!by $a4,$a9,$ae,$b3,$b8

; ------------------------------------------------ 

screenpos	!wo 0
mode	!by 0
gammach	!by $00,$0c,$6e,$6d,$38,$7c,$c6,$7c
chschr	!by $00,$3a,$46,$4e,$40,$40,$3c,$00
repair	!fill 16
gamma	!by 0
gammavals	!scr "1.000.351.802.20"
goffs	!by 3,7,11,15
gray	!scr "Gray "

g035	!by $00,$2f,$3b,$44,$4c,$52,$57,$5c	; 1
	!by $60,$64,$68,$6c,$6f,$72,$75,$78
g180	!by $00,$01,$03,$07,$0b,$11,$17,$1e	; 2
	!by $27,$30,$3a,$45,$50,$5d,$6a,$78
g220	!by $00,$00,$01,$03,$07,$0b,$10,$16	; 3
	!by $1e,$27,$31,$3d,$49,$58,$67,$78 

godcols	!by $00,$0f,$04,$0c,$05,$0a,$01,$0d
	!by $06,$02,$09,$03,$07,$0e,$08,$0b

; -------------------------------------- Requester

edlst	!by 0
	!by 8,12,17,11,$81,0,0
	!scr "Reduce Grays@"

sgamma	!by 12,15,7,3,$c0
	!wo evgamma
	!by 224
gammatx	!scr "1.00",0
colsgad	!by 15,18,4,3,$a0
	!wo 0
colstx	!scr "16",0
	!by 12,22,7,3,$cf
	!wo evmono
	!scr "Mono ",0
shires	!by 14,22,7,3,$ce
	!wo evhires
hirestx	!scr "Hires",0
smcol	!by 16,22,7,3,$ce
	!wo evmcolor
mcoltx	!scr "Multi",0
	!by 18,12,17,3,$cb
	!wo evcan
	!scr "Cancel@"

	!by $c0,12,13,1
	!by 223,0
	!by $c0,15,12,5
	!scr "Grays",0
	!by $c0,10,22,5
	!scr "Mode:",0
	!by $c0,10,13,7
	!scr "Params:",0
	!by $80

; ------------------------------------------------ adinc

lloop	dec adcnt		; activity
	bne +
	inc spr2y
	inc spr2y+2
	lda #5
	sta adcnt
+	inc linenr	; next rasterline
	lda linenr	; count rasterlines
	cmp #200
	beq resetpal
	rts

; ------------------------------------------------ Abschluss

resetpal	pla
	pla
	lda #16
	sta gr_howmany	; volle Farbanzahl erzeugen
	jsr gd_xcnvdez	; in Ziffern wandeln
	ldy #2
	sta numcols,y	; Einer eintragen
	txa		; Zehner eintragen, wenn nicht 0
	and #15
	bne +
	ldx #32
+	txa
	dey
	sta numcols,y
	jsr makeqtab	; reset quantisation table
	dex		; reset colors (.x=16)
-	lda gr_basepal,x
	sta gr_palette,x
	dex
	bpl -

	lda mode
	beq +
	bpl +
	lda #$31
	ldx #$36
	bne ++
+	lda #$33
	ldx #$32
++	sta ls_imode
	stx ls_imode+1
	ldx #4
-	lda gray,x
	sta ls_idrive,x
	dex
	bpl -

; ------------------------------------------------ 

clearad	lda #$ff
	sta gr_redisp
	lda spren
	and #$f3
	sta spren
	lda spritehi
	and #$f3
	sta spritehi

; ------------------------------------------------ Event: Cancel

evcan	jsr unmake
	sec 
	rts

; ------------------------------------------------ Init

init	lda #0		; clear buffer
	tay 
-	sta buffer,y
	sta buffer+160,y
	iny 
	cpy #160
	bne -
	sta linenr	; 200 rasterlines (from 0 to 199)

initad 	ldy #$3c
	lda #$00
-	sta spr255+3,y
	dey 
	bpl -
	sty spr255
	sty spr255+1
	sty spr255+2
	lda #15
	sta sprcol2
	sta sprcol2+1
	lda sprxe
	ora #$0c
	sta sprxe
	lda spritehi
	ora #$0c
	sta spritehi
	lda #8
	sta spr2x
	lda #32
	sta spr2x+2
	lda #$92
	sta spr2y
	sta spr2y+2
	sty sprptr+2
	sty sprptr+3
	lda spren
	ora #$0c
	sta spren
	lda #5
	sta adcnt
	rts 

; ------------------------------------------------ 

modend	!eof

