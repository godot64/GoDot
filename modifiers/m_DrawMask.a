
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ------------------------------------------ 
;
; mod.DrawMask
; Module to paint a mask onto a picture
;
;   1.00, 28.03.02: first release
;   1.01, 30.03.02: changed the brush shapes
;                   removed brush shadow
;                   added brush size 1 (1 pixel)
;   1.02, 30.03.02: brush cut on right third fixed
;   1.03, 30.03.02: inelegant handling of switching on graphics fixed
;   1.04, 02.06.17: positioning problem with drawing near borders fixed
;   1.05, 31.03.18: changed size of smaller brushes (1 and 4)
;   2.00, 29.12.20: added hotkeys for Size and Mode
;
; ------------------------------------------ 

	jmp start
	!by $20
	!by $00
	!by $00
	!wo modend
	!wo 0
	!pet "Draw Mask on pic"
	!pet "2.00"
	!pet "29.12.20"
	!pet "A. Dettke       "

; ------------------------------------------ 

	src		= $30	; /$31
	dst		= $32	; /$33
	dst0		= $34	; /$35
	linenr		= $36
	blcnt		= $37
	bcnt		= $38
	btcnt		= $39
	lcnt		= $3a
	xbuf		= $3b
	byte1		= $3c
	byte2		= $3d
	byte3		= $3e
	byte4		= $3f
	sprx		= $40	; /$41
	spry		= $42
	stoa		= $43
	bytev		= $44
	byteh		= $45

	offx		= $b2
	offy		= $b3
	lastkey 		= $c5	; current key

	commoflag 	= $028d
	spr11		= $02c0
	sprx0		= $d000
	spry0		= $d001
	x2		= $d004
	y2		= $d005
	sprxmsb		= $d010
	raster		= $d012	; used by delay
	spren		= $d015
	sprcolor		= $d027

; --------------------------------------- Main

start 	ldx sc_screenvek	; save current screenlist (mainlst)
	stx list
	ldx sc_screenvek+1
	stx list+1
	lda gr_redisp	; save current rendermode
	sta redisp
	lda sprcolor	; save current spritecolor
	sta mscol

	jsr showreq	; show requester
	jsr gd_eloop	; wait for clicks

; --------------------------------------- Event: Exit

evexit	sec		; leave module
	rts

; --------------------------------------- Event: Select size

evsize	ldx bsize		; Size 1..8
	inx
	cpx #8
	bcc es0
	ldx #0
es0	stx bsize
	jsr setbrush
	inx
	txa
	ora #$30
	sta sizet+1
	lda #10
	ldx #24
	ldy #2
	jsr gd_setpar
	jsr gd_initmove
	ldx #<sizet
	ldy #>sizet
	jmp gd_xtxout2

; ----------------------------------------- Event: Switch Draw Mode

evmode: 	ldx pmode		; Mode: Draw/Clear
	inx
	cpx #2
	bcc md0
	ldx #0
md0	stx pmode
	ldy drawoffs,x
	ldx #5
md1	lda drawtxt,y
	sta drawm,x
	dey
	dex
	bpl md1
	lda #12
	ldx #20
	ldy #6
	jsr gd_setpar
	jsr gd_initmove
	ldx #<drawm
	ldy #>drawm
	jmp gd_xtxout2

; ------------------------------------------ Event: Draw

ex1	jmp exit		; skip if not valid (not used in 1.04)

evdraw	jsr swapspr	; exchange mouse pointer with drawing brush
	lda #1		; switch off mouse shadow
	sta spren
	jsr view		; switch graphics on (returns .y=0)
	jsr switch	; set brush color

drloop	jsr draw		; wait for mouse moves (or STOP)
	ldx sc_stop
	bne ex1		; leave if STOP
	sty redisp	; .y=0

dr0	lda spry0		; Brush scanline minus 50 (to get graphics ordinate)
	cmp #251
	bcc dr3
	lda #250
	sta spry0
	lda #200		; ### 1.04
	sta spry

dr3	sec
	sbc #50
	sta spry		; store
	bcs goon
	lda #50
	sta spry0
	lda #0		; ### 1.04
	sta spry

goon	lda sprxmsb	; Brush x-position (hi)
	and #1
	sta sprx+1
	beq dr1
	lda sprx0		; ### 2.00 (too far to the right?)
	bpl +
	lda #68
	sta sprx0		; ### --
+	ldx bsize
	lda rightborder,x
	clc
	adc sprx0
	bmi drloop
	cmp #91
	bcc dr1
	lda #90
	sbc rightborder,x
	sta sprx0

dr1	lda sprx0		; and lo
	sec		; minus 24 (to get graphics ordinate)
	sbc #24
	sta sprx		; store
	bcs goon1
	dec sprx+1
	bpl goon1
	lda #0
	sta sprx+1
	sta sprx		; ### 1.04
	lda #24
	sta sprx0

goon1	and #7		; bit in byte
	sta stoa
	lda sprx		; offset in line
	and #$f8
	sta sprx

	lda spry		; y-position of brush
	sta linenr
	lda #0
	sta xbuf
	lda #21		; count 21 sprite scanlines
	sta lcnt

loop00	lda linenr	; compute bitmap address
	pha
	lsr
	lsr
	lsr
	tax
	pla
	and #$07
	clc
	adc line8lo,x
	tay
	lda line8,x
	pha

	tya
	clc
	adc sprx
	sta dst
	sta dst0
	pla
	adc sprx+1
	sta dst+1
	sta dst0+1

	ldx xbuf		; .x=0

	ldy #0
get0	lda (dst),y	; get bytes where brush was
	sta byte1,y	; buffer them
	clc
	lda dst
	adc #7		; next (don't change .y)
	sta dst
	bcc skp0
	inc dst+1
skp0	iny
	cpy #4
	bne get0

	ldy stoa		; save first and last byte
	beq get8
	lda byte1
	and maskv,y
	sta bytev
	lda byte4
	and maskh,y
	sta byteh

get2	asl byte4		; shift 4 bytes left to edge of brush
	rol byte3
	rol byte2
	rol byte1
	dey
	bne get2

get8	lda pmode		; which draw mode?
	bne get1

get6	lda spr11,x	; clear mode, so: merge brush reverted
	eor #$ff
	and byte1,y
	sta byte1,y
	inx
	iny
	cpy #3
	bne get6
	jmp get7

get1	lda spr11,x	; draw mode, so: just merge brush
	ora byte1,y
	sta byte1,y
	inx
	iny
	cpy #3
	bne get1

get7	ldy stoa		; shift 4 bytes back right to origin
	beq get3
get4	lsr byte1
	ror byte2
	ror byte3
	ror byte4
	dey
	bne get4
	lda byte1		; care for 1st and last one
	ora bytev
	sta byte1
	lda byte4
	ora byteh
	sta byte4
	
get3	lda dst0
	sta dst
	lda dst0+1
	sta dst+1
get5	lda byte1,y	; write back bytes to graphics
	sta (dst),y
	clc
	lda dst
	adc #7
	sta dst
	bcc skp1
	inc dst+1
skp1	iny
	cpy #4
	bne get5

	stx xbuf

	inc linenr	; next scanline
	lda linenr	; (not more than 199!)
	cmp #200
	beq exit
	dec lcnt		; next scanline of sprite (of 21)
	beq exit

	jmp loop00

exit	lda sc_stop
	bne finish
	jmp drloop

; ------------------------------------------ 

finish 	jsr swapspr	; restore mouse pointer
	lda #3		; switch on mouse shadow
	sta spren
	jsr rp2		; switch text mode on, display main screenlist
	lda redisp	; restore render mode
	sta gr_redisp
	lda mscol		; restore pointer color
	sta sprcolor

; --------------------------------------- Show Requester

showreq	ldx #<pmasklst	; display DrawMask requester
	ldy #>pmasklst
	jsr gd_screen
	clc
	rts

; ------------------------------------------ 

line8	!by $20,$21,$22,$23,$25
	!by $26,$27,$28,$2a,$2b
	!by $2c,$2d,$2f,$30,$31
	!by $32,$34,$35,$36,$37
	!by $39,$3a,$3b,$3c,$3e

line8lo	!by $00,$40,$80,$c0,$00
	!by $40,$80,$c0,$00,$40
	!by $80,$c0,$00,$40,$80
	!by $c0,$00,$40,$80,$c0
	!by $00,$40,$80,$c0,$00

maskv	!by $00,$80,$c0,$e0,$f0,$f8,$fc,$fe
maskh	!by $ff,$7f,$3f,$1f,$0f,$07,$03,$01

; ------------------------------------------ 

spr7	!by $01,$fc,$00,$07,$ff,$00,$0f,$ff,$80,$1f,$ff,$c0,$3f,$ff,$e0
	!by $7f,$ff,$f0,$7f,$ff,$f0,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8
	!by $ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$7f,$ff,$f0
	!by $7f,$ff,$f0,$3f,$ff,$e0,$1f,$ff,$c0,$0f,$ff,$80,$07,$ff,$00
	!by $01,$fc,$00

; ------------------------------------------ 

spr6	!by $03,$e0,$00,$0f,$f8,$00,$3f,$fe,$00,$3f,$fe,$00,$7f,$ff,$00
	!by $7f,$ff,$00,$ff,$ff,$80,$ff,$ff,$80,$ff,$ff,$80,$ff,$ff,$80
	!by $ff,$ff,$80,$7f,$ff,$00,$7f,$ff,$00,$3f,$fe,$00,$3f,$fe,$00
	!by $0f,$f8,$00,$03,$e0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00

; ------------------------------------------ 

spr5	!by $07,$80,$00,$1f,$e0,$00,$3f,$f0,$00,$7f,$f8,$00,$7f,$f8,$00
	!by $ff,$fc,$00,$ff,$fc,$00,$ff,$fc,$00,$ff,$fc,$00,$7f,$f8,$00
	!by $7f,$f8,$00,$3f,$f0,$00,$1f,$e0,$00,$07,$80,$00,$00,$00,$00
	!by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00

; ------------------------------------------ 

spr4	!by $0e,$00,$00,$3f,$80,$00,$7f,$c0,$00,$7f,$c0,$00,$ff,$e0,$00
	!by $ff,$e0,$00,$ff,$e0,$00,$7f,$c0,$00,$7f,$c0,$00,$3f,$80,$00
	!by $0e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00

; ------------------------------------------ 

spr3	!by $3c,$00,$00,$7e,$00,$00,$ff,$00,$00,$ff,$00,$00,$ff,$00,$00
	!by $ff,$00,$00,$7e,$00,$00,$3c,$00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00

; ------------------------------------------ 

spr2	!by $70,$00,$00,$f8,$00,$00,$f8,$00,$00,$f8,$00,$00,$70,$00,$00
	!by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00

; ------------------------------------------ 

spr1	!by $e0,$00,$00,$e0,$00,$00,$e0,$00,$00,$00,$00,$00,$00,$00,$00	; 3 by 3 pixels
	!by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00

; ------------------------------------------ 

spr0	!by $c0,$00,$00,$c0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	; 2 by 2 pixels
	!by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00

; ------------------------------------------ 

spr	!by $01,$fc,$00,$07,$ff,$00,$0f,$ff,$80,$1f,$ff,$c0,$3f,$ff,$e0
	!by $7f,$ff,$f0,$7f,$ff,$f0,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8
	!by $ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$7f,$ff,$f0
	!by $7f,$ff,$f0,$3f,$ff,$e0,$1f,$ff,$c0,$0f,$ff,$80,$07,$ff,$00
	!by $01,$fc,$00

; ------------------------------------------ 

list	!wo 0
redisp 	!by 0
pmode	!by 1		; mode: 1=draw 0=clear
drawoffs	!by 5,11
drawtxt	!scr "Clear  Draw "
brushcols	!by 13,10		; lgreen, lred
mscol	!by 1		; white
bsize	!by 7		; start with biggest brush
rightborder !by 3,5,7,10,13,16,19,23
sprofflo	!by <spr0,<spr1,<spr2,<spr3,<spr4,<spr5,<spr6,<spr7
sproffhi	!by >spr0,>spr1,>spr2,>spr3,>spr4,>spr5,>spr6,>spr7
keys	!by 56,59,8,11,16,19,24,27	; ### 2.00

; ------------------------------------------ Move Brush

draw	lda #0
	sta sc_keyprs
	sta sc_stop
	sta commoflag	; ### 2.00
kl	lda sc_stop
	ora sc_keyprs	; wait for key
	ora commoflag 	; CBM key? (=2) ### 2.00
	beq kl

; ------------------------------------------ Scan Keyboard

	lda commoflag 	; check for CBM/Shift #	### 2.00 --
	beq ok		; no, other key, leave
	and #3
	cmp #1		; Shift? (left mouse button)
	beq ok

	lda lastkey 	; no, CBM, so check:
	cmp #36		; key "m" (Mode)?
	bne +
	jsr evmode	; yes, switch mode (returns .c=0)
	jsr repair
	jsr tdelay	; Tastatur entprellen
	jsr switch	; Farbe setzen
	bcc draw

+	ldx #0		; key "1..8"? (Size)
-	cmp keys,x
	beq +
	inx
	cpx #8
	bcc -
	bcs draw

+	stx stoa
	jsr tdelay	; Tastatur entprellen
	jsr swapspr	; recall system pointer
	ldx stoa
	jsr es0		; set new size
	jsr repair
	jsr swapspr	; and activate sprite
	bmi draw

ok	ldy #0
	rts

; ------------------------------------------ Set Brush Color

switch	ldx pmode		; set brush color according to drawmode
	lda brushcols,x
	sta sprcolor
	rts		; ### --

; ------------------------------------------ Exchange System Pointer with Draw Sprite

swapspr	ldy #62
ssl	ldx spr11,y
	lda spr,y
	sta spr11,y
	txa
	sta spr,y
	dey
	bpl ssl
	rts

; --------------------------------------- Set new brush

setbrush	lda sprofflo,x
	sta src
	lda sproffhi,x
	sta src+1
	ldy #62
sb0	lda (src),y
	sta spr,y
	dey
	bpl sb0
	rts

; ------------------------------------------ Tastaturentprellung

tdelay:	ldx #32		; ### 2.00 --
td1	lda raster
	cmp #64
	bne td1
	dex
	bne td1
	rts

; ------------------------------------------ Repair Color Screen

repair	lda redis+3	; take color ($f0)
	sta $05a8
	sta $05a9
	ldx #5
-	sta $05f4,x
	dex
	bpl -
	rts		; ### --

; ------------------------------------------ Redisplay routines

; ------------------------------------------ Switch Graphics/Text

view:	ldx #1
	stx gr_redisp

redis:	ldy #251
	lda #$f0		; ink: lgrey, paper: black
red0	sta $03ff,y
	sta $04f9,y
	sta $05f3,y
	sta $06ed,y
	dey
	bne red0
rp4:	lda #$1b		; hires graphics on
	sta $d018
	lda #$3b
	sta $d011
	lda gr_redisp 	; leave if flag set
	bne rp3

rp2:	jsr tmode
	ldx list
	ldy list+1
	jsr gd_screen
rp3:	clc
	rts

tmode:	ldx #$13		; back to text mode (graphics off)
	lda #$1b
	stx $d018
	sta $d011
	lda #$08
	sta $d016
	rts

; --------------------------------------- Screenlist 

pmasklst	!by 0
	!by 7,13,14,11,$81,0,0
	!scr "DrawMask",0
sizeg	!by 9,23,4,3,$cf
	!wo evsize
sizet	!scr " 8",0
	!by 11,19,8,3,$ce
	!wo evmode
drawm	!scr " Draw ",0
	!by 13,13,14,3,$cb
	!wo evdraw
	!scr " Draw Mask  ",0
	!by 15,13,14,3,$cb
	!wo evexit
	!scr "Leave",0
	!by $c0,9,13,9
	!scr "Brushsize",0
	!by $c0,11,13,4
	!scr "Mode",0
	!by $80

; --------------------------------------- 

modend	!eof
