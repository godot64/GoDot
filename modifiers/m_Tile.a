
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; --------------------------------------
;
;     mod.Halve
;       Modifier to scale the whole screen down to
;       one quarter (half width, half height: 160x100)
;       and write it back four times to each quarter
;       of the screen
;
;     1.00, 30.10.93, first release
;     1.01, 22.03.18, added: optional restriction to only one quarter
;     1.02, 23.11.20, added: forced re-render in full screen
;     1.03, 14.01.24, renamed from mod.Tile to mod.Halve
;
; -------------------------------------- 

	jmp start
	!by $20
	!by $00,$00
	!wo modend
	!by $00,$00
	!tx "Quarter & Tile  "
	!tx "1.03"
	!tx "14.01.24"
	!tx "W.Kling/A.Dettke"

; -------------------------------------- Equates

	adcnt	= $30
	src	= $35
	dst	= $37
	colnr	= $39
	linenr	= $39
	blcnt	= $3b
	bbuf	= $3d
	ybuf	= $3e
	dstq	= $3f
	vdst	= $40
	hdst	= $40
	null	= $41
	which	= $42

	sprptr	= $07f8
	areatype	= $1ef5
	spr255	= $3fc0

	sprx2	= spritex+2
	spry2	= sprx2+1
	spren	= $d015
	sprxe	= $d01d
	sprcol2	= $d029

	xbuf0	= $c800
	xbuf1	= $ca00
	ybuf0	= $cb00
	ybuf1	= $cc00


; -------------------------------------- Main

start	jsr makech	; Make Kringel
	ldx #<tlst	; Requester
	ldy #>tlst
	jsr gd_screen
	lda #$6e
	sta $05ac
	sta $0674
	jmp gd_eloop	; Wait

; -------------------------------------- Event: Execute Tile

sevexec	jsr vhv		; squeeze vertically
	jsr hhv		; squeeze horizontally

	jsr clearad	; reset activity
	lda #$ff		; data have changed
	sta gr_redisp
	jsr forcefull

; -------------------------------------- Event: Leave Modifier

sevcan	sec 		; leave
	rts 

; -------------------------------------- Event: Set Mode (Color/Gray)

sevcolgr	lda colflag	; Toggle Flag ($ff/$00)
	bmi crt0
	lda #$fe
	sta colflag
crt0	inc colflag
	beq crt1

	lda tflag		; set renderflag accordingly
	and #$bf
	sta tflag
	ldx #14
	bne crt2

crt1	lda tflag
	ora #$40
	sta tflag

	ldx #29		; change text display
crt2	ldy #14
crt3	lda whichcol,x
	sta coltx,y
	dex 
	dey 
	bpl crt3
	ldy #2
	bne mrt4

; -------------------------------------- Event: Mirror on/off

sevtmirr	lda mirflag	; Toggle Flag ($ff/$00/$01)
	cmp #1
	bne mrt0
	lda #$fe
	sta mirflag	; set renderflag (tflag) accordingly
mrt0	inc mirflag
	beq mrt1
	bmi mrt6

	lda #0		; mirflag $01: no mirror, no fill (tflag $00)
	sta tflag		; ("Tile")
	ldx #14
	bne mrt2

mrt6	ldx #29		; mirflag $ff: inactive (tflag $01)
mrt5	lda tflag		; ("Tile & Fill")
	and #$7f
	ora #1
	sta tflag
	txa
	bne mrt2

mrt1	lda tflag		; mirflag $00: active (tflag $81)
	and #$7e
	ora #$81		; ("Tile & Mirror")
	sta tflag

	ldx #44		; change text display
mrt2	ldy #14
mrt3	lda whichmirr,x
	sta mirrtx,y
	dex 
	dey 
	bpl mrt3
	ldy #0
mrt4	jsr settab
	jsr gettab
	ldy #6
	jmp gd_xtxout1

; -------------------------------------- Perform vertical squeeze

vhv	lda #8		; set activity counter
	jsr initad
	ldy #0		; clear buffer
	tya 
vclrlp	sta ybuf1,y
	iny 
	bne vclrlp

	lda #$00		; retrieve one *vertical* pixel line
	sta colnr		; compute # of column (halve)
	sta colnr+1

vloop00	lda colnr+1
	lsr 
	sta src+1

	lda colnr		; line odd or even?
	ror 
	bcs odd0
	ldx #$0f
	!by $2c
odd0	ldx #$f0		; set mask accordingly
	stx which

	tax 		; compute address in 4bit
	and #$03
	sta src
	txa 
	and #$fc
	asl 
	rol src+1
	asl 
	rol src+1
	asl 
	rol src+1
	ora src
	sta src
	lda src+1
	ora #>sy_4bit
	sta src+1

	ldx #0
	stx null
vloop0	ldy #0
vloop1	lda (src),y	; linkes Pixel holen (ungerade Linie)
	bit which
	bvs odd1
	lsr  		; nach unten shiften
	lsr 
	lsr 
	lsr 

odd1	and #$0f		; rechtes Pixel holen (gerade Linie)
	sta ybuf0,x	; Pixel hintereinander in den Puffer schreiben
	beq nuls0
	ora null		; ### 1.01, wenn NULL $00 bleibt, ist die Linie leer gewesen
	sta null
nuls0	inx 		; vorrücken im Puffer
	iny		; Pixel darunter ansteuern
	iny 
	iny 
	iny 
	cpy #32		; eine Kachel durch
	bcc vloop1

	lda src+1		; nächste Kachel darunter ansteuern
	clc 
	adc #>(1280)
	sta src+1
	cmp #$bd		; bis alle 25 durch
	bcc vloop0

	lda null		; Linie leer?
	bne vvv
	jmp nextcol	; dann gleich nächste Linie

vvv	bit tflag		; Modus checken
	bvc color1	; Color?

	ldy #0		; nein, Gray
	ldx #0		; 200 Pixel zählen
vhln0	lda ybuf0,x	; zwei untereinander addieren,
	inx 
	clc 
	adc ybuf0,x
	lsr 		; halbieren (Mittelwert bilden)
	sty ybuf
	sta ybuf1,y	; und puffern
	tay
	lda tflag
	and #1
	beq +
	tya
+	ldy ybuf
	sta ybuf1+100,y	; ebenso im dritten Quadranten
	iny 
	inx 
	cpx #200
	bne vhln0
	beq next0		; dann Color überspringen

color1	ldy #0
	ldx #0		; 200 Pixel zählen
vhl	lda ybuf0,x	; zwei Pixel untereinander verknüpfen
	inx 
	asl 
	asl 
	asl 
	asl 
	ora ybuf0,x
	sty ybuf		; .y retten
	tay 		; und den Wert als Index in Farbtabelle nehmen
	lda coltab,y
	ldy ybuf		; .y zurück
	sta ybuf1,y	; Ergebnis puffern
	tay
	lda tflag
	and #1
	beq +
	tya
+	ldy ybuf
	sta ybuf1+100,y	; ebenso im dritten Quadranten
	iny 
	inx 
	cpx #200		; bis alle durch
	bne vhl

next0	bit tflag		; dann: Mirror?
	bpl nomirr

	ldx #0		; ja, beide Quadranten spiegeln
	ldy #99
vml	lda ybuf1,x
	sta ybuf1+100,y
	dey 
	inx 
	cpx #100
	bne vml

nomirr	lda colnr+1	; nein, dann Linie zurückschreiben:
	lsr 
	sta dst+1
	lda colnr		; gerade/ungerade?
	ror 
	bcs odd2
	ldx #$0f
	!by $2c
odd2	ldx #$f0
	stx which

	tax 		; Adresse im 4Bit
	and #$03
	sta dst
	txa 
	and #$fc
	asl 
	rol dst+1
	asl 
	rol dst+1
	asl 
	rol dst+1
	ora dst
	sta dst
	lda dst+1
	ora #>sy_4bit
	sta dst+1

	ldx #0
vloop2	ldy #0		; übertragen (aus Puffer nach 4Bit)
vloop3	lda ybuf1,x
	bit which
	bvs odd3
	asl 
	asl 
	asl 
	asl 
odd3	sta bbuf
	lda (dst),y
	and which
	ora bbuf
	sta (dst),y
	inx 
	iny 
	iny 
	iny 
	iny 
	cpy #32
	bcc vloop3
	lda dst+1
	clc 
	adc #>(1280)
	sta dst+1
	cmp #$bd
	bcc vloop2

nextcol	inc colnr		; nächste senkrechte Linie
	bne vskip0
	inc colnr+1
vskip0	lda colnr		; alle 320 durch?
	cmp #<(320)
	bne vskip1
	lda colnr+1
	bne vok

vskip1	dec adcnt		; nein: Activity nach jeder Linie
	bne vadskp
	inc spry2
	inc spry2+2
	lda #8
	sta adcnt
vadskp	jmp vloop00	; und von vorn

vok	rts 

; -------------------------------------- Perform horizontal squeeze

hhv	lda #5		; neuer Activity-Counter
	jsr initad

	ldy #0		; Puffer löschen
	tya 
hclrlp	sta xbuf1,y
	sta xbuf1+256,y
	iny 
	bne hclrlp

	sty linenr	; Liniennummer (waagerechte Pixellinie)
hloop00	lda linenr
	pha 
	lsr 
	lsr 
	lsr 
	tax 
	pla 
	and #$07
	asl 
	asl 
	sta dst
	lda line8,x
	sta dst+1

	lda #<xbuf0
	ldx #>xbuf0
	sta src
	stx src+1
	ldx #0
	stx null

	lda #40		; 40 Kacheln
	sta blcnt
hloop0	ldy #0
hloop1	lda (dst),y	; zwei Pixel holen
	pha 
	beq nuls1
	ora null		; ### 1.01
	sta null
nuls1	pla
	pha
	lsr 		; linkes nach unten shiften
	lsr 
	lsr 
	lsr 
	sta (src,x)	; und puffern
	inc src
	bne hskip0
	inc src+1
hskip0	pla 		; rechtes ebenfalls
	and #$0f
	sta (src,x)	; puffern
	inc src
	bne hskip1
	inc src+1
hskip1	iny 		; 8 Pixel (eine Kachellinie)
	cpy #4
	bne hloop1

	lda dst		; dann nächste Kachel
	clc 
	adc #32
	sta dst
	bcc hskip2
	inc dst+1
hskip2	dec blcnt		; bis 40 Kacheln durch
	bne hloop0

	lda null		; Linie leer?
	bne xdoit
	jmp nextline	; dann gleich nächste Linie

xdoit	lda #<xbuf0
	ldx #>xbuf0
	sta src
	stx src+1

	bit tflag		; Modus checken?
	bvc color2	; Color?

	ldx #0
	ldy #0		; nein, Gray: Mittelwert bilden
xloop2n	lda (src,x)
	inc src
	bne xskip1n
	inc src+1
xskip1n	clc 
	adc (src,x)
	lsr 
	inc src
	bne xskip2n
	inc src+1
xskip2n	sty ybuf
	sta xbuf1,y	; und puffern
	tay
	lda tflag
	and #1
	beq +
	tya
+	ldy ybuf
	sta xbuf1+160,y	; ebenso im zweiten Quadranten
	iny 
	cpy #160
	bne xloop2n
	beq next1

color2	ldx #0		; ja, Color: Mischfarbe finden
	ldy #0
xloop2	lda (src,x)
	inc src
	bne xskip1
	inc src+1
xskip1	asl 
	asl 
	asl 
	asl 
	ora (src,x)
	tax 
	lda coltab,x	; aus der Farbtabelle heraus
	ldx #0
	inc src
	bne xskip2
	inc src+1
xskip2	sty ybuf
	sta xbuf1,y	; und puffern
	tay
	lda tflag
	and #1
	beq +
	tya
+	ldy ybuf
	sta xbuf1+160,y
	iny 
	cpy #160
	bne xloop2

next1	bit tflag		; Mirror?
	bpl nomirr2

	ldx #0		; ja, dann Puffer spiegeln
	ldy #159
hml	lda xbuf1,x
	sta xbuf1+160,y
	dey 
	inx 
	cpx #160
	bne hml

nomirr2	lda linenr	; nein, Linie zurückschreiben nach 4Bit
	pha 
	lsr 
	lsr 
	lsr 
	tax 
	pla 
	and #$07
	asl 
	asl 
	sta dst
	lda line8,x
	sta dst+1

	lda #<(xbuf1)
	ldx #>(xbuf1)
	sta src
	stx src+1

	ldx #0
	lda #40		; 40 Kacheln
	sta blcnt
hloop2	ldy #0
hloop3	lda (src,x)	; Pixel verknüpfen
	asl 
	asl 
	asl 
	asl 
	inc src
	bne hskip3
	inc src+1
hskip3	ora (src,x)
	inc src
	bne hskip4
	inc src+1
hskip4	sta (dst),y	; zurückschreiben
	iny 
	cpy #4		; eine Kachel
	bne hloop3

	lda dst		; nächste Kachel
	clc 
	adc #32
	sta dst
	bcc hskip5
	inc dst+1
hskip5	dec blcnt		; 40 mal
	bne hloop2

nextline	inc linenr	; nächste waagerechte Pixellinie
	lda linenr
	cmp #200		; bis 200 durch
	beq hok

	dec adcnt		; Activity nach jeder Linie
	bne adskp
	inc spry2
	inc spry2+2
	lda #5
	sta adcnt
adskp	jmp hloop00	; und von vorn

hok	rts 

; -------------------------------------- Text Output Handler

tabigad	!wo mirror
	!wo color

settab	lda #<(tabigad)
	sta sc_texttab
	lda #>(tabigad)
	sta sc_texttab+1
	rts 

gettab	lda (sc_texttab),y
	sta sc_screentab
	iny 
	lda (sc_texttab),y
	sta sc_screentab+1
	lda #0
	tax 
	tay 
gt0	jsr gd_setpos
	cpx #3
	bne gt0
	stx sc_ho
	jsr gd_trim
	jmp gd_initmove

; --------------------------------------- Force Full Render Area

forcefull	ldx #3
ar1	lda atype,x
	sta areatype,x
	dex
	bpl ar1
	inx
	stx sc_clipped		; set Clip to Full
	rts

; -------------------------------------- Make Kringel

makech	ldx #7
mc0	lda char,x
	sta sc_undochar,x
	dex 
	bpl mc0
	rts 

; -------------------------------------- Screenlist

tlst	!by 0
	!by 6,12,17,13,$81,0,0
	!scr "Halve the Edges",0
mirror	!by 8,12,17,3,$ca
	!wo sevtmirr
mirrtx	!by 223
	!scr "    Halve     ",0
color	!by 10,12,17,3,$ca
	!wo sevcolgr
coltx	!by 223
	!scr "    Color     ",0
	!by 13,12,17,3,$da
	!wo sevexec
	!scr "    Execute    ",0
	!by 15,12,17,3,$ca
	!wo sevcan
	!scr "     Leave     ",0
	!by $80

; -------------------------------------- 

whichmirr	!by 223
	!scr "    Halve     "
	!by 223
	!scr " Halve & Fill "
	!by 223
	!scr "Halve & Mirror"
whichcol	!by 223
	!scr "    Color     "
	!by 223
	!scr "    Gray      "

atype	!scr "Full"

char	!by $00,$5c,$62,$72,$02,$02,$3c,$00

line8	!by $40,$45,$4a,$4f,$54
	!by $59,$5e,$63,$68,$6d
	!by $72,$77,$7c,$81,$86
	!by $8b,$90,$95,$9a,$9f
	!by $a4,$a9,$ae,$b3,$b8

; -------------------------------------- 

coltab	!by $00,$00,$00,$00,$02,$03,$02,$03
	!by $03,$03,$03,$03,$03,$03,$03,$07
	!by $00,$01,$03,$01,$03,$01,$03,$03
	!by $08,$05,$03,$07,$08,$07,$07,$08
	!by $00,$02,$02,$02,$04,$03,$02,$03
	!by $07,$06,$03,$07,$07,$06,$0a,$07
	!by $00,$01,$02,$03,$02,$03,$02,$03
	!by $07,$07,$03,$07,$07,$07,$0a,$07
	!by $02,$05,$04,$02,$04,$04,$04,$03
	!by $05,$06,$03,$07,$07,$06,$03,$09
	!by $03,$01,$04,$03,$04,$05,$04,$05
	!by $08,$05,$07,$07,$08,$09,$03,$09
	!by $02,$02,$02,$02,$04,$04,$06,$06
	!by $07,$09,$06,$09,$07,$09,$0a,$09
	!by $03,$03,$03,$03,$03,$05,$06,$07
	!by $08,$09,$07,$07,$0b,$0b,$0e,$0b
	!by $03,$08,$05,$07,$05,$08,$07,$08
	!by $08,$09,$07,$08,$0c,$0b,$0b,$0b
	!by $03,$05,$06,$07,$06,$05,$09,$09
	!by $09,$09,$07,$0b,$0b,$09,$0b,$0b
	!by $03,$01,$0a,$03,$02,$01,$06,$07
	!by $08,$0b,$0a,$0e,$0e,$0e,$0a,$0b
	!by $03,$07,$07,$07,$07,$07,$09,$07
	!by $08,$0b,$0e,$0b,$0b,$0d,$0b,$0f
	!by $03,$08,$0e,$07,$07,$08,$0e,$0b
	!by $0c,$0b,$0e,$0b,$0c,$0b,$0e,$0f
	!by $03,$07,$06,$07,$06,$09,$09,$0b
	!by $0b,$09,$0e,$0d,$0b,$0d,$0e,$0f
	!by $03,$01,$0a,$0a,$02,$05,$0a,$0e
	!by $0c,$0b,$0a,$0b,$0e,$0e,$0e,$0b
	!by $07,$08,$07,$07,$09,$09,$09,$0b
	!by $0b,$0b,$0b,$0f,$0f,$0f,$0b,$0f

tflag	!by 0
mirflag	!by 1
colflag	!by $ff

; -------------------------------------- 


;   sprite activity display

clearad	lda spren
	and #243
	sta spren
	lda spritehi
	and #243
	sta spritehi
	rts 

initad	sta adcnt
	ldy #60
	lda #0
adl0	sta spr255+3,y
	dey 
	bpl adl0
	sty spr255
	sty spr255+1
	sty spr255+2
	lda #15
	sta sprcol2
	sta sprcol2+1
	lda sprxe
	ora #12
	sta sprxe
	lda spritehi
	ora #12
	sta spritehi
	lda #8
	sta sprx2
	lda #32
	sta sprx2+2

	lda #146
	sta spry2
	sta spry2+2
	sty sprptr+2
	sty sprptr+3
	lda spren
	ora #12
	sta spren
	rts 

; -------------------------------------- 

modend	!eof 
