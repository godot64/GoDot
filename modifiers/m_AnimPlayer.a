
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ------------------------------------------------     
;
; mod.AnimPlayer
;  Module to play a GoDot Full Screen Animation 
;
;   0.99, 10.04.95, first ever release
;   1.00, 06.09.18, first running release
;   1.01, 27.08.19, added sychronisation of dma to rasterbeam
;   1.02, 30.08.19, added double buffering
;   1.03, 31.08.19, added undo of 4bit
;   1.04, 04.04.22, code revised for better convenience with device
;
; ------------------------------------------------ 

; ------------------------------------------------ Equates

	passes		= $30
	mehrfach		= $31
	evenodd		= $32
	running		= $33

	cram		= sy_4bit
	cram0		= cram
	bkgr0		= cram0+1000
	cram1		= cram0+$4000
	bkgr1		= bkgr0+$4000
	records		= cram+$800

	grafreg		= $d011
	multreg		= $d016
	charreg		= $d018
	rahmen		= $d020
	backgr		= $d021
	coloram		= $d800
	vicbank		= $dd00

; ------------------------------------------------ 

	jmp start
	!by $20
	!wo 0
	!wo modend
	!wo 0
	!tx "Animator        "
	!tx "1.04"
	!tx "04.04.22"
	!tx "A.Dettke        "

; ------------------------------------------------ 

start	jsr chk4anim	; Anim vorhanden? (kehrt nicht zurück, wenn nicht)
	iny
	sty running

	lda gd_modswitch
	sta mswitch

	jsr doundo
	jsr gd_sproff	; Maus aus
	lda #$18		; grafik an
	sta multreg
	lda #$1b
	sta charreg
	lda #$3b
	sta grafreg
	lda #3		; VIC-Bank 0 aktivieren
	sta vicbank

loop	lda #<records	; Vorbereitungen: 
	sta recs1+1	; records auf anfang
	sta recs2+1
	lda #>records
	sta recs1+2
	sta recs2+2

	ldx frames
	stx passes
	jsr buildtab

	ldx gr_howmany	; Speed: normal 16 (gr_howmany ist Speed-Regler)
	dex 
	stx sc_pos
	lda #0
	sta sc_stop
	sta evenodd
	sta sc_pos+1
	jsr gd_mal5	; howmany mal 5
	lda sc_pos
	sta mehrfach

	bit running
	bmi display
	jsr getimage	; bild beim ersten mal doppelt holen
	jsr change
	lda bkgr0
	sta backgr

display	lda evenodd	; vic flag toggeln
	eor #1
	sta evenodd
	bne +
	lda #3		; vic 0
	!by $2c
+	lda #2		; vic 1
	sta vicbank

	jsr getimage	; bild laden

	ldx mehrfach	; kurz warten
	jsr gd_dl2	; (slow down speed)
	dec passes	; frames herunterzählen
	beq +		; null?

	clc 
	lda recs2+1
	adc #21		; nein, nächstes bild
	sta recs2+1
	bcc display
	inc recs2+2
	bcs display

+	jsr restore	; am ende: zurück auf start
	sty running
	lda sc_stop	; STOP gedrückt?
	bne leave
	jmp loop		; nein, von vorn

; ------------------------------------------------ 

leave	ldx #$13		; ja, grafik aus
	lda #$1b
	stx charreg
	sta grafreg
	lda #$08
	sta multreg
	lda #3		; vic 0
	sta vicbank
	lda sc_maincolor	; GoDot farben
	sta rahmen
	sta backgr
	jsr getundo
	jsr gd_spron	; Maus an
	lda mswitch
	sta gd_modswitch
	sec 		; ende
	rts 

; ------------------------------------------------ 

getimage	jsr setimgdta	; startrecord setzen (von records holen)

	ldy #6		; bitmap (nach $2000/$4000)
-	lda recbmap,y
	sta rm_werte,y
	dey 
	bpl -
	lda #$91		; DMA auslösen (holen)
	jsr gd_reu

	ldy #6		; video ram (nach $0400/$4400)
-	lda recvram,y
	sta rm_werte,y
	dey 
	bpl -
	lda #$91		; DMA auslösen (holen)
	jsr gd_reu

	ldy #6		; color ram + bg (nach $4000/$6000)
-	lda reccram,y
	sta rm_werte,y
	dey 
	bpl -
	lda #$91		; DMA auslösen (holen)
	jsr gd_reu

	ldx evenodd	; Colorram eintragen
	bne setcram1

; ------------------------------------------------ 

setcram0	lda bkgr0		; background color bank 0
	sta backgr
-	iny 		; .y was $ff
	lda cram0,y	; 4 viertel (250)
	sta coloram,y	; color ram füllen
	lda cram0+250,y
	sta coloram+250,y
	lda cram0+500,y
	sta coloram+500,y
	lda cram0+750,y
	sta coloram+750,y
	cpy #250
	bne -
	lda #$20		; prepare double buffering
	sta recbmap+1
	lda #$04
	sta recbmap+8
	lda #$40
	sta recbmap+15
	rts

setcram1	lda bkgr1		; background color bank 1
	sta backgr
-	iny 		; .y was $ff
	lda cram1,y	; 4 viertel (250)
	sta coloram,y	; color ram füllen
	lda cram1+250,y
	sta coloram+250,y
	lda cram1+500,y
	sta coloram+500,y
	lda cram1+750,y
	sta coloram+750,y
	cpy #250
	bne -
change	lda #$60
	sta recbmap+1
	lda #$44
	sta recbmap+8
	lda #$80
	sta recbmap+15
	rts

; ------------------------------------------------ 

setimgdta	ldy #20
recs2	lda records,y
	sta recbmap,y
	dey 
	bpl recs2
	rts 

; ------------------------------------------------ Playertabelle aufbauen

buildtab	ldx #0		; Framecounter
again	ldy #20
-	lda recdata,y	; aktueller Frame
recs1	sta records,y
	dey 
	bpl -

	clc 		; nächster Frame:
	lda recdata+2	; bitmap
	adc #<10001	; 10001 weiter
	sta recdata+2
	lda recdata+3
	adc #>10001
	sta recdata+3
	bcc +
	inc recdata+4

+	clc 
	lda recdata+9	; vram
	adc #<10001	; 10001 weiter
	sta recdata+9
	lda recdata+10
	adc #>10001
	sta recdata+10
	bcc +
	inc recdata+11

+	clc 
	lda recdata+16	; cram
	adc #<10001	; 10001 weiter
	sta recdata+16
	lda recdata+17
	adc #>10001
	sta recdata+17
	bcc +
	inc recdata+18

+	clc 
	lda recs1+1	; nächster record
	adc #21		; 21 weiter
	sta recs1+1
	bcc +
	inc recs1+2
+	inx 		; .x mal wiederholen
	txa
	and #1
	bne +
	lda #$20		; prepare double buffering
	sta recdata+1
	lda #$04
	sta recdata+8
	lda #$40
	sta recdata+15
	bne ++
+	lda #$60
	sta recdata+1
	lda #$44
	sta recdata+8
	lda #$80
	sta recdata+15
++	cpx frames
	beq restore
	jmp again

; ------------------------------------------------ 

restore	ldy #20		; dann zurücksetzen
-	lda recback,y
	sta recdata,y
	dey 
	bpl -
	rts 

; ----------------------------------------------------- Blink the Border

graphon	lda rahmen	; save border color
	pha
	sty rahmen	; set new color (in .y, e.g. "2" for red)
	ldx #$40
	jsr gd_dl2	; delay
	pla
	sta rahmen	; reset old border color
	stx sy_tbuffer	; clear key strokes
stay	clc
	rts

; ------------------------------------------------ Keine Animation vorhanden

fail1	pla
	pla
	ldy #2		; rot
	jsr graphon	; blink
	sec
	rts

; ------------------------------------------------ Vorbereitungen

chk4anim	ldy #6
-	lda control,y
	sta rm_werte,y
	dey
	bpl -
	lda #$91		; $91: Fetch
	jsr gd_reu
	lda frames+3	; frame record already filled?
	cmp #$20
	bcs fail1		; no, no anim in reu, leave mod

	ldy #2
-	lda ctrlrec,y	; get start (bmap)
	sta recdata+2,y
	sta recdata+9,y
	sta recdata+16,y
	dey
	bpl -
	clc
	lda ctrlrec	; add 8000 for vram
	adc #<8000
	sta recdata+9
	lda ctrlrec+1
	adc #>8000
	sta recdata+10
	bcc +
	inc recdata+11
+	clc
	lda recdata+9	; add 1000 for cram
	adc #<1000
	sta recdata+16
	lda recdata+10
	adc #>1000
	sta recdata+17
	bcc store
	inc recdata+18

store	ldy #20		; zuerst sichern
-	lda recdata,y
	sta recback,y
	dey 
	bpl -
	rts 

; ------------------------------------------------ 

doundo	jsr setundo	; set parameters
	lda ls_flen	; save ls_flen
	pha

	ldx #setundo-stst	; perform Undo 4Bit
sts1	lda stst,x
	sta sy_global,x
	dex
	bpl sts1
	jsr sy_global

	pla
	sta ls_flen
	rts

; ------------------------------------------------ 

stst	jsr gd_swapd	; REU einblenden

	iny		; .y=0
	sty rm_werte
	sty rm_werte+4
	sty rm_werte+2
	lda #$10		; address "Undo 4Bit"
	sta rm_werte+3
	ldx #9		; save 4Bit to REU (perform Undo 4Bit)
	jsr rm_ramvec
	jmp gd_swapd	; REU ausblenden

; ------------------------------------------------ 

setundo	ldx #1		; set index to Undo 4Bit
	stx rm_nextentry
	lda rm_ramundo	; set Flag for Undo 4Bit
	and #$fe
	ora #1
	sta rm_ramundo
	rts

; ------------------------------------------------ 

getundo	jsr setundo	; set parameters

	ldx #mswitch-gtud	; transfer routine
gu0	lda gtud,x
	sta sy_global,x
	dex
	bpl gu0
	jmp sy_global	; and perform

; ------------------------------------------------ 

gtud	jsr gd_swapd	; switch REU on
	iny
	sty rm_werte	; set parameters for Undo 4bit
	sty rm_werte+4
	sty rm_werte+2
	lda #$10
	sta rm_werte+3
	ldx #8		; load Undo 4Bit to C64
	jsr rm_ramvec
	jmp gd_swapd	; switch REU off

; ------------------------------------------------ Data

mswitch	!by 0

frames	!by 0
ctrlrec	!by 0,0,0

; ------------------------------------------------ Player Records

recback	!fill 21				; allererster Record

recdata	!by $00,$20,$00,$00,$04,$40,$1f	; nach bank 4: (Dummy-Einträge)
	!by $00,$04,$40,$1f,$04,$e8,$03
	!by $00,$40,$28,$23,$04,$e9,$03

recbmap	!by $00,$20,$00,$00,$04,$40,$1f	; bitmap    (8000)
recvram	!by $00,$04,$40,$1f,$04,$e8,$03	; video ram (1000)
reccram	!by $00,$40,$28,$23,$04,$e9,$03	; color ram (1001)

control	!wo frames			; nach: frames
	!wo 14				; von REU: Byte 14
	!by 0				; Bank 0
	!wo 4				; 4 Bytes

; ------------------------------------------------ 

modend	!eof

