
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; --------------------------------------
;
; mod.MakeHires
;   Module to render hires from any image data
;
; 1.00, 11.06.19, first release
;
; --------------------------------------


; -------------------------------------- Equates

	adcnt		= $30
	src		= $31	; /$32
	find		= $33	; /$34
	vram		= $35	; /$36
	xbuf		= $37
	cols		= $38
	bbuf		= $39
	col00		= $3a	; ..$3d
	bkgr		= $3e
	frgr		= $3f
	majorcol		= $40
	max		= $41

	sprptr		= $07f8
	spr255		= $3fc0

	hist0		= $c9d0
	hist1		= hist0+16
	colors		= $ca00
	
	spr2x		= $d004
	spr2y		= $d005
	msbx		= $d010
	spren		= $d015
	sprxe		= $d01d
	border		= $d020
	sprcol2		= $d029

; -------------------------------------- Header

	jmp start

	!by $20
	!by 0
	!by 0
	!wo modend
	!wo 0
	!pet "Convert to Hires"
	!pet "1.00"
	!pet "11.06.19"
	!pet "A.Dettke        "

; -------------------------------------- Main

start	jsr initad
	jsr getcolors	; Farben speichern

	jsr initad
	jsr apply		; Farben zuweisen
	jsr clearad

	sec 		; fertig, rebuild main screen
	rts	

; -------------------------------------- Convert to Hires 

apply	jsr setvecs	; Vektoren setzen

mnloop	ldy #0		; Farben für die aktuelle Kachel holen
	lda (vram),y
	pha
	lsr
	lsr
	lsr
	lsr
	sta frgr
	pla
	and #$0f
	sta bkgr
	jsr analyse	; sets xbuf

rcloop	lda (src),y	; linkes Pixel aus Kachel holen
	pha
	lsr		; ins Lo-Nibble
	lsr
	lsr
	lsr
	sta bbuf		; merken
	ldx frgr		; Alternative setzen
	cmp frgr
	beq +
	cmp bkgr
	beq ++
	cmp xbuf		; näher an frgr?
	beq +
	bcs +
++	ldx bkgr		; nein, dann bkgr (sonst frgr)
+	txa
	asl		; zurück ins obere Nibble
	asl
	asl
	asl
	sta bbuf		; merken

	pla		; Originalbyte zurückholen
	and #$0f		; und das rechte Pixel bearbeiten
	ldx frgr
	cmp frgr
	beq +
	cmp bkgr
	beq ++
	cmp xbuf		; näher an frgr?
	beq +
	bcs +
++	ldx bkgr
+	txa
	ora bbuf		; mit linkem verknüpfen
	sta (src),y	; nach 4Bit zurückschreiben

	iny		; eine Kachel durch
	cpy #32
	bne rcloop

	jsr adinc		; Activity (nach 25 Kacheln)
	jsr count		; 1000 Kacheln zählen
	bne mnloop	; nächste Kachel

	rts		; fertig

; -------------------------------------- 

getcolors	jsr setvecs
-	jsr dohist	; histogram for 1 tile
	jsr adinc
	jsr count		; count 1000
	bne -
	rts

; -------------------------------------- 

setvecs	lda #<colors	; into buffer at $ca00
	ldx #>colors
	sta vram
	stx vram+1
	lda #<1000	; tile counter (1000)
	ldx #>1000
	sta ls_vekta8
	stx ls_vekta8+1
	lda #<sy_4bit	; from $4000 (4Bit)
	ldx #>sy_4bit
	sta src
	stx src+1
	rts

; -------------------------------------- Histogram for one Tile

dohist	ldx #15
	lda #0
-	sta hist0,x
	dex
	bpl -

	ldy #32
	sty col00
	sty col00+1
	sty col00+2
	sty col00+3
	dey

lp6	lda (src),y	; check 32 bytes
	pha
	lsr
	lsr
	lsr
	lsr
	tax
	inc hist0,x
	pla
	and #15
	tax
	inc hist0,x
	dey
	bpl lp6

s07	ldx #3		; count 3 colors (2 of them needed)
lp7	ldy #0
	sty max

lp8	lda hist0,y	; find 3 most frequent colors
	beq s08		; any pixels of this color? No if 0
	cmp max		; most frequent already found?
	bcc s08		; yes if current is lower
	sta max		; otherwise: store as max (stores also if equal!)
	sty col00,x	; store color
s08	iny
	cpy #16		; check all possible 16 colors
	bne lp8

	ldy col00,x	; clear found color from histogram
	lda #0
	sta hist0,y
	dex		; now find 2nd and 3rd color
	bne lp7		; index 0 gets skipped (multi bckgr)

	ldy #0
	ldx col00+2	; only one color in tile?
	cpx #32
	bcc ms1		; no, don't fake the other one
	ldx col00+3	; yes, fake 2nd color (set the same there)
ms1	stx col00+2

	lda col00+3	; set as foreground (upper)
	asl
	asl
	asl
	asl
	sta cols
	lda col00+2	
	and #15		; set as backgound (lower)
	ora cols
	sta (vram),y	; into buffer (.y=0)

	rts

; ------------------------------------------------ 

analyse	clc
	lda bkgr
	adc frgr
	lsr
	sta xbuf
	rts

; ------------------------------------------------ 

setmode	ldx #<ls_imode	; ### 1.02
	ldy #>ls_imode
	stx sc_texttab
	sty sc_texttab+1
	ldx #0
	ldy #0
si4	lda modetx,x
	beq si5
	sta (sc_texttab),y
	inx
	iny
	bne si4
si5	rts

; ------------------------------------------------ Activity

adinc	dec adcnt
	bne +
	inc spr2y
	inc spr2y+2
	lda cntwert
	sta adcnt
+	rts 

; ------------------------------------------------ Abschluss Activity

clearad	lda spren		; Wanderbalken aus
	and #$f3
	sta spren
	lda msbx
	and #$f3
	sta msbx
	jsr setmode
	stx gr_redisp
	rts 

; ------------------------------------------------ Init Activity

initad	ldy #60
	lda #0
-	sta spr255+3,y	; Spriteblock 255 vorbereiten
	dey 
	bpl -
	sty spr255	; dünner Strich
	sty spr255+1
	sty spr255+2
	lda #$0f		; Farbe hellgrau
	sta sprcol2
	sta sprcol2+1
	lda sprxe		; doppelt breit
	ora #$0c
	sta sprxe

	lda msbx		; x über 255
	ora #$0c
	sta msbx
	lda #8		; x-Ordinate: 8 (plus 256)
	sta spr2x
	lda #$20
	sta spr2x+2
	lda #$92		; y-Ordinate: 146
	sta spr2y		; (im Image Information Fenster)
	sta spr2y+2

	sty sprptr+2	; Sprite 255
	sty sprptr+3
	lda spren
	ora #$0c		; Activity-Balken aktivieren
	sta spren
	lda #25		; Startzähler (25 mal 40 = 1000)
	sta cntwert
	rts

; ------------------------------------------------ Counters

count	lda src		; nächste Kachel
	clc
	adc #32
	sta src
	bcc +
	inc src+1
+	inc vram
	bne cou6
	inc vram+1
cou6	lda ls_vekta8
	bne cou7
	dec ls_vekta8+1
cou7	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	rts

; --------------------------------------

cntwert	!by 25

modetx	!scr "320x200@"

; --------------------------------------

modend	!eof

