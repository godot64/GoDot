
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; --------------------------------------
;
; mod.ForceHires
;   Module to render hires from any image data
;
; 1.00, 25.02.19, first release
; 1.01, 26.02.19, added sensibility for Balancing
;
; --------------------------------------


; -------------------------------------- Equates

	adcnt		= $30
	src		= $31	; /$32
	dst		= $33	; /$34
	vram		= $35	; /$36
	xbuf		= $37
	cols		= $38
	bitcnt		= $39
	bbuf		= $3a
	ybuf		= $3b
	rstart		= $3c
	rend		= $3d
	rstep		= $3e
	howmin1		= $3f
	pos		= $40	; /$41
	hold		= $42
	zp1		= $43
	col00		= $44	; ..$47
	bkgr		= $48
	frgr		= $49
	numcols		= $4a
	max		= $4b

	sprptr		= $07f8
	spr255		= $3fc0

	qtab		= $c900
	fgtab		= $c910
	bgtab		= $c920
	etab		= $c930
	rtab		= $c940
	hist		= $c950
	colors		= $ca00
	
	spr2x		= $d004
	spr2y		= $d005
	msbx		= $d010
	spren		= $d015
	sprxe		= $d01d
	border		= $d020
	sprcol2		= $d029

	oszi3		= $d40e
	wave		= $d412
	filter		= $d418
	rausch		= $d41b

; -------------------------------------- Header

	jmp start

	!by $20
	!by 0
	!by 0
	!wo modend
	!wo 0
	!pet "Force Hires Mode"
	!pet "1.01"
	!pet "26.02.19"
	!pet "A.Dettke        "

; -------------------------------------- Main

start	jsr apply
	jsr clearad
	lda #$ff		; Grafik verändert
	sta gr_redisp

	clc 		; fertig
	rts	

; -------------------------------------- Apply Dither

apply	jsr initad	; Init Activity

	ldx #2
	stx numcols	; Anzahl Farben: 2
	dex		; merken
	stx howmin1
	jsr inittabs	; Tabellen generieren

	ldx #$80		; Random initialisieren
	stx filter
	stx oszi3
	stx oszi3+1
	lda #0
	sta wave
	inx
	stx wave

	jsr setvecs
	jsr getcolors
	jsr initad
	jsr setvecs

mnloop	ldy #0
	lda (vram),y
	pha
	lsr
	lsr
	lsr
	lsr
	sta bkgr
	pla
	and #15
	sta frgr

rcloop	tya		; Dither-Offset merken
	lsr
	lsr
	sta ybuf

	lda (src),y	; zwei Pixel, zuerst das linke...
	sta bbuf		; merken
	lsr		; dann Pixel ins Lo-Nibble
	lsr
	lsr
	lsr
	tax		; include balancing
	lda gr_btab,x
mcskip	jsr pixel		; aufrastern
	and #$f0		; kommt zurück mit Bitmuster-Byte
	sta xbuf		; oberes Nibble merken

	lsr bitcnt	; Maske nach rechts: %01000000
	lda bbuf		; Originalbyte zurückholen
	and #$0f		; unteres Nibble bearbeitten
	tax
	lda gr_btab,x
	jsr pixel		; aufrastern
	and #$0f		; unteres Nibble isolieren
	ora xbuf		; mit oberem verknüpfen

	sta (src),y	; nach 4Bit zurückschreiben

	lsr bitcnt	; Maske rücken: %00100000
	bcc bclr
	ror bitcnt	; wenn abgearbeitet: Bit wieder oben einfügen
bclr	iny		; eine Kachel
	cpy #32
	bne rcloop

	jsr adinc		; Activity (nach 25 Kacheln)
	jsr count		; 1000 Kacheln zählen
	bne mnloop

	lda gr_dither	; dither on?
	beq breset	; no, then finished

	jsr setvecs
	jsr initad

dloop	ldy #0		; yes, then apply colors
	lda (vram),y
	pha
	lsr
	lsr
	lsr
	lsr
	sta frgr
	pla
	and #15
	sta bkgr

dlp0	lda (src),y
	bne +
	ldx bkgr
	lda dnib,x
	jmp ++

+	bmi +
	ldx frgr
	lda dnib,x
	and #$f0
	ora bkgr
	jmp ++
	
+	ldx frgr
	lda dnib,x

++	sta (src),y	; count 1000 tiles

	iny
	cpy #32
	bne dlp0

	jsr adinc
	jsr count
	bne dloop

breset	ldy #15		; Balancingtabelle resetten
rsloop	tya
	sta gr_btab,y
	dey
	bpl rsloop
	lda #16
	sta gr_ctr
	sta gr_brt

	rts

; -------------------------------------- Dither routines

pixel	jmp (pos)

dithadr	!wo dtoff
	!wo dthab
	!wo dtpat
	!wo dtnoi
	!wo dtrnd

; -------------------------------------- 

dtoff	cmp bkgr
	beq +
	lda frgr
+	tax
	lda dnib,x
	rts

; -------------------------------------- 

dthab	sta zp1		; Ordered
	tax
	lda rtab,x
	ldx ybuf		
	ora offs,x	  ; ,y
	tax
	lda gr_orderedpat,x
	jmp dh1

; -------------------------------------- 

dtpat	sta zp1		; Pattern
	tax
	lda rtab,x
	asl
	asl
	asl
	ora ybuf		;hold
	tax
	lda gr_pattern,x
dh1	ldx zp1
	and bitcnt
	beq bgr
	bne fgr

; -------------------------------------- 

dtrnd	tax		; Random
	lda rtab,x
	beq bgr
	cmp #8
	bcs fgr
	lda rtab+1,x
	beq dr0
	cmp #8
	bcc bgr
dr0	jsr getrnd
rold	lda zp1
	and #1
	beq bgr
	bne fgr

; -------------------------------------- 

dtnoi	tax		; Noise
	lda rtab,x
	beq bgr
	sta hold
	jsr getrnd
nold	lda hold
	cmp zp1
	bcs fgr

bgr	lda bgtab,x
	rts

fgr	lda fgtab,x
	rts

; -------------------------------------- 

getrnd	lda rausch
	and #15
	sta zp1
gr01	rts

; -------------------------------------- 

getcolors	jsr dohist
	jsr adinc
	jsr count
	bne getcolors
	rts

; -------------------------------------- 

setvecs	lda gr_dither	; Dithermodus anwählen
	asl
	tay
	lda dithadr,y
	ldx dithadr+1,y
	sta pos
	stx pos+1
	lda #$80		; Bitmaske %1000000 erstellen
	sta bitcnt
	lda #<sy_4bit	; ab $4000 (4Bit)
	ldx #>sy_4bit
	sta src
	stx src+1
	lda #<colors
	ldx #>colors
	sta vram
	stx vram+1
	lda #<1000	; tile counter
	ldx #>1000
	sta ls_vekta8
	stx ls_vekta8+1
	rts

; -------------------------------------- Create Tables

inittabs	lda #0
	sta qtab		; quantization table
	ldy #1
	clc
itl1	adc numcols	; number of grays used (2)
	tax
	lsr
	lsr
	lsr
	lsr
	sta qtab,y
	sty bbuf
	txa
	sec
	sbc bbuf
	lsr
	lsr
	lsr
	lsr
	sta bgtab-1,y	; table for backgrounds
	txa
	iny
	cpy #16
	bcc itl1
	lda bgtab+14
	sta bgtab+15

	ldy #1
	ldx #0
	stx etab		; table for dither ranges
	inx
itl2	lda bgtab,y
	cmp bgtab-1,y
	beq its1
	tya
	sta etab,x
	inx
its1	iny
	cpy #16
	bcc itl2
	lda #15
	sta etab,x
	sta rtab+15

	ldy #15
itl3	ldx bgtab,y
	inx
	txa
	sta fgtab,y	; foreground grays
	dey
	bpl itl3

	ldx #0
--	lda etab,x	; create dither
	sta rstart	; start of range
	lda etab+1,x
	sta rend		; end of range
	sec
	sbc rstart
	tay		; .y = range
	lda rdtab,y	; see below
	sta rstep
	ldy rstart
	lda #0		; one range ---
-	sta bbuf
	lsr
	lsr
	lsr
	lsr
	sta rtab,y
	lda bbuf
	clc
	adc rstep
	iny
	cpy rend
	bcc -		; /one range ---
	inx		; next range
	cpx howmin1	; until number of grays
	bcc --

	ldy #15
itl4	ldx qtab,y	; exchange offsets with grays (from dnib)
	lda etab,x
	tax
	lda dnib,x
	sta qtab,y	; quantization table
	ldx fgtab,y
	lda etab,x
	tax
	lda dnib,x
	sta fgtab,y	; foreground table
	ldx bgtab,y
	lda etab,x
	tax
	lda dnib,x
	sta bgtab,y	; background table
	dey
	bpl itl4

	rts

; -------------------------------------- Histogram for one Tile

dohist	ldx #15
	lda #0
-	sta hist,x
	dex
	bpl -

	ldy #32
	sty col00
	sty col00+1
	sty col00+2
	sty col00+3
	dey

lp6	lda (src),y	; check 32 bytes
	pha
	lsr
	lsr
	lsr
	lsr
	tax
	inc hist,x
	pla
	and #15
	tax
	inc hist,x
	dey
	bpl lp6

s07	ldx #3
lp7	ldy #0
	sty max

lp8	lda hist,y	; find 3 most frequent colors
	beq s08
	cmp max
	bcc s08
	sta max
	sty col00,x
s08	iny
	cpy #16		; check all colors
	bne lp8

	ldy col00,x
	lda #0
	sta hist,y
	dex		; now find 2nd/3rd color
	bne lp7

	ldy #0
	ldx col00+2	; only one color in tile?
	cpx #32
	bne ms1		; no, don't fake the other one

	ldx col00+3	; yes, do it
	lda gr_dither	; if no dither: do it differently
	beq ms1
	lda fgrays,x
	tax
ms1	stx col00+2

	lda col00+3
	cmp col00+2
	bpl nosort
	ldx col00+2
	sta col00+2
	stx col00+3
	txa
nosort	and #15		; as background
	asl
	asl
	asl
	asl
	sta cols
	lda col00+2	
	and #15		; as foregound
	ora cols
	sta (vram),y

+	rts

; ------------------------------------------------ Activity

adinc	dec adcnt
	bne +
	inc spr2y
	inc spr2y+2
	lda #25
	sta adcnt
+	rts 

; ------------------------------------------------ Abschluss Activity

clearad	lda spren		; Wanderbalken aus
	and #$f3
	sta spren
	lda msbx
	and #$f3
	sta msbx
	rts 

; ------------------------------------------------ Init Activity

initad	ldy #60
	lda #0
-	sta spr255+3,y	; Spriteblock 255 vorbereiten
	dey 
	bpl -
	sty spr255	; dünner Strich
	sty spr255+1
	sty spr255+2
	lda #$0f		; Farbe hellgrau
	sta sprcol2
	sta sprcol2+1
	lda sprxe		; doppelt breit
	ora #$0c
	sta sprxe

	lda msbx		; x über 255
	ora #$0c
	sta msbx
	lda #8		; x-Ordinate: 8 (plus 256)
	sta spr2x
	lda #$20
	sta spr2x+2
	lda #$92		; y-Ordinate: 146
	sta spr2y		; (im Image Information Fenster)
	sta spr2y+2

	sty sprptr+2	; Sprite 255
	sty sprptr+3
	lda spren
	ora #$0c		; Activity-Balken aktivieren
	sta spren
	lda #25		; Startzähler (25 mal 40 = 1000)
	sta adcnt
	rts

; ------------------------------------------------ Counters

count	lda src		; nächste Kachel
	clc
	adc #32
	sta src
	bcc +
	inc src+1
+	inc vram
	bne cou6
	inc vram+1
cou6	lda ls_vekta8
	bne cou7
	dec ls_vekta8+1
cou7	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	rts

; --------------------------------------

rdtab	!by $00,$f0,$78,$50
	!by $3c,$30,$28,$22
	!by $1e,$1b,$18,$16
	!by $14,$12,$11,$10

dnib	!by $00,$11,$22,$33,$44,$55,$66,$77
	!by $88,$99,$aa,$bb,$cc,$dd,$ee,$ff

gdcols 	!by $00,$ff,$44,$cc,$55,$aa,$11,$dd
	!by $66,$22,$99,$33,$77,$ee,$88,$bb

fgrays	!by $00,$33,$33,$33,$77,$77,$77,$77
	!by $bb,$bb,$bb,$bb,$ff,$ff,$ff,$ff

offs	!by $00,$10,$20,$30
	!by $00,$10,$20,$30

; --------------------------------------

modend	!eof

