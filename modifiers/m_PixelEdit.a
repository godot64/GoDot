
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "labels.txt"

; ------------------------------------------------------------ 
;
; mod.PixelEdit
; 	Module to edit the 4bit memory 8 times magnified
; 	realized with much support from Hugh McMenamin (Peoria, USA)
;
;   1.23, 12.01.01
;   1.24, 24.08.01
;   1.25, 23.10.03: pointer away on startup bug fixed
; 	          added wipe visible screen feature ("w")
; 	          added gadget for changing grid attributes
;   1.26, 05.02.05: added "T" for top-right position
;                   changed navigation window a little
;   1.27, 07.02.05: added "L" for bottom-left position
;   1.28, 05.10.05:
;   1.29, 28.01.17: changed mouse register due to change in system driver
;   1.30. 29.01.17: added Hold Mouse Position on Move Commands
;   1.31, 29.05.17: added ability to preview graphics correctly, also when executed from RAM
;   1.32, 31.07.17: added display of screen position (column/row of topleft edge)
;   1.33, 13.02.18: solved problem with Hold Mouse Position
;   1.34, 14.02.18: solved problem with mouse pointer set to wrong tile
;   1.35, 14.02.18: really solved the problem (was use of CTRL instead of CBM key!)
;   1.36, 03.03.18: changed navigation icons
;   1.37, 25.03.18: activate optimal grid color on start
;   1.38, 23.07.18: fix gridcolor for next start
;   1.39, 24.07.18: solved problem /w writing to right border of canvas when clicking to far left
;
; ------------------------------------------------------------ 

; --------------------------------------- Equates

	pport		= $01
	zsp 		= $30
	zzl 		= $31
	spi 		= $32
	zli 		= $33
	cnt 		= $34
	screenpnt 	= $35	; /$36
	col 		= $37
	storespx 		= $39
	storespy 		= $3a
	storesph 		= $3b
	mkx 		= $3c
	mky 		= $3d
	vpos 		= $3e
	vertical		= $3f	; ### v1.32 (saves space)
	horizont		= $40	; ### 
	oldv		= $41	; ###
	oldh		= $42	; ### bis hier
	slot		= $45
	v1buf		= $47
	v2buf		= $48
	cbuf		= $49

	zeile		= sc_merk
	spalte		= zeile+1
	lastkey 		= $c5	; current key
	mac 		= $fb
	commoflag 	= $028d
	shiftvekt 	= $028f
	sprites 		= $07f8	; Sprite definition pointers
	spr255 		= $3fc0	; Spriteblock 255

	sprp2 		= $d004	; spr #2 x pos
	sprp3 		= $d006	; spr #3 x pos
	sprp4 		= $d008	; spr #4 x pos
	sprp5 		= $d00a 	; spr #5 x pos
	sprp6 		= $d00c	; spr #6 x pos
	sprp7 		= $d00e	; spr #7 x pos
	sprenable 	= $d015	; spr display
	sprxy 		= $d017	; expand spr y
	sprmulti 		= $d01c	; multicolr
	sprxx 		= $d01d 	; exp spr x
	rahmen		= $d020
	backgr		= $d021

	vram2 		= $ce0b
	vram1 		= $de0b
	cstart 		= $ee0b

; ------------------------------------------ Header
	jmp start
	!by $20
	!by $00,$00
	!wo (modend)
	!wo 0
	!pet "Edit 4bit pixels"
	!pet "1.39"
	!pet "24.07.18"
	!pet "AD/ H.McMenamin "

; ------------------------------------------ Main

start:	jsr makech	; define new character
	jsr makenav	; define new navigation icons
	jsr savecols	; save screen colors
	jsr bestcols	; set best colors
	jsr makespr	; define spritebox
	jsr checkcols	; where is which module? (for re-display)
	ldx #<(pixlst)	; build requesters
	ldy #>(pixlst)
	jsr gd_screen	; returns with .a=0
	jsr messoff	; hide Edit Mode message
	lda #0
	sta vertical
	sta horizont
	sta sc_loop	; init mem flag (to: textmem)
	jsr initchooser	; set colors in color chooser
	jsr display	; show 4Bit enlarged
	jsr sprbox	; show spritebox
	jmp gd_eloop	; wait... (what else within GoDot?)

; ------------------------------------------ 

cancel:	jsr restcols	; restore screen colors
	ldy #0
	lda zeile
	sta vertical
	lda spalte
	sta horizont
	jsr dp13		; sprites and so on
	jsr makenav
	sec		; leave module
	rts

; ------------------------------------------ Display Color Chooser

initchooser:
	ldx palgad	; row of upper left corner
	inx
	stx palzl
	stx sc_zl
	ldx palgad+1	; column of upper left corner
	inx
	stx palsp
	stx sc_sp
	ldx #4		; width and height (4x4)
	stx sc_br
	stx sc_ho
	jsr gd_esm3	; invert area
restpal: 	lda gr_picked	; last used color to .x
	and #15
	tax
	jmp initpal	; initialize chooser colors

; ------------------------------------------ Change Chooser Display

makepal: 	lda gr_picked	; save last used color
	and #15
	sta plast
	lda palzl		; topleft corner row
	sta sc_zl
	lda palsp		; topleft corner column
	sta sc_sp
	pha		; save onto stack for later use
	ldx #1		; width and height =  1
	stx sc_br
	stx sc_ho
	dex 		; counters/pointers to zero
	stx cnty
	stx hold
mp1:	stx cntx
	ldy hold		; get palette offset
	lda gr_basepal,y
	sta sc_chgcol
	ldx #4		; colorize one tile
	jsr gd_fcol
	sec		; now write shift space or...
	lda sc_vekt20
	sbc #40
	sta sc_vekt20
	lda sc_vekt20+1
	sbc #$d4
	sta sc_vekt20+1
	ldy sc_chgcol
	cpy plast
	beq mp2
	lda #160
	bne mp3
mp2:	lda #171		; ...write "+" character
mp3:	ldy #0
	sta (sc_vekt20),y
	inc sc_sp
	inc hold		; next color
	ldx cntx		; 4 per row
	inx
	cpx #4
	bne mp1
	pla 		; get back column value
	pha
	sta sc_sp
	ldx #0		; counter to zero
	inc sc_zl		; next row
	inc cnty		; count rows
	lda cnty
	cmp #4
	bne mp1		; until finished (4)
	pla		; clean up stack and leave
	rts

; ------------------------------------------ Pick color from chooser

evgetcol:
 	sec		; row of mouse pointer
	lda zeile
	sbc palzl		; minus topleft corner of gadget
	asl
	asl 		; times 4 is
	sta hold 		; row position inside of palette
	sec		; add column
	lda spalte
	sbc palsp
	clc
	adc hold		; makes offset into palette
	tax
pdirect:	lda gr_basepal,x	; get GoDot palette entry
	tax
	ora #$80		; set not valid flag (for system)
	sta gr_picked
initpal:	lda c64pal,x	; get native pal entry (is color)
	sta col		; store value
	jsr makepal	; change chooser display
	jsr shpicked	; show picked color
	clc
	rts

; ------------------------------------------ Show chosen color

shpicked:	lda plast		; color
	sta sc_chgcol
	ldy #3
spk0:	lda pickgad,y
	sta sc_zl,y
	dey
	bpl spk0
	jsr gd_trim
	ldx #4
	jsr gd_fcol
	clc
	rts

; ------------------------------------------ Values

palzl:	!by 0
palsp:	!by 0
hold:	!by 0
vert:	!by 0
plast:	!by 0
cntx:	!by 0
cnty:	!by 0
storesv:	!wo 0
c64pal:	!by $00,$ff,$44,$cc,$55,$aa,$11,$dd
	!by $66,$22,$99,$33,$77,$ee,$88,$bb

bestcolor:		; when background color is:
	!by 12,15,5,1 	; black
	!by 11,12,11,5 	; white
	!by 0,10,15,7	; red
	!by 6,5,8,9	; cyan
	!by 6,14,6,15	; purple
	!by 9,3,7,13	; green
	!by 0,14,12,15	; blue (Standard)
	!by 8,1,2,9	; yellow
	!by 0,15,5,13	; orange
	!by 0,8,5,3	; brown
	!by 2,15,9,7	; light red
	!by 12,15,5,7	; dark gray
	!by 0,15,11,1	; medium gray
	!by 5,7,8,14	; light green
	!by 6,15,6,3	; light blue
	!by 12,1,8,9	; light gray

; ------------------------------------------ Save colors

savecols:	lda sc_maincolor
	ldx #4
	bne sav1
sav0:	lda sc_shadow,x
sav1:	sta cols,x
	dex
	bpl sav0
	rts

; ------------------------------------------ Restore colors

restcols:	ldx #4
	lda cols,x
	sta sc_maincolor
	jmp sav3
sav2:	lda cols,x
	sta sc_shadow,x
sav3:	dex
	bpl sav2
	rts

; ------------------------------------------ Best colors

bestcols:	lda gr_bkcol	; background color
	and #15
	ldx #0		; index to cols
	asl
	asl
	tay		; index into list of best cols
bc0:	lda bestcolor,y	; get new color
	sta sc_shadow,x	; set it
	iny
	inx
	cpx #4
	bne bc0
	lda sc_hilite
	sta grclr
	jmp gridcl	; ### 1.37, activate grid color

; ------------------------------------------ Fill screen with new character

fill:	ldy #0		; set textscreen as destination
	sty sc_loop
	sty sc_zl		; start at row 0, column 0
	sty sc_sp
	lda #32		; width 32 (4x8)
	sta sc_br
	lda #24		; height 24 (3x8)
	sta sc_ho
	jsr gd_initmove	; compute screenaddress
	lda #223		; get fill character
	jmp gd_fi0	; fill now

; ------------------------------------------ Toggle to new navi icons

makenav:	ldx #31
mn0:	lda gr_pattern,x	; buffer syspattern (chars 224 to 227)
	ldy newnavs,x
	sta newnavs,x
	tya
	sta gr_pattern,x
	dex
	bpl mn0
	rts

; ------------------------------------------ Make new character

makech:	ldx #7
mc0:	lda char,x
	sta sc_undochar,x
	dex
	bpl mc0
	rts

; ------------------------------------------ Make Sprites for grid

makespr:	ldx #0
masp:	lda sprstore,x	; load sprite
	sta spr255,x
	inx
	cpx #64
	bne masp
	lda spritehi
	and #3
	sta spritehi
	lda #0
	sta sprmulti	; multi off
	sta sprxx
	sta sprxy
	lda fgrclr
	beq +
	jsr gridcl0
	bne ++
+	jsr gridcl
++	lda #$ff		; all sprites
	sta sprites+2	; point to $ff
	sta sprites+3
	sta sprites+4
	sta sprites+5
	sta sprites+6
	sta sprites+7
	jsr sprbox   
; ------------------------------------------ set vert loc
	lda #111
	sta sprp2+1
	sta sprp3+1
	sta sprp4+1
	lda #175
	sta sprp5+1
	sta sprp6+1
	sta sprp7+1
; ------------------------------------------ set horiz loc
	lda #85
	sta sprp2
	sta sprp5
	lda #149
	sta sprp3
	sta sprp6
	lda #213
	sta sprp4
	sta sprp7
	rts

; ------------------------------------------ grid color

fixgcl:	lda grclr		; manually
	sta fgrclr
gridcl:	lda grclr		; colors for grid (bestcols)
gridcl0:	sta $d029
	sta $d02a
	sta $d02b
	sta $d02c
	sta $d02d
	sta $d02e
	rts

; ------------------------------------------ Show grid

sprbox:	lda #$ff
	sta sprenable
	rts

; ------------------------------------------ Data

char:	!by $7e,$ff,$ff,$ff,$ff,$ff,$ff,$7e
tab:	!by 0,8,16,24		; horizontal tab positions
tabspr:	!by 0,64,128,192
cols:	!by 0,0,0,0,0
grclr:	!by 1
fgrclr:	!by 0

grstore:	!by $00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00,$00,$00,$00,$00,$00
	!by $00,$00,$00,$00,$00,$00,$00,$00

sprstore:	!by 16,0,0,16,0,0,16,0
	!by 0,254,0,0,16,0,0,16
	!by 0,0,16,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0

; ------------------------------------------ Check for Gadgets when in Edit Mode

ckgads	lda spalte	; horizontal in Gadgetgebiet?
	cmp gdbr
	bcs ok1		; nein, zu weit rechts
	cmp gdsp
	bcc ok1		; nein, zu weit links
	lda zeile		; vertikal darin?
	cmp gdho2
	bcs ok1		; nein, zu weit unten
	cmp gdzl1
	bcc ok1		; nein, zu weit oben
	cmp gdho1		; ist im Mover?
	bcc jended	; ja, Edit beenden
	cmp gdzl2		; ist im Chooser?
	bcc ok1		; nein, dazwischen
jended	pla
	pla
	lda vertical
	sta oldv
	lda horizont
	sta oldh
	jmp endedit
ok1	rts

; ------------------------------------------ Event: Edit pixels

evedit:	jsr messon	; show message
	lda #0		; init break with STOP key
	sta sc_stop
	sta bigbox	; set function inactive
	jsr hiedi		; hilite Edit gadget
	lda vertical	; save current mouse position
	sta oldv
	lda horizont
	sta oldh

; ------------------------------------------ Edit Routines

ed0:	jsr ckgads	; in einem der Auswahlgadgets?
	lda spalte	; nein, look for too wide
	cmp #$20
	bcs edx1		; too far rt?
	lda zeile
	cmp #$18		; too far dwn?
	bcc edx3
edx1:	ldx #2		; yes, border red
	stx rahmen
edx2:	inx		; delay (blink)
	bne edx2
	jsr gd_position
	lda #0		; then border black
	sta rahmen
	beq ed0		; and loop

edx3:	lda sc_keyprs	; FIRE/RETURN/STOP?
	ora commoflag	; CBM key?
	ora sc_stop
	beq ed0		; no, wait

	tay		; hold key
	jsr gd_position	; where is the mouse?
	lda spritex	; too far left?
	cmp #25
	bcs +
	ora spritehi
	eor spritex
	beq edx1		; yes, blink and back to loop
	lda spritex
	cmp #25
	bcs edx1

+	lda commoflag	; check for CBM/Shift
	beq edit		; no, other key
	ldx #0
	stx sc_keyprs
	stx commoflag
	tax
	and #3
	beq ed0
	jmp keymove	; keyboard if CBM or Shift pressed

; ------------------------------------------ 
edit:	lda sc_stop	; if STOP (>0): end edit
	beq ed1		; no STOP
; ------------------------------------------ 

endedit	lda sc_normtext	; STOP: exit, restore Edit gadget
	sta sc_chgcol
	ldy #3
ed3:	lda editgad,y
	sta sc_zl,y
	dey
	bpl ed3
	jsr gd_trim
	ldx #4
	jsr gd_fcol
	jsr messoff	; hide message
	lda #$40
	sta bigbox
	lda oldv		; restore last position
	sta vertical
	lda oldh
	sta horizont
sl5:	clc		; leave function
	rts

; ------------------------------------------ 

ed1:	sta sc_loop	; init memflag
	lda screenpnt	; save current 4Bit pointer
	pha
	lda screenpnt+1
	pha
	lda vertical
	pha
	lda horizont
	pha

	lda zeile		; row of mouse pointer
	cmp #24		; valid?
	bcs sl3		; no, leave
	pha		; save value (y indent)
	lsr		; / 8
	lsr
	lsr
	sta vertical
	lda spalte	; column of mouse pointer
	cmp #32		; valid?
	bcc sl4
	pla		; if no, clear stack...
	jmp sl3		; ...and leave
sl4:	pha		; save value (x indent)
	lsr		; / 8
	lsr
	lsr
	sta horizont
	jsr set4bit	; add to 4Bit address
			; (now pointing to 4Bit tile)
	pla		; pixel column
	and #7
	tax		; bit 0 indicates which nibble
	lsr		; / 2 = offset in tile line
	sta cnt
	pla		; pixel row
	and #7
	asl		; * 4 = offset in tile
	asl
	clc
	adc cnt		; add, makes offset to byte
	clc
	adc screenpnt	; now pointing to correct byte
	sta screenpnt
	bcc sl0
	inc screenpnt+1
sl0:	ldy plast		; get chosen color
	sty sc_chgcol	; set for display output
	lda c64pal,y
	tay
	txa		; now decide which nibble
	and #1
	bne sl1
	tya		; left nibble (or pixel)
	and #$f0
	sta cnt
	ldy #0
	lda (screenpnt),y
	and #$0f
	jmp sl2
sl1:	tya		; right nibble (or pixel)
	and #$0f
	sta cnt
	ldy #0
	lda (screenpnt),y
	and #$f0
sl2:	ora cnt		; set new color to 4Bit
	sta (screenpnt),y
	lda zeile		; set new color to display
	sta sc_zl
	lda spalte
	sta sc_sp
	lda #1
	sta sc_br
	sta sc_ho
	sta gr_redisp
	ldx #4
	jsr gd_fcol

sl3:	pla		; restore indents
	sta horizont
	pla
	sta vertical
	pla		; restore vector to 4Bit
	sta screenpnt+1
	pla
	sta screenpnt
	jmp ed0		; edit loop

; ------------------------------------------ Move by key

keymove:	jsr holdmpos	; hold mouse position
	txa		; Commo-Flag (1 (Shift), 2 (CBM) or 3 (both))
	ldx lastkey
	cpx #40 		; "+" key
	bne pe2
	jsr f1		; fill buffer
pe2:	cpx #17		; "r" key
	bne pe2a
	jsr rotf		; rotate block
pe2a:	cpx #43		; "-" key
	bne pe3
	jsr f3		; buffer to screen
pe3:	cpx #48		; "pound" key
	bne pe4
	jsr f5		; col to screen
pe4:	cpx #62		; "q" key
	bne pe5
	inc grclr		; change grid color
	jsr tdelay
	jsr fixgcl
pe5:	cpx #37		; "k" key
	bne pe6
	jsr tdelay
	lda sprenable 
	eor #$fc		; flip sprites
	sta sprenable 
pe6:	cpx #41		; "p" key
	bne pete
	stx sc_loop
	inc col		; increment current color
	lda col
	and #15
	tax
	jsr pdirect	; and set new color
	jsr tdelay	; key delay
	jmp ed0		; back to edit loop

; ------------------------------------------ 

pete:	cpx #60		; left mouse button?
	beq shifted
	cmp #3
	beq shifted
	cmp #2		; CBM?
	bne kmc3		; no, loop

; ------------------------------------------ 

unshifted:
	cpx #2		; CRSR right
	bne km0
	jsr right
	bne km01
km0:	cpx #7		; CRSR down
	bne km4
	jsr down
	bne km1
km4:	cpx #29 		; "h" for Home
	bne km5
	jsr evhome
	bcc km6
km5:	cpx #28		; "b" for Bottom Right
	bne km51
	jsr evbotrght
	bcc km6
km51:	cpx #22		; "t" for Top Right
	bne km52
	jsr evtoprght
	bcc km6
km52:	cpx #42		; "l" for Bottom Left
	bne km7
	jsr evbotleft
	bcc km6
km7:	cpx #49		; "*" for Center
	bne km8
	jsr evcenter
	bcc km6
km8:	cpx #38 		; "o" for Overview
	bne kmc
	jsr evdisplay
	jsr messon
	jsr hiedi
	beq km6
kmc	cpx #9		; "w" for Wipe
kmc3	bne km3
	jsr tdelay
	jsr evwipe
	bcc km3

; ------------------------------------------ 

shifted:	cpx #60		; Shift Space (left mouse button)?
	bne km9
	cmp #1 		; (Shift?)
	bne km3
	jmp edit		; yes, back to normal edit routine
km9:	cpx #2		; CRSR left
	bne km2
	jsr left
km01:	bne km1
km2:	cpx #7		; CRSR up
	bne km3
	jsr up
km1:	jsr home		; display section
km6:	lda vertical
	pha
	ldy horizont
	lda oldv
	sta vertical
	lda oldh
	sta horizont
	jsr setspr 	; don't move mouse pointer!
	pla
	sta vertical
	sty horizont
km3:	jmp ed0 		; back to edit loop

; ------------------------------------------ delay loop

tdelay:	txa		; save x val
	pha
	ldx #32
td1	lda $d012
	cmp #64
	bne td1
	dex
	bne td1
	pla		; recall x val
	tax
	rts

; ------------------------------------------ Message handling

messon:	lda sc_hilite	; show message
	jmp ms0
messoff:	lda gr_bkcol	; hide message
ms0:	sta sc_chgcol
	lda #24		; on row 24
	sta sc_zl
	ldx #0		; column 0
	stx sc_sp
	lda #26		; width 26 letters
	sta sc_br
	inx   		; one line high
	stx sc_ho
	stx sc_loop
	ldx #4
	jmp gd_fcol

; ------------------------------------------ hilite Edit gadget

hiedi:	lda sc_hilite
	sta sc_chgcol
	ldy #3
ed2:	lda editgad,y
	sta sc_zl,y
	dey
	bpl ed2
	jsr gd_trim
	ldx #4
	jmp gd_fcol

; ------------------------------------------ Display 4 Bit 8x enlarged

display:	jsr fill		; fill with new character
	lda gr_bkcol	; set background color
	sta backgr
	ldx #0 		; black border
	stx rahmen
home:	jsr setstart	; compute address in 4Bit

dp00:	jsr showxy
	ldx screenpnt	; get address
	stx sc_texttab 	; store to work vector
	ldy #1		; width/height: 1
	sty sc_br
	sty sc_ho
	dey
	sty sy_tbuffer
	sty sc_zl		; row/column: 0
	sty sc_sp
	sty zsp		; textscreen: row
	sty zzl		; column
	sty spi		; counters (up to 8)
	sty zli
	lda screenpnt+1
	sta sc_texttab+1
dp3:	ldx zzl		; get row tab value
	lda tab,x
	sta sc_zl
dp2:	ldx zsp		; get column tab value
	lda tab,x
	sta sc_sp
dp0:	lda (sc_texttab),y	; get pixel (left)
	pha
	lsr
	lsr
	lsr
	lsr
	tax
	lda gr_basepal,x	; get color of pixel
	sta sc_chgcol
	ldx #4		; colorize character on screen
	jsr gd_fcol
	inc sc_sp		; next column
	inc spi
	pla		; get pixel (right)
	and #15
	tax
	lda gr_basepal,x	; get color of pixel
	sta sc_chgcol
	ldx #4		; colorize as well
	jsr gd_fcol
	inc sc_sp		; next column
	inc spi
	inc sc_texttab	; next two pixels
	bne dp1
	inc sc_texttab+1
dp1:	ldy #0		; restore destination
	sty sc_loop
	lda spi		; 8 columns?
	cmp #8
	bcc dp0		; no, next
	sty spi		; counter to 0 again
	inc zli		; count rows
	inc sc_zl		; next row
	lda zli		; 8 rows?
	cmp #8
	bcc dp2		; no, next
	inc zsp		; next horizontal tab
	sty zli		; counter to 0 again
	lda zsp		; 4 tabs?
	cmp #4
	bcc dp3 		; no, next
	sty zsp		; start far left again
	clc		; proceed to next 4Bit row
	lda sc_texttab
	adc #$80
	sta sc_texttab
	lda sc_texttab+1
	adc #4
	sta sc_texttab+1
	inc zzl		; next vertical tab
	lda zzl
	cmp #3 		; 3 tabs?
	bcc dp3		; no, next
dummy:	clc
	rts

; ------------------------------------------ Scroll events (Navigation Window)

jevhome:	jmp evhome
jevcenter:
	jmp evcenter

evmove:	lda zeile		; row
	ldx spalte	; column
	cmp #4		; topmost row of gadget?
	bne em0
	cpx #34		; four columns within
	beq evupleft
	cpx #35
	beq evup
	cpx #36
	beq evuprght
	cpx #37
	beq jevhome
em0:	cmp #5		; middle row 1?
	bne em1
	cpx #34
	beq evleft
	cpx #37
	beq jevcenter
	cpx #36
	beq evright
	cpx #35
	bne em1
	jmp evdisplay
em1:	cmp #6		; middle row 2?
	bne em2
	cpx #34
	beq evdwnleft
	cpx #35
	beq evdown
	cpx #36
	beq evdwnrght
	cpx #37
	beq evtoprght
em2:	cmp #7		; bottom row?
	bne em3
eg1	cpx #36		; "L" (for Bottom Left)
	beq evbotleft
eg2	cpx #35		; "Q" (for change grid color)
	bne eg31
	inc grclr		; change grid color
	jsr fixgcl
eg31	cpx #37		; "B" (for Bottom Right)
	beq evbotrght
eg3	cpx #34		; "W" (for Wipe)		
	bne em3
	jsr evwipe
em3:	clc
	rts

; ------------------------------------------ Scroll event routines

evdown:	jsr down		; scroll down
	jmp dp00		; display
; ------------------------------------------ 
evdwnrght:
	jsr evdown
	jmp evright
; ------------------------------------------ 
evdwnleft:
	jsr evdown
	jmp evleft
; ------------------------------------------ 
evup:	jsr up		; scroll up
	jmp dp00 		; display
; ------------------------------------------ 
evuprght:	jsr evup
	jmp evright
; ------------------------------------------ 
evupleft:	jsr evup
	jmp evleft
; ------------------------------------------ 
evright:	jsr right		; scroll right
	jmp dp00		; display
; ------------------------------------------ 
evleft:	jsr left		; scroll left
	jmp dp00		; display

; ------------------------------------------ Position events

evhome:	ldy #0
	sty vertical 	; row/column: 0
	sty horizont
	jmp home		; display
; ------------------------------------------ 
evcenter:	lda #11		; center position
	sta vertical
	lda #18
	sta horizont
	jmp home		; display
; ------------------------------------------ 
evbotrght:
	lda #22		; bottom right position
	sta vertical
	lda #36
	sta horizont
	jmp home		; display

; ------------------------------------------ 
evtoprght:
	lda #0		; top right position
	sta vertical
	lda #36
	sta horizont
	jmp home		; display

; ------------------------------------------ 
evbotleft:
	lda #22		; bottom left position
	sta vertical
	lda #0
	sta horizont
	jmp home		; display

; ------------------------------------------ Scroll down

down:	ldx vertical
	inx
	cpx #23
	bcs dw0
	stx vertical
	lda screenpnt+1	; next 4Bit row
	adc #5
	sta screenpnt+1
dw0:	rts

; ------------------------------------------ Scroll up

up:	ldx vertical
	dex
	bmi dw0
	stx vertical
	sec
	lda screenpnt+1	; previous 4Bit row
	sbc #5
	sta screenpnt+1
	rts

; ------------------------------------------ Scroll right

right:	ldx horizont
	inx
	cpx #37
	bcs ri0
	stx horizont
	lda screenpnt	; next 4Bit column
	adc #32
	sta screenpnt
	bcc ri0
	inc screenpnt+1
ri0:	rts

; ------------------------------------------ Scroll left

left:	ldx horizont
	dex
	bmi ri0
	stx horizont
	sec		; previous 4Bit column
	lda screenpnt
	sbc #32
	sta screenpnt
	lda screenpnt+1
	sbc #0
	sta screenpnt+1
	rts

; ------------------------------------------ Display Screen Position
; ### v1.32 ---

showxy:	lda horizont
	jsr gd_xcnvdez
	sta coltx+1
	sta coltx2+1
	cpx #$30
	bne +
	ldx #$20
+	stx coltx
	stx coltx2
	ldx #<colgad
	ldy #>colgad
	jsr shownums
	lda vertical
	jsr gd_xcnvdez
	sta rowtx+1
	sta rowtx2+1
	cpx #$30
	bne +
	ldx #$20
+	stx rowtx
	stx rowtx2
	ldx #<rowgad
	ldy #>rowgad
shownums	stx sc_screentab
	sty sc_screentab+1
	lda #0
	tax
	tay
-	jsr gd_setpos
	cpx #3
	bne -
	jsr gd_initmove
	ldy #2
	jmp gd_xtxout1

; ### bis hier ---
; ------------------------------------------ Display graphics event

evdisplay:
	jsr disp2		; show graphics
	jsr sprbox
	jmp display 	; redisplay magnification

; ------------------------------------------------ Check Color Rams
; ### 1.31 ab hier ---

checkcols	sei 		; GoDot off
	ldx #$00
	stx pport

	ldy #$03		; set lobyte of...
	sty slot

	lda #$f0		; ...Slot4, check for types of module there
	sta slot+1	; (may be cram when input is active)
	jsr sethicol	; (otherwise unchanged)

	lda #$c0		; ...Slot1 and check
	sta slot+1
	jsr sethicol

	lda #$d0		; ...Slot2 and check
	sta slot+1
	jsr sethicol

	lda #$e0		; ...Slot3 and check
	sta slot+1
	jsr sethicol

	lda #$36		; GoDot on again
	sta pport
	cli 
	rts 

; ------------------------------------------------ 

sethicol	lda (slot,x)	; get type of module (at $c003): $20, $40, $80
	tay 
	and #$40		; is saver there? (contains vram1)
	beq +		; no, next type

	jsr c147		; yes, set color buffer 
	sta v1buf
	bne ++

+	tya 		; loader? ($80, contains cram)
	bpl +		; no, next type

	jsr c147		; yes, set accordingly
	sta cbuf
	bne ++

+	jsr c147		; so, it's a modifier (contains vram2)
	sta v2buf

++	rts 

c147 	lda slot+1	; get hibyte...
	ora #$0e		; ...and OR %00001110 to it (ie $ce)
	rts 		; thus: get correct hi address of color buffers

; ### 1.31 bis hier ---
; ------------------------------------------ 

dp13:	sty sc_stop	; re-init stop flag
	lda sc_maincolor	; restore colors
	sta rahmen
	sta backgr
	jsr setspr	; set pointer to last tile
	jsr gd_spron	; switch sprites on
	sec		; leave module
	rts

; ------------------------------------------ Define 4Bit address

setstart:	lda #0		; base address: $4000
	sta screenpnt
	lda #$40
	sta screenpnt+1

set4bit:	lda vertical 	; row (of tiles)
	beq ss0
	sta cnt		; compute row address
ss1:	clc
	lda screenpnt+1
	adc #5
	sta screenpnt+1
	dec cnt
	bne ss1
ss0:	lda horizont	; column (of tiles)
	beq ss2
	sta cnt
ss4:	clc		; compute indent into row
	lda screenpnt
	adc #32
	sta screenpnt
	bcc ss3
	inc screenpnt+1
ss3:	dec cnt
	bne ss4
ss2:	rts 		; result in screenpnt

; ------------------------------------------ Display graphics

disp2:	jsr setspr	; set pointer
	jsr gd_spron	; switch on
	jsr redisplay	; redisplay graphics
	jsr gd_position	; get pointer position
	lda zeile		; Mauszeile
	pha
	lda #5
	sta vertical
	lda spalte	; Mausspalte
	pha
	lda #35
	sta horizont
	jsr setspr	; setze auf 5/35 ("O")
	pla
	sta horizont
	pla
	sta vertical
	rts

; ------------------------------------------ Set pointer to last tile

setspr:	lda spritehi 	; X-Hi off
	and #$fc
	sta spritehi
	lda vertical	; set row
	asl
	asl
	asl
	clc
	adc sy_soffy
	tax
	stx $d001		; ### 1.34
	inx
	inx
	stx spritey
	lda horizont	; set column
	tax
	cmp #29
	bcc ssp0
	and #31
	tax
	lda spritehi 	; X-Hi on
	ora #3
	sta spritehi
ssp0:	txa
	asl
	asl
	asl
	clc
	adc sy_soffx
	tax
	stx spritex
	stx $d000
	rts

; ------------------------------------------ Redisplay routines

redis:	jsr setcolors
	lda gr_cmode
	beq rp4
	lda #$18
	sta $d016
rp4:	lda #$1b
	sta $d018
	lda #$3b
	sta $d011
	lda gr_redisp 	; leave if flag set
	bne rp3
rp1:	lda sc_keyprs	; wait for stop key
	ora sc_stop
	beq rp1
rp2:	jsr getcolors
	jsr tmode
	ldx sc_screenvek
	ldy sc_screenvek+1
	jsr gd_screen
rp3:	clc
	rts
	
tmode:	ldx #$13
	lda #$1b
	stx $d018
	sta $d011
	lda #$08
	sta $d016
	rts
	
; ------------------------------------------

setcveks:	sei
	lda #$35
	sta pport
	lda cbuf 		; color ram ### 1.31 
	ldx #$d8
	bne scv0
	
; ------------------------------------------ 

setbveks	lda v1buf 	; vram1 ### 1.31 
	ldx #4
	dec pport
scv0:	stx $b3
	ldy #0
	sty zeile
	sty $b2
	dey

; ------------------------------------------ 

setlast:	sty gr_bkcol
	ldy #<(cstart)
	sty $20
	sta $21
	lda #<(500)
	sta $a8
	lda #>(500)
	sta $a9
	ldy #0
	rts

; ------------------------------------------ 

count:	inc $20
	bne cou5
	inc $21
cou5:	inc $b2
	bne cou6
	inc $b3
cou6:	lda $a8
	bne cou7
	dec $a9
cou7:	dec $a8
	lda $a8
	ora $a9
	rts

; ------------------------------------------ 

getcolors:
	jsr setcveks
stco:	lda ($b2),y
	sta zeile
	inc $b2
	bne stc0
	inc $b3
stc0:	lda ($b2),y
	lsr
	rol zeile
	lsr
	rol zeile
	lsr
	rol zeile
	lsr
	rol zeile
	lda zeile
	sta ($20),y
	jsr count
	bne stco
	jsr setbveks
stc1:	lda ($b2),y
	sta ($20),y
	jsr count
	bne stc1
	ldy gr_bkcol
	bpl scv1
	ldy #0
	lda v2buf 	; vram2 ### 1.31 
	jsr setlast
	beq stc1
scv1:	lda #$36
	sta pport
	cli
	lda backgr
	and #15
	sta gr_bkcol
	rts

; ------------------------------------------ 

setcolors:
	lda gr_bkcol
	sta backgr
	pha
	jsr setcveks
stc2:	sty zeile
	lda ($20),y
	lsr
	rol zeile
	lsr
	rol zeile
	lsr
	rol zeile
	lsr
	rol zeile
	sta ($b2),y
	inc $b2
	bne stc3
	inc $b3
stc3:	lda zeile
	sta ($b2),y
	jsr count
	bne stc2
	jsr setbveks
stc4:	lda ($20),y
	sta ($b2),y
	jsr count
	bne stc4
	ldy gr_bkcol
	bpl scv1
	pla
	tay
	lda v2buf 	; vram2 ### 1.31 
	jsr setlast
	beq stc4

; ------------------------------------------ 

redisplay:
	lda gr_redisp
	pha
	ldx #1
	stx gr_redisp
	dex
	stx sc_stop
	jsr redis
	jsr rp1
	pla
	sta gr_redisp	; auto render on
	jsr messoff	; hide message after graphics
	jmp restpal	; redisplay color chooser

; ----------------------------------------- Event Wipe Screen

evwipe	lda #50
	sta vpos
	lda #0
	sta spritehi
	ldy #3		; 3 rows
ew1	ldx #0		; 4 columns
ew0	lda tabspr,x	; get x-position
	sta spritex
	lda vpos		; get vpos
	sta spritey-2	; ### v1.29
	stx mkx
	sty mky
	jsr f33		; fill 1 tile
	ldy mky
	ldx mkx
	inx		; for 4 columns
	cpx #4
	bne ew0
	clc		; and 3 rows
	lda vpos
	adc #64
	sta vpos
	dey
	bne ew1
	iny
	sty gr_redisp
	jmp dp00

; ----------------------------------------- Hold current Position

holdmpos	lda zeile		; save current position
	sta oldv
	lda spalte
	sta oldh
	rts

; ------------------------------------------ Fill Tile Routines

f1:	ldy #00		; fill buffer
	jsr hv1		; get block address
f2:	lda (mac),y
	sta grstore,y
	iny
	cpy #32
	bne f2
	rts

; ------------------------------------------ paste buffer on screen

f3:	jsr hv1 		; get block address
	ldy #00
f4:	lda grstore,y	; buffer to screen
	sta (mac),y
	iny
	cpy #32
	bne f4
	jmp f7

f33:	jsr hv1 		; get block address
	ldy #00
	lda col		; fill block with
f43:	sta (mac),y	; selected color
	iny
	cpy #32
	bne f43
	rts

; ------------------------------------------ fill color

f5:	jsr hv1		; get block address
	ldy #00
	lda col		; fill block with
f6:	sta (mac),y	; selected color
	iny
	cpy #32
	bne f6
f7	sty gr_redisp
	jmp home

; ------------------------------------------ 

hv1:	lda screenpnt+1	; lda msb
	inc rahmen		; flash border
	pha		; store msb
	jsr gd_position
	lda zeile		; lda how many rows down
	lsr		; / 2
	lsr		; / 4
	lsr		; / 8
	tay		; put in y
	pla		; get msb back
	cpy #0
	beq hv3		; if 0 skip
hv2:	clc
	adc #$5		; add next row
	dey
	cpy #0
	bne hv2
hv3:	sta mac+1
	lda screenpnt	; lda lsb
	pha		; save it
	lda spalte	; get horz cols
	lsr		; /2
	lsr		; /4
	lsr		; /8
	tay		; put in y
	pla		; get lsb back
	cpy #0		; if 0 skip
	beq hh3
hh2:	clc
	adc #$20		; add column
	bne hh5
	inc mac+1
hh5:	dey
	bne hh2
hh3:	sta mac
	dec rahmen	; restore border
	rts

; ------------------------------------------ Screenlist

pixlst:	!by $93		; Clear screen
	!by 0,0,32,24	; Edit area
bigbox:	!by $40 		; active
	!wo (evedit)

movgad:	!by 3,33,6,6	; mover
	!by $d0
	!wo (evmove)
	!by 224,30,225
	!scr "H@"

palgad:	!by 9,33,6,6	; chooser
	!by $40
	!wo evgetcol

pickgad:	!by 15,33,6,4
	!by $a0 		; show chosen color in here
	!wo 0
	!by 160,160,160,160,0

editgad:	!by 19,33,6,3
	!by $c0		; Edit
	!wo evedit
	!scr "Edit@"

	!by 22,33,6,3
	!by $c0		; Exit
	!wo cancel
	!scr "Exit@"

	!by $c0,0,33,4
	!scr "X:"
coltx	!scr " 0@"
	!by $c0,1,33,4
	!scr "Y:"
rowtx	!scr " 0@"
	
	!by $c0,4,33,4
	!by 91
	!scr "O"
	!by 94
	!scr "*@"

	!by $c0,5,33,4
	!by 226,31,227
	!scr "T@"

	!by $c0,6,33,4
	!scr "WQLB@"
	
	!by $c0,16,33,4	; extra texts (picked)
	!by 160,160,160,160,0

	!by $c0,23,255,26	; Message: Edit Mode
	!scr "STOP exits from Edit Mode.@"
	!by $80

colgad	!by 1,36,2
coltx2	!scr " 0@"
rowgad	!by 2,36,2
rowtx2	!scr " 0@"

; ------------------------------------------ 

rotf:	jsr hv1		; get block address
	jsr cloop		; get pixels for storing in stow & stoy
	lda #0 		; set limits for moving to 
	sta ymk		; grstore (graphic store)
	jsr adup
	inc mac		; 2nd col 
	jsr cloop		; repeat for each column
	lda #8
	sta ymk
	jsr adup
	inc mac
	jsr cloop
	lda #16
	sta ymk
	jsr adup
	inc mac
	jsr cloop
	lda #24
	sta ymk
	jsr adup
	jsr f3		; buffer to screen
	rts
; ------------------------------------------ 
cloop:	clc		; work horse for entire block
	ldx #0		; set registers at zero
	ldy #0		; for each line
	lda #0
; ------------------------------------------ get lt nybl
aloop:	lda (mac),y	; - get byte from (mac) and mask 
	and #$f0
	sta stoy,x	; buffer for lt nybles
	iny
	iny
	inx
	cpx #16		; check for 8 cycles
	bne aloop		; if <8 then back to stclose
; ------------------------------------------ get rt nyble
	ldx #0 		; set registers at zero
	ldy #0		; for each line
bloop:	lda (mac),y	; - get byte from (mac) and mask 
	and #$0f
	asl
	asl
	asl
	asl
	sta stow,x	; buffer for rt nybles 
	iny		; lined up after stoy
	iny			
	inx
	cpx #16		; check for 8 cycles
	bne bloop		; if <8 then back to stclose
	rts

; ------------------------------------------ move to buffer

adup:	ldx #0
	ldy ymk
	tya
	adc #7
	sta yml	
	tay
ad1:	clc 
	lda stow,x 	; get rt nybl
	lsr 		; shift to a lft nybl
	lsr
	lsr
	lsr
	sta t1		; store it
	inx
	inx
	lda stow,x	; get next rt nybl
	adc t1		; add the 2
	dey
	sta grstore,y	; store in work buffer
	inx		; repeats until all work buff 
	inx 		; is filled
	cpy ymk
	bne ad1
	rts

; ------------------------------------------ 

gdzl1	!by 4
gdzl2	!by 10
gdsp	!by 34
gdbr	!by 38
gdho1	!by 8
gdho2	!by 14

t1:	!by 0
ymk:	!by 0
yml:	!by 0
stow:	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0
stoy:	!by 0,0,0,0,0,0,0,0
	!by 0,0,0,0,0,0,0,0

newnavs	!by $00,$00,$00,$00,$0e,$08,$0a,$01
	!by $00,$00,$00,$00,$70,$10,$50,$80
	!by $01,$0a,$08,$0e,$00,$00,$00,$00
	!by $80,$50,$10,$70,$00,$00,$00,$00

; ------------------------------------------ 

modend:	!eof

