	!src "godotlib.lib"
	*=$c000
	!ct pet
;	!sl "labels.txt"

; ------------------------------------------------ 
;
; mod.WaterColor
; -> bleeding colors in a 5x3 matrix
;
; 1.01, 06.04.93
;
; reworked on 08.04.2018
;
; ------------------------------------------------ 

; -------------------------------------------------------------- Declarations

	lcnt		= $30
	adcnt		= $31
	dst		= $35
	src		= $37
	tcnt		= $3a
	bbuf		= $3b
	mrkx		= $3e

	gr_redisp		= $0fbd

	bbase		= $c602
	buf_o 		= bbase
	buf_m 		= buf_o+324
	buf_u 		= buf_m+324
	buf_r 		= buf_u+324

	sprptr		= $07f8
	wbuf		= sy_global
	spr255		= $3fc0

	spr2x		= $d004
	spr2y		= $d005
	msbx		= $d010
	spren		= $d015
	sprxe		= $d01d
	border		= $d020
	sprcol2		= $d029

; -------------------------------------------------------------- Header

	jmp start

	!by $20		; Modifier
	!by 0
	!by 0
	!wo modend
	!wo 0		; reserved
	!pet "5x3 WaterColor  "
	!pet "1.01"
	!pet "06.04.93"
	!pet "W.Kling         "
addtxt	!pet "0 1 1 1 0       "
	!pet "1 1 1 1 1       "
	!pet "0 1 1 1 0       "
	!pet "Population      "
	!by 0

; ------------------------------------------------ Main

start	jsr init_sa
	lda #0		; ab Rasterzeile 0
	sta lcnt
	jsr puffern	; drei Zeilen puffern
	jsr umlagern

-	jsr umlagern
	inc lcnt
	jsr puffern
	jsr konvol	; und bearbeiten

	dec lcnt
	jsr w_ergeb	; abspeichern
	jsr adinc

	inc lcnt		; bis alle Zeilen durch (200)
	lda lcnt
	cmp #199
	bne -

	jsr puffern	; letzte bearbeiten (Rand!)
	jsr umlagern
	jsr konvol
	jsr w_ergeb

	jmp abschl	; fertig

; ------------------------------------------------ 
; ------------------------------------------------ Konvolution
; ------------------------------------------------ 


konvol	ldy #0		; erste Hälfte bearbeiten

kon4	lda #0
	sta bbuf
	ldx #15		; clear work buffer
-	sta wbuf,x
	dex
	bpl -

	lda buf_o-1,y	; 0 1 1 1 0
	tax		; an 1: Grauwerte zählen
	inc wbuf,x
	lda buf_o,y
	tax
	inc wbuf,x
	lda buf_o+1,y
	tax
	inc wbuf,x

	lda buf_m-2,y	; 1 1 1 1 1
	tax
	inc wbuf,x
	lda buf_m-1,y
	tax
	inc wbuf,x
	lda buf_m,y
	tax
	inc wbuf,x
	lda buf_m+1,y
	tax
	inc wbuf,x
	lda buf_m+2,y
	tax
	inc wbuf,x

	lda buf_u-1,y	; 0 1 1 1 0
	tax
	inc wbuf,x
	lda buf_u,y
	tax
	inc wbuf,x
	lda buf_u+1,y
	tax
	inc wbuf,x

	ldx #15		; welcher war öfter als fünfmal?
-	lda wbuf,x	; (0 mal: gleich wegschreiben)
	beq +
	cmp #6		; den als Ergebnis wegschreiben
	bcs ++
	cmp bbuf		; Untergrenze überschritten?
	bcc +
	sta bbuf		; ja, dann neue Untergrenze (Bevorzugung der Richtung!)
	stx mrkx		; Grauwert auch merken
+	dex		; Histogramm fortsetzen
	bpl -

	ldx mrkx		; letzten gefundenen Grauwert wegschreiben
++	txa
	sta buf_r,y

	lda #0		; zweite Hälfte bearbeiten
	sta bbuf
	ldx #15		; Histogramm löschen
-	sta wbuf,x
	dex
	bpl -		; weiter wie oben:

	lda buf_o+160-1,y	; 0 1 1 1 0
	tax
	inc wbuf,x
	lda buf_o+160,y
	tax
	inc wbuf,x
	lda buf_o+160+1,y
	tax
	inc wbuf,x

	lda buf_m+160-2,y	; 1 1 1 1 1
	tax
	inc wbuf,x
	lda buf_m+160-1,y
	tax
	inc wbuf,x
	lda buf_m+160,y
	tax
	inc wbuf,x
	lda buf_m+160+1,y
	tax
	inc wbuf,x
	lda buf_m+160+2,y
	tax
	inc wbuf,x

	lda buf_u+160-1,y	; 0 1 1 1 0
	tax
	inc wbuf,x
	lda buf_u+160,y
	tax
	inc wbuf,x
	lda buf_u+160+1,y
	tax
	inc wbuf,x

	ldx #15
-	lda wbuf,x
	beq +
	cmp #6
	bcs ++
	cmp bbuf
	bcc +
	sta bbuf
	stx mrkx
+	dex
	bpl -

	ldx mrkx
++	txa
	sta buf_r+160,y

	iny 		; bis alle 320 Pixel durch
	cpy #160
	beq +
	jmp kon4
+	rts

; ------------------------------------------------ 
; ------------------------------------------------ 
; ------------------------------------------------ 

; ------------------------------------------------ Puffer umlagern

umlagern	ldy #0		; von unten nach oben schieben
-	lda buf_m-1,y
	sta buf_o-1,y
	lda buf_m+160,y
	sta buf_o+160,y
	lda buf_u-1,y
	sta buf_m-1,y
	lda buf_u+160,y
	sta buf_m+160,y
	iny 
	cpy #161
	bne -
	rts 

; ------------------------------------------------ Puffer füllen

puffern	lda lcnt		; aktuelle Rasterzeile
	pha 
	lsr		; durch 8
	lsr
	lsr
	tax 
	pla 
	and #$07		; (rz and 7) * 4
	asl
	asl
	sta src		; nach Quelle
	lda hi_rows,x
	sta src+1
	lda #<buf_u	; Ziel
	ldx #>buf_u
	sta dst
	stx dst+1

	ldx #0
	lda #40		; 40 Bytes in Einzelpixel wandeln
	sta tcnt

--	ldy #0
-	lda (src),y	; Pixel links
	pha 
	lsr
	lsr
	lsr
	lsr
	sta (dst,x)	; puffern
	inc dst
	bne +
	inc dst+1
+	pla 		; Pixel rechts
	and #$0f
	sta (dst,x)	; puffern
	inc dst
	bne +
	inc dst+1
+	iny 
	cpy #4		; 4mal (eine Kachel)
	bne -

	lda src		; nächste Kachel
	clc 
	adc #32
	sta src
	bcc +
	inc src+1
+	dec tcnt		; 40 mal
	bne --

	lda buf_u		; für definierten Rand sorgen
	sta buf_u-1
	lda buf_u+319
	sta buf_u+320
	rts 

; ------------------------------------------------ Ergebnis nach 4Bit

w_ergeb	lda lcnt
	pha 
	lsr
	lsr
	lsr
	tax 
	pla 
	and #$07
	asl
	asl
	sta src		; Ziel: 4Bit
	lda hi_rows,x
	sta src+1
	lda #<buf_r	; Quelle: Result Buffer
	ldx #>buf_r
	sta dst
	stx dst+1

	ldx #0		; wie oben
	lda #40
	sta tcnt
--	ldy #0
-	lda (dst,x)	; Pixel wieder zusammenführen
	asl
	asl
	asl
	asl
	inc dst
	bne +
	inc dst+1
+	ora (dst,x)
	inc dst
	bne +
	inc dst+1
+	sta (src),y	; und speichern
	iny 
	cpy #4
	bne -

	lda src
	clc 
	adc #32
	sta src
	bcc +
	inc src+1
+	dec tcnt
	bne --
	rts 

; -------------------------------------------------------------- 
; --- 4bit-high-adressen der kachelzeilen

hi_rows 
	!by $40, $45, $4a, $4f, $54, $59, $5e, $63
	!by $68, $6d, $72, $77, $7c, $81, $86, $8b
	!by $90, $95, $9a, $9f, $a4, $a9, $ae, $b3, $b8 

; ------------------------------------------------ Activity

adinc	dec adcnt
	bne +
	inc spr2y
	inc spr2y+2
	lda #5
	sta adcnt
+	rts 

; ------------------------------------------------ Abschluss Activity

abschl	lda spren		; Wanderbalken aus
	and #$f3
	sta spren
	lda msbx
	and #$f3
	sta msbx
	lda #$ff		; Grafik verändert
	sta gr_redisp
	clc 		; fertig
	rts 

; ------------------------------------------------ Init Activity

init_sa	ldy #60
	lda #0
-	sta spr255+3,y	; Spriteblock 255 vorbereiten
	dey 
	bpl -
	sty spr255	; dünner Strich
	sty spr255+1
	sty spr255+2
	lda #$0f		; Farbe hellgrau
	sta sprcol2
	sta sprcol2+1
	lda sprxe		; doppelt breit
	ora #$0c
	sta sprxe

	lda msbx		; x über 255
	ora #$0c
	sta msbx
	lda #8		; x-Ordinate: 8 (plus 256)
	sta spr2x
	lda #$20
	sta spr2x+2
	lda #$92		; y-Ordinate: 146
	sta spr2y		; (im Image Information Fenster)
	sta spr2y+2

	sty sprptr+2	; Sprite 255
	sty sprptr+3
	lda spren
	ora #$0c		; Activity-Balken aktivieren
	sta spren
	lda #5
	sta adcnt
	rts

; ------------------------------------------------ 

modend	!eof
