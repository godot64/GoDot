
	!src "godotlib.lib"
	*= $c000
	!ct pet
;	!sl "moveclp.txt"

; --------------------------------------
;
;     mod.MoveClip
;       Modifier zum Kopieren, Verschieben oder Tauschen von Clips
;       innerhalb des 4Bit-Bildes
;     von Martin Burggraf (1.01: $AD)
;
;     1.00, 04.10.95, first release (still buggy)
;     1.01, 08.01.18, re-coded for convenience, bugfixes
;                     first fully functional version
;     1.02, 09.01.18, no need to input again and again anymore
;     1.03, 13.01.18, added: visually set position of destination
;                     added: take over new clip position (or not)
;     1.04, 14.01.18, added: take account of overlapping clips
;     1.05, 02.02.18, changed: color of hole after "move" is now background color
;                     bugfix: if moved backwards transported 1 row and column too much
;     1.06, 05.02.18, added: selector sprites for destination
;                     bugfix: visual selection above tile 31 (x: more than 255 px)
;     1.07, 07.02.18, added: move with transparency
;     1.08, 08.02.18, changed: fill color on hires transparency move is color 0
;                              (which leads to the same result, actually)
;                     removed: dirty flag (now executable from REU)
;     1.09, 03.03.18, bugfix: set correct target position on SetClip
;     1.10, 28.05.18, bugfix: garbage when moved right on same row, fixed
;
; --------------------------------------
;
;      Repaired and enhanced from Martin's version (v1.00):
;      Changed zeropage addresses to an area which does not affect
;      any C64 functionality (to $30++); coded a new positioning
;      routine which would deliver correct results; added visual
;      selection; added selector sprites for choosing destination
;      area; added moving with choosable transparency color
;
; -------------------------------------- 


; -------------------------------------- Equates

	pport		= $01
	merk		= $07
	int		= $14
	wordlo		= $15

	zl		= $31
	sp		= $32
	zlmk		= $33
	spmk		= $34
	zwisp		= $35	; /$36
	source		= $37	; /$38
	destin		= $39	; /$3a
	flag		= $3b
	flag2		= $3c
	spr2y		= $3d
	quellzeile	= $3e
	quellspalte	= $3f
	dispmk		= $40
	fwflag		= $41
	zaehlersp		= $42
	zaehlerzl		= $43

	togg		= $44
	slot		= $45
	v1buf		= $47
	v2buf		= $48
	cbuf		= $49
	spr2x		= $4a	; /$4b
	check1		= $4c
	check2		= $4d
	vmflag		= $4e

	spalte		= sc_merk+1

	sprpnt		= $07fa
	sp252		= $3f00
	sp253		= sp252+64
	sp254		= sp253+64
	sp255		= sp254+64

	vram2		= $ce0b
	vram1		= $de0b
	cstart		= $ee0b

	grafreg		= $d011
	spronoff		= $d015
	multreg		= $d016
	charreg		= $d018
	sprmulti		= $d01c
	sprxxpnd		= $d01d
	rahmen		= $d020
	backgr		= $d021
	sp255col		= $d029
	sp254col		= $d02a
	sp253col		= $d02b
	sp252col		= $d02c

; -------------------------------------- Header

	jmp start

	!by $20,$00,$00 
	!wo modend
	!wo 0
	!tx "Move the Clip ! "
	!tx "1.10"
	!tx "28.05.18"
	!tx "M.Burggraf/$AD  "

; -------------------------------------- Main

start	ldx sc_screenvek	; save vector to mainlist
	stx list
	ldx sc_screenvek+1
	stx list+1
	lda gr_redisp	; save flag for re-render
	sta dispmk
	lda gd_modswitch
	pha

	jsr init
	jsr checkcols	; where is which module? (for re-display)
	ldx #<liste
	ldy #>liste
	jsr gd_screen
	jsr colrize	; show off chosen transparency color
	jsr gd_eloop

	pla
	sta gd_modswitch

	ldx #3
-	lda sc_lastclpzl,x	; if modified ("Give"), update clip data
	sta sc_clipzl,x
	dex
	bpl -
	sec
	rts

; -------------------------------------- Event: Exit

cancel	lda dispmk
	sta gr_redisp
	sec 
	rts 

; -------------------------------------- Event: Copy

befcopy	lda #2
	sta flag2
	bne cliptrans

; -------------------------------------- Event: Move

befmove	lda #1
	sta flag2
	bne cliptrans

; -------------------------------------- Event: Exchange

befchang	lda #0
	sta flag2

; -------------------------------------- Perform Transport

cliptrans	jsr initad
	jsr chkwhere	; check position of destination clip (overlap?)
	sta gr_redisp
	beq +		; if equal do nothing
	bmi bwards

fwards	lda #$ff		; vorwärts: Höhenzähler vor 0 setzen
	sta zaehlerzl

lp1	lda #0		; Spaltenzähler auf Start (0)
	sta zaehlersp
	jsr countad	; Move activity bar
	jsr countad
	inc zaehlerzl	; Höhe abzählen
	lda zaehlerzl	; height complete?
	cmp zhoehe
	bcs trend		; yes, end

lp0	jsr blocktrans	; no, transport
	inc zaehlersp
	lda zaehlersp	; width complete?
	cmp zbreite
	bcc lp0
	bcs lp1		; yes, next row

bwards	lda zhoehe	; rückwärts: Höhenzähler auf Cliphöhe setzen
	sta zaehlerzl

lp3	lda zbreite	; Spaltenzähler auf Clipbreite (-1)
	sta zaehlersp
	dec zaehlersp
	jsr countad	; Activity bar
	jsr countad
	dec zaehlerzl	; height complete?
	bmi trend		; yes, end

lp2	jsr blocktrans	; no, transport
	dec zaehlersp	; width complete?
	bpl lp2
	bmi lp3		; yes, next row

trend	lda transfl
	beq +

	ldx zzeile
	ldy zspalte
	stx sc_lastclpzl
	sty sc_lastclpsp
	jsr reinit

+	jsr clearad	; finished
	sec 
	rts

; -------------------------------------- 

; -------------------------------------- Transport one 4Bit-Tile

blocktrans
	jsr calcblock	; calculate source and target addresses

	sei 
	lda pport
	pha 
	lda #1
	sta pport
	ldy #31		; transport 32 bytes (1 tile)
-	ldx trnspfl
	beq +
	jsr transsubt
	jmp ++
+	jsr transsubo
++	dey 
	bpl -
	pla 
	sta pport
	cli 

	rts 

; -------------------------------------- Calculate Addresses

calcblock	clc
	lda quellzeile	; neue Zeile
	adc zaehlerzl
	sta zl
	lda quellspalte	; neue Spalte
	adc zaehlersp
	sta sp
	lda #0		; first: source
	sta flag
	jsr clcblksub	; perform calculation

	clc		; then: destination
	lda zzeile
	adc zaehlerzl
	sta zl
	lda zspalte
	adc zaehlersp
	sta sp
	inc flag

; -------------------------------------- Perform Calculation

clcblksub	lda #$40		; rows from start of 4Bit ($4000+zl*$500)
	sta zwisp+1
	ldx zl
	beq ++

-	clc
	adc #$05
	dec zl
	bne -
	sta zwisp+1

++	lda sp
	beq ++

	lda #0		; columns row+sp*32
-	clc
	adc #32
	bcc +
	inc zwisp+1
+	dec sp
	bne -

++	ldx zwisp+1	; Hi addr (lo in .a)
	ldy flag
	bne +
	stx source+1	; set source
	sta source
	rts

+	stx destin+1	; set destination
	sta destin
	rts 

; -------------------------------------- Check for Overlap

chkwhere	clc
	lda quellzeile
	adc zhoehe
	sta zl
	lda quellspalte
	adc zbreite
	sta sp
	lda zzeile
	adc zhoehe
	sta zlmk
	lda zspalte
	adc zbreite
	sta spmk

	lda quellzeile	; first: check if rows are equal
	eor zzeile
	bne olap2
	lda quellspalte	; if not: check if columns are equal (vmflag now 0)
	eor zspalte
	bne olap
	rts		; destination is completely equal to source, do nothing

olap	lda zlmk		; destination clip completely above source clip?
	cmp quellzeile
	bcc fwd		; yes, forwards (no overlap)
	lda zl		; destination clip completely below source clip?
	cmp zzeile
	bcc fwd		; yes, forwards

olap2	lda sp		; destination clip completely right of source clip?
	cmp zspalte
	bcc fwd		; yes, forwards
	lda spmk		; otherwise: destination clip completely left of source clip?
	cmp quellspalte
	bcc fwd		; yes, forwards

	lda zspalte	; then they overlap: dst clip left?
	cmp quellspalte
	bcc +		; yes, vmflag to %000 (forwards)
	beq +
	lda #1		; no, %001
	!by $2c
+	lda #0		; %000
	sta vmflag

	lda zzeile	; otherwise: dst clip above?
	cmp quellzeile
	bcc +		; yes, vmflag to %010 (forwards)
	beq ifrght	; the same row, then look if right
	lda #4		; no, %100
	!by $2c
-
+	lda #2		; %010
	ora vmflag

	beq fwd		; decide
	cmp #2
	beq fwd
	cmp #3
	beq fwd

bwd	lda #$ff		; any other: backwards
	bmi +
fwd	lda #1
+	sta fwflag
	rts

ifrght	lda vmflag
	cmp #1
	beq bwd
	bne -

; -------------------------------------- Opaque-Distributor

transsubo	ldx flag2
	beq change
	dex 
	beq move

; -------------------------------------- Perform Copy

copy	lda (source),y	; just source to destination
	sta (destin),y
	rts 

; -------------------------------------- Perform Move

move	lda (source),y	; source to destination, then
	sta (destin),y
	ldx gr_cmode	; if Hires, just color 0 (black)
	beq +
	ldx gr_bkcol	; fill source with background color
+	lda c4bit,x
	sta (source),y
	rts

; -------------------------------------- Perform Exchange

change	lda (source),y	; save source
	pha 
	lda (destin),y	; destination to source
	sta (source),y
	pla 
	sta (destin),y	; re-get source and set destination
	clc
	rts 

; -------------------------------------- Transparent-Distributor

transsubt	ldx flag2
	beq tchange
	dex 
	beq tmove

; -------------------------------------- Perform Transparent-Copy

tcopy	lda (source),y	; just source to destination
	jsr tcheck	; check for transparent pixels
	sta (destin),y
	rts 

; -------------------------------------- Perform Transparent-Move

tmove	lda (source),y	; source to destination, then
	jsr tcheck
	sta (destin),y
	ldx gr_cmode	; if Hires, just color 0 (black)
	beq +
	ldx gr_bkcol	; fill source with background color
+	lda c4bit,x
	sta (source),y
	rts

; -------------------------------------- Perform Transparent-Exchange

tchange	lda (destin),y	; save destination (no transparency here)
	jsr tcheck
	pha 
	lda (source),y	; source to destination (with transparency)
	jsr tcheck
	sta (destin),y
	pla 
	sta (source),y	; re-get destination and set source
	clc
	rts 

; -------------------------------------- Check for Transparency

tcheck	tax		; Quelle

	lda (destin),y	; Ziel: Pixel isolieren
	pha
	and #$f0
	sta check1
	pla
	and #$0f
	sta check2

	txa		; Quelle: linkes Pixel
	and #$f0
	cmp chkcoll	; transparent?
	bne +

	txa		; ja, linkes Pixel vom Ziel setzen
	and #$0f
	ora check1
	tax

+	txa		; Quelle: rechtes Pixel
	and #$0f
	cmp chkcolr	; transparent?
	bne +

	txa		; ja, rechtes Pixel vom Ziel setzen
	and #$f0
	ora check2
	tax

+	txa
	rts

; -------------------------------------- Event: Set Transparency Color

sevcolor	ldx curcol
	lda spalte	; wo geklickt?
	cmp #17
	bcs +
	dex		; linke Hälfte: rückwärts
	bpl ++
	ldx #14
+	inx		; rechte Hälfte: vorwärts
	cpx #16
	bne ++
	ldx #0
++	stx curcol
	lda dnibs,x
	tay
	and #$f0		; for left pixel
	sta chkcoll
	tya
	and #$0f		; for right pixel
	sta chkcolr
	ldy tab3,x
	ldx #0
-	lda coltxs,y
	sta curcoltx,x
	iny
	inx
	cpx #3
	bne -
	jmp colrize

; -------------------------------------- Event: Set Flag for Transparency

sevtrnsp	ldx trnspfl
	beq +
	ldx #$ff
+	inx
	stx trnspfl
	beq +
	ldx #5
+	ldy #4
-	lda trnsps,x	; show text
	sta trnsptx,y
	inx
	dey
	bpl -
	ldy #5
	ldx trnspfl	; is opaque?
	bne +
	lda #$60		; yes, show color opaquely
	!by $2c
+	lda #$a0		; no, show color clearly
	ldx #2
-	sta curcoltx,y
	dey
	dex
	bpl -
	ldy #6
	jsr out2

; -------------------------------------- Colorize Gadget Entry

colrize	ldy #8		; output color gadget
	jsr out2
	ldx curcol	; and set current color
	lda cc64,x
	sta sc_chgcol
	lda #3
	sta sc_br
	sta sc_loop
	lda #17
	sta sc_sp
	ldx #4
	jmp gd_fcol

; -------------------------------------- Event: Set Flag for TakeOver

sevtkover	ldx transfl	; Hold or Give
	beq +
	ldx #$ff
+	inx
	stx transfl
	beq +
	ldx #5
+	ldy #4
-	lda transtx,x
	sta togtx,y
	inx
	dey
	bpl -
	ldy #4
	bne out2

; -------------------------------------- Event: Input Row of Target

row	jsr ss16		; Input
chrow	sta zzeile
	clc
	adc zhoehe
	cmp #26
	bcc +
	jsr ss14
	lda zlmk
	sta zzeile

+	lda zzeile
	sta zlmk
	jsr getzif	; convert to digits
	stx zzltx		; in Screenlist schreiben
	sta zzltx+1
	ldy #0
	beq out2

; -------------------------------------- Event: Input Column of Target

col	jsr ss16		; Input
chcol	sta zspalte
	clc
	adc zbreite
	cmp #41
	bcc +
	jsr ss14
	lda spmk
	sta zspalte

+	lda zspalte
	sta spmk
	jsr getzif	; convert to digits
	stx zsptx		; in Screenlist schreiben
	sta zsptx+1
	ldy #2

out2	jsr settab
	jsr gettab
	ldy #6		; and display
	jmp gd_xtxout1

; ------------------------------------------------ Event: SetClip

sevsetcl	ldx #0		; clear key buffer
	stx sy_tbuffer
	sta sc_stop
	inx
	stx gr_redisp
	jsr redisplay	; turn graphics on
	jsr iselectr	; set selector angles
	lda quellzeile	; set clip values
	sta sc_zl
	lda quellspalte
	sta sc_sp
	lda zbreite
	beq rdy
	lda zhoehe
	beq rdy

	lda #0		; clear toggle flag
	sta togg
	sta gr_redisp
sh0	jsr invertcl	; blink clip
	jsr setsprpos	; display selector
	ldx #250
	jsr gd_dl2	; blink delay
	lda togg
	eor #1
	sta togg
	lda $dc00		; fire?
	and #16
	beq sh1		; yes, finish
	lda sy_tbuffer	; any key?
	beq sh0		; no, loop

sh1	lda togg		; finish
	and #1		; clip in blink phase?
	beq sh0		; no, add one blink
	jsr invertcl	; yes, clip to off

	jsr gd_spron
	jsr swap252	; repair rendered image after task
	jsr getcolors
	lda spritehi	; don't care about lower selector pos
	and #$0f
	sta spritehi
	lda spritex+2	; set correct selector position
	sta spritex
	lda spritey+2	; ### 1.09
	sta spritey-2
	jsr getpos	; get selector position for transport
	lda spritehi	; leave only pointer
	and #3
	sta spritehi
rdy	jmp dp20		; text mode on, finished

; -------------------------------------- Leading Zero to Space

getzif	jsr gd_xcnvdez	; Byte nach Ziffern
	cpx #$30
	bne +
	ldx #$20
+	rts 

; ------------------------------------------------ Get Mouse Position

getpos	jsr gd_position	; compute position of mouse pointer
	tay		; column: off screen on left?
	lda sc_merk
	sta merk
	tya
	bmi ss14		; yes, reject value
	cmp #40		; off screen on right?
	bcs ss14		; yes, reject
	jsr chcol		; ok, set column value

	lda merk		; row: off screen beyond top?
	bmi ss14		; yes, reject
	cmp #25		; beyond bottom?
	bcs ss14		; yes, reject
	jsr chrow

	lda sc_stop	; abbrechen, wenn STOP
	bne ss15

	lda zl
	sta zzeile
	jsr chrow
	lda sp
	sta zspalte
	jmp chcol

ss14	ldy #2		; blink border (red)
	pha
	jsr graphon
	bcc +

ss16	jsr yinput	; input values from keyboard
ss15	pha
	beq +

	lda zzeile	; save values (if STOP)
	sta zl
	lda zspalte
	sta sp
+	lda #0
	sta sc_stop
	pla
	rts

; -------------------------------------- Input Target

yinput	ldy #10		; valid chars (digits and space, 11 bytes)
	sty sc_iflag
-	lda zln,y
	sta sy_global,y
	dey 
	bpl -

	lda #<sy_global	; perform Input (result at ls_nambuf)
	ldx #>sy_global
	sta ls_vekta8
	stx ls_vekta8+1
	jsr gd_xinput

	lda #>ls_nambuf	; set vector to ls_nambuf
	sta ls_vekta8+1
	lda #<ls_nambuf
	sta ls_vekta8
	sta sc_iflag
	ldy ls_flen
	sta ls_vekta8,y

; -------------------------------------- Convert Digits to Word (Byte in INT)

gword	ldy #0
	sty int
	sty int+1
	beq +

-	jsr inca8
+	lda (ls_vekta8),y
	cmp #$20
	beq -

	cmp #$3a
	bcs +
	sec 
	sbc #$30
	sec 
	sbc #$d0
	bcs +
	sbc #$2f
	sta merk
	lda int+1
	sta ls_temp
	cmp #$19
	bcs +
	lda int
	asl
	rol ls_temp
	asl
	rol ls_temp
	adc int
	sta int
	lda ls_temp
	adc int+1
	sta int+1
	asl int
	rol int+1
	lda int
	adc merk
	sta int
	bcc -
	inc int+1
	bne -
+	lda int
	rts

; -------------------------------------- 

inca8	inc ls_vekta8
	bne +
	inc ls_vekta8+1
+	rts 

; -------------------------------------- Save/Restore last 64 Bytes of rendered Image

swap252	ldy #$3f
-	lda sp252,y
	ldx sy_bigbuffer+$200,y
	sta sy_bigbuffer+$200,y
	txa
	sta sp252,y
	dey
	bpl -
	rts

; -------------------------------------- Init Selector Sprites

iselectr	jsr swap252
	iny
	sty sprmulti
	sty sprxxpnd
	tya
-	sta sp252,y	; clear 4 sprites
	iny
	bne -

	lda #$aa		; set %10101010
	sta sp255
	sta sp252+21
	lsr		; set %01010101
	sta sp254
	sta sp253+21

	lda #$80		; the same vertically
-	ldx tab1,y
	sta sp255,x
	iny
	cpy #3
	bcc -
-	ldx tab1,y
	sta sp254,x
	iny
	cpy #7
	bcc -
	dey
	lda #$01
-	ldx tab2,y
	sta sp253,x
	dey
	cpy #4
	bcs -
-	ldx tab2,y
	sta sp252,x
	dey
	bpl -

	ldx #0		; set sprite pointers
-	tya
	sta sprpnt,x
	dey
	inx
	cpx #4
	bne -

	lda #$00		; colorize (b&w)
	sta sp255col
	sta sp253col
	lda #$01
	sta sp254col
	sta sp252col
	lda #$3f		; activate selector
	sta spronoff

; -------------------------------------- Set Selector Position

setsprpos	lda spritex-2	; depending on mouse pointer
	and #$f8
	sta spritex+2	; sync upper selector's x-position
	sta spritex+4
	clc
	adc spr2x		; compute x-position of lower selector
	sta spritex+6
	sta spritex+8

	lda spritehi	; get register for "x above 255"
+	and #$03		; check mouse pointer
	beq +
	ora #$3c		; sync selectors
+	ldx spr2x+1	; lower sel above 255?
	bne +
	bcc ++
+	ora #$30		; yes, mask in lower selector
++	sta spritehi	; set register for "x above 255"

	lda spritey-2	; set y-position of selectors
	and #$f8
	tax
	inx
	inx
	stx spritey+2	; upper
	stx spritey+4
	txa
	clc
	adc spr2y
	sta spritey+6	; lower
	sta spritey+8
	rts

; -------------------------------------- Initialize Position

init	lda #0
	sta spr2x+1
	ldx #22
-	sta zl,x
	dex 
	bpl -
	sta sc_keyprs	; clear keyboard
	sta sc_loop	; clear flag for graphics mode
	sta gr_redisp	; clear redisplay flag
	sta fwflag	; clear forward flag
	jsr makechr
	ldx sc_lastclpzl
	ldy sc_lastclpsp
reinit	stx quellzeile
	sty quellspalte
	stx zlmk		; first value row (on fail)
	sty spmk		; first value column (on fail)
	lda sc_lastclpbr
	sta zbreite	; compute width of selector
	tax
	dex
	txa
	asl
	asl
	asl
	sta spr2x		; save in spr2x
	rol spr2x+1	; if wider than 255: (spr2x+1)=1
+	lda sc_lastclpho
	sta zhoehe	; compute height of selector
	tax
	dex
	txa
	asl
	asl
	asl
	sta spr2y		; save in spr2y
	rts 

; ------------------------------------------------ Invert clip area

invertcl	ldx #0		; care for text mode
	stx sc_loop
	jsr gd_initmove	; compute address
inv0	ldy #0		; .y index for width
inv1	cpy zbreite
	beq inv2
	lda sc_vekt20+1
	pha
	lda (sc_vekt20),y	; first invert video ram
	eor #$ff
	sta (sc_vekt20),y
	lda sc_vekt20+1
	clc
	adc #$d4		; then color ram
	sta sc_vekt20+1
	lda (sc_vekt20),y
	eor #$ff
	sta (sc_vekt20),y
	pla
	sta sc_vekt20+1
	iny
	bne inv1		; one row
inv2	inx		; next one
	cpx zhoehe
	beq ready		; finished if height
	jsr gd_plus40	; else add 40 for next
	bne inv0
ready	rts

; ----------------------------------------------------- Blink the Border

graphon	lda rahmen
	pha
	sty rahmen
	ldx #$40
	jsr gd_dl2
	pla
	sta rahmen
	stx sy_tbuffer
stay	clc
	rts

; ------------------------------------------------ 
; ------------------------------------------------ graphics display
; ------------------------------------------------ 

checkcols	sei 		; GoDot off
	ldx #$00
	stx pport

	ldy #$03		; set lobyte of...
	sty slot

	lda #$f0		; ...Slot4, check for types of module there
	sta slot+1	; (may be cram when input is active)
	jsr sethicol	; (otherwise unchanged)

	lda #$c0		; ...Slot1 and check
	sta slot+1
	jsr sethicol

	lda #$d0		; ...Slot2 and check
	sta slot+1
	jsr sethicol

	lda #$e0		; ...Slot3 and check
	sta slot+1
	jsr sethicol

	lda #$36		; GoDot on again
	sta pport
	cli 
	rts 

; ------------------------------------------------ 

sethicol	lda (slot,x)	; get type of module (at $c003): $20, $40, $80
	tay 
	and #$40		; is saver there? (contains vram1)
	beq +		; no, next type

	jsr c147		; yes, set color buffer 
	sta v1buf
	bne ++

+	tya 		; loader? ($80, contains cram)
	bpl +		; no, next type

	jsr c147		; yes, set accordingly
	sta cbuf
	bne ++

+	jsr c147		; so, it's a modifier (contains vram2)
	sta v2buf

++	rts 

c147 	lda slot+1	; get hibyte...
	ora #$0e		; ...and OR %00001110 to it (ie $ce)
	rts 		; thus: get correct hi address of color buffers

; ------------------------------------------------ 

redisplay	ldx gr_palette	; set border to color 0 (normally black)
	stx rahmen
	jsr setcolors	; get colors from their buffers

	lda gr_cmode	; which mode?
	beq dp4
	lda #$18		; multicolor
	sta multreg
dp4	lda #$1b		; hires
	sta charreg
	lda #$3b
	sta grafreg
	lda gr_redisp	; Flag: display graphics set?
	bne dp3		; yes, branch and leave

; ------------------------------------------------ End display

dp2	jsr getcolors	; no, end display: save colors
dp20	jsr tmode		; activate textmode
oldreq	lda sc_screenvek	; save vector to current screenlist (ClipWorks)
	pha
	lda sc_screenvek+1
	pha
	ldx list		; yes, re-build main screen
	ldy list+1
	jsr gd_screen
dp5	pla		; and then re-build MoveClip requester
	tay
	pla
	tax
	jsr gd_screen
	jsr colrize
dp3	clc		; leave
	rts

; ------------------------------------------------ Switch textmode on

tmode	ldx #$13
	lda #$1b
	stx charreg
	sta grafreg
	lda #$08
	sta multreg
	lda sc_maincolor
	sta rahmen
	sta backgr
	rts

; ------------------------------------------------ 
; ------------------------------------------------ 
; Routines to handle GoDot's graphics color buffers
; for comments see sources for god.upmem
; ------------------------------------------------ 
; ------------------------------------------------ 

setcveks	sei
	lda #$35
	sta pport
	lda cbuf 		; color ram
	ldx #$d8
	bne scv0
setbveks	lda v1buf 	; vram1
	ldx #4
	dec pport
scv0	stx ls_adrmisc+1
	ldy #0
	sty sc_merk
	sty ls_adrmisc
	dey
setlast	sty gr_bkcol
	ldy #<(cstart)
	sty sc_vekt20
	sta sc_vekt20+1
	lda #<(500)
	sta ls_vekta8
	lda #>(500)
	sta ls_vekta8+1
	ldy #0
	rts

count	inc sc_vekt20
	bne cou5
	inc sc_vekt20+1
cou5	inc ls_adrmisc
	bne cou6
	inc ls_adrmisc+1
cou6	lda ls_vekta8
	bne cou7
	dec ls_vekta8+1
cou7	dec ls_vekta8
	lda ls_vekta8
	ora ls_vekta8+1
	rts

getcolors	jsr setcveks
stco	lda (ls_adrmisc),y
	sta sc_merk
	inc ls_adrmisc
	bne stc0
	inc ls_adrmisc+1
stc0	lda (ls_adrmisc),y
	lsr
	rol sc_merk
	lsr
	rol sc_merk
	lsr
	rol sc_merk
	lsr
	rol sc_merk
	lda sc_merk
	sta (sc_vekt20),y
	jsr count
	bne stco
	jsr setbveks
stc1	lda (ls_adrmisc),y
	sta (sc_vekt20),y
	jsr count
	bne stc1
	ldy gr_bkcol
	bpl scv1
	ldy #0
	lda v2buf 	; vram2
	jsr setlast
	beq stc1
scv1	lda #$36
	sta pport
	cli
	lda backgr
	and #15
	sta gr_bkcol
	rts

setcolors	lda gr_bkcol
	sta backgr
	pha
	jsr setcveks
stc2	sty sc_merk
	lda (sc_vekt20),y
	lsr
	rol sc_merk
	lsr
	rol sc_merk
	lsr
	rol sc_merk
	lsr
	rol sc_merk
	sta (ls_adrmisc),y
	inc ls_adrmisc
	bne stc3
	inc ls_adrmisc+1
stc3	lda sc_merk
	sta (ls_adrmisc),y
	jsr count
	bne stc2
	jsr setbveks
stc4	lda (sc_vekt20),y
	sta (ls_adrmisc),y
	jsr count
	bne stc4
	ldy gr_bkcol
	bpl scv1
	pla
	tay
	lda v2buf 	; vram2
	jsr setlast
	beq stc4

; ------------------------------------------------ Display Clip values

tabigad	!wo zielzl	; 0
	!wo zielsp	; 2
	!wo togclp	; 4
	!wo trnsptog	; 6
	!wo trnscol	; 8

settab	lda #<(tabigad)
	sta sc_texttab
	lda #>(tabigad)
	sta sc_texttab+1
	rts

gettab	lda (sc_texttab),y
	sta sc_screentab
	iny
	lda (sc_texttab),y
	sta sc_screentab+1
	iny
	sty sc_merk
	stx sc_merk+1
	lda #$00
	tax
	tay
gt0	jsr gd_setpos
	cpx #$04
	bne gt0
	jsr gd_trim
	jmp gd_initmove

; -------------------------------------- Initialize Activity Bar

initad	ldy #63
	lda #0
-	sta $3fc0,y
	dey 
	bpl -
	sty $3fc0
	sty $3fc1
	sty $3fc2
	lda sc_light
	sta $d029
	sta $d02a
	lda $d01d
	ora #$0c
	sta $d01d
	lda $d010
	ora #$0c
	sta $d010
	lda #$08
	sta $d004
	lda #$20
	sta $d006
	lda #$92
	sta $d005
	sta $d007
	sty $07fa
	sty $07fb
	lda $d015
	ora #$0c
	sta $d015
	rts 

; -------------------------------------- Switch Activity Bar off

clearad	lda $d015
	and #$f3
	sta $d015
	lda $d010
	and #$f3
	sta $d010
	rts 

; -------------------------------------- Perform Activity

countad	inc $d005
	inc $d007
	lda $d005
	cmp #$ba
	bmi +
	lda #$92
	sta $d005
	sta $d007
+	rts 

; --------------------------- Kringel definieren

makechr	ldx #7
-	lda chschr,x
	sta sc_undochar,x
	dex
	bpl -
	rts

; -------------------------------------- Data

zln	!tx " 0123456789"
chschr	!by $00,$3a,$46,$4e,$40,$40,$3c,$00
coltxs	!scr "blkblubwndgrredpuroramgrlbllrdgrnlgrcyayellgnwht"

c4bit	!by $00,$0f,$04,$0c,$05,$0a,$01,$0d
	!by $06,$02,$09,$03,$07,$0e,$08,$0b
cc64	!by $00,$06,$09,$0b,$02,$04,$08,$0c
	!by $0e,$0a,$05,$0f,$03,$07,$0d,$01
dnibs	!by $00,$11,$22,$33,$44,$55,$66,$77
	!by $88,$99,$aa,$bb,$cc,$dd,$ee,$ff
tab1	!by 6,12,18,3,9,15,21
tab2	!by 18,12,6,0,15,9,3
tab3	!by 0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45

zzeile	!by 0
zspalte	!by 0
zbreite	!by 0
zhoehe	!by 0
curcol	!by 0		; default: blk
chkcoll	!by 0		; colors for transparency check
chkcolr	!by 0
list	!wo 0
transfl	!by 0
transtx	!scr "dloH eviG "
trnspfl	!by 0
trnsps	!scr "eqapOsnarT"

; -------------------------------------- Screenlist

liste	!by 0
	!by 4,13,16,18,$91
	!wo 0
	!scr "MoveClip@"
zielzl	!by 8,17,4,3,$e0
	!wo row 
zzltx	!scr " 0@"
zielsp	!by 8,24,4,3,$e0
	!wo col 
zsptx	!scr " 0@"
	!by 11,21,8,3,$dd
	!wo sevsetcl
	!scr "SetClp@"
	!by 13,21,8,3,$ce 
	!wo befmove
	!scr " Move@"
	!by 15,21,8,3,$ce
	!wo befcopy
	!scr " Copy@"
	!by 17,21,8,3,$ce
	!wo befchang
	!scr "XChnge@"

trnsptog	!by 12,13,8,3,$c8
	!wo sevtrnsp
	!by 223
trnsptx	!scr "Opaqe@"	; or "Trans@"

trnscol	!by 15,13,8,3,$c8
	!wo sevcolor
curcoltx	!scr "blk"
	!by $60,$60,$60,0

togclp	!by 18,13,8,3,$c8
	!wo sevtkover
	!by 223
togtx	!scr " Hold@"	; or " Give@"

	!by 19,21,8,3,$ce
	!wo cancel
	!scr " Exit@"

	!by $c0,6,14,12
	!scr "Destination:@"
	!by $c0,8,13,3 
	!scr "Row@"
	!by $c0,8,20,3 
	!scr "Col@"
	!by $80 

; -------------------------------------- 

modend	!eof
