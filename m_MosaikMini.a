;
; GoDot Modifier MosaikMini (renamed to "Minimum")
; first released about 24.09.1993
; reworked on 03.09.2016
; -> Konvolution: dunkelster Nachbar
;


	*=$c000

	gr_redisp = $0fbd
	buf_o = $c600
	buf_m = $c800
	buf_u = $ca00
	buf_r = $cc00
	fbit = $4000
	target = $35	; /$36
	source = $37	; /$38
	rline = $39
	tcnt = $3a
	minim = $3b
	acnt = $ff

	jmp start	; Sprung auf Start

	!by $20		; type: mod
	!by 0		; ownreq: no
	!by 0		; dirty: no
	!wo modend	; Ende des Moduls
	!wo 0		; reserved

	!pet "Minimum Filter  "
	!pet "0.99"	; version: 0.99
	!pet "03.09.16"	; date: 24.09.93
	!pet "W.Kling          "	; author: Wolfgang
	!pet "Brightest Color  "	; addtext
	!pet "     of 3x3 Array"
	!by 0

start 
	jsr init_sa	; init sprite activity
	lda #<fbit	; start bei $4000 
	sta rline		; je drei rasterzeilen puffern:
	jsr puffern	; erste (320 bytes)
	jsr umlagern	; puffer umlagern

- 	jsr umlagern	; dadurch die erste verdoppeln (definierter rand)
	inc rline		; nächste rasterzeile puffern
	jsr puffern
	jsr konvol	; konvolution durchführen

	dec rline		; vorige rasterzeile anpeilen
	jsr w_ergeb	; und ergebnis der konvolution ins 4bit schreiben
	jsr s_activ	; sprite activity

	inc rline		; nächste rasterzeile anpeilen
	lda rline
	cmp #199		; bis letzte erreicht
	bne -

	jsr puffern	; letzte bearbeiten (definierter rand):
	jsr umlagern	; puffern
	jsr konvol	; konvolution
	jsr w_ergeb	; ergebnis ins 4bit

	jmp abschl	; abschluss

; --- konvolution

konvol 
	ldy #0		; minimum unter dem konvolutionskern suchen (linke hÃ¤lfte)
loop 	lda buf_m,y	; matrixzentrum (in der mittleren rasterzeile) testen
	beq ++		; wenn bereits minimum, in den ergebnispuffer, keine bearbeitung erforderlich
	sta minim		; nein, merken
	lda buf_o-1,y	; erstes byte der oberen rasterzeile holen
	cmp minim		; vergleichen
	bcs +		; größer/gleich: nicht beachten
	sta minim		; kleiner: als neues vergleichsbyte merken
+ 	lda buf_o,y	; zweites byte der obersten zeile: dito
	cmp minim
	bcs +
	sta minim
+ 	lda buf_o+1,y	; drittes byte: dito
	cmp minim
	bcs +
	sta minim
+ 	lda buf_m-1,y	; erstes byte der mittleren zeile testen
	cmp minim
	bcs +
	sta minim
+ 	lda buf_m+1,y	; matrixzentrum überspringen und gleich drittes byte 
	cmp minim
	bcs + 
	sta minim
+ 	lda buf_u-1,y	; erstes byte der unteren rasterzeile testen
	cmp minim
	bcs +
	sta minim
+ 	lda buf_u,y	; zweites byte
	cmp minim
	bcs +
	sta minim
+ 	lda buf_u+1,y	; drittes byte
	cmp minim
	bcs +
	sta minim
+ 	lda minim		; ergebnis holen, dieses byte enthält das minimum 

++ 	sta buf_r,y	; und in den ergebnispuffer schreiben
	lda buf_m+160,y	; das ganze noch einmal für die rechte hälfte (160 bytes)
	beq ++		; bei minimum keine bearbeitung erforderlich
	sta minim		; sonst weiter wie oben
	lda buf_o+159,y
	cmp minim
	bcs +
	sta minim
+ 	lda buf_o+160,y
	cmp minim
	bcs +
	sta minim
+ 	lda buf_o+161,y
	cmp minim
	bcs +
	sta minim
+ 	lda buf_m+159,y
	cmp minim
	bcs +
	sta minim
+ 	lda buf_m+161,y
	cmp minim
	bcs +
	sta minim
+ 	lda buf_u+159,y
	cmp minim
	bcs +
	sta minim
+ 	lda buf_u+160,y
	cmp minim
	bcs +
	sta minim
+ 	lda buf_u+161,y
	cmp minim
	bcs +
	sta minim
+ 	lda minim		; ergebnis holen...

++ 	sta buf_r+160,y	; ...und in den ergebnispuffer schreiben
	iny 		; alle bytes durch?
	cpy #160
	beq +		; ja, ergebnispuffer gefüllt, fertig
	jmp loop		; nein, loop

; --- sprite activity

s_activ 
	dec acnt		; activity-zähler abgelaufen?
	bne +
	inc $d005		; ja, sprites bewegen
	inc $d007
	lda #5		; zähler neu setzen 
	sta acnt
+ 	rts

; --- puffer buffer_m nach buffer_o (zur oberen rasterzeile) und buffer_u nach buffer_m umlagern (zur mittleren)
 
umlagern 
	ldy #0
- 	lda buf_m-2,y
	sta buf_o-2,y
	lda buf_m+160,y
	sta buf_o+160,y
	lda buf_u-2,y
	sta buf_m-2,y
	lda buf_u+160,y
	sta buf_m+160,y
	iny 
	cpy #163
	bne -
	rts

; --- puffer buffer_u (obere rasterzeile) füllen
 
puffern 
	lda rline
	pha 
	lsr 
	lsr 
	lsr 
	tax 
	pla 
	and #$07		; quelle: 4bit
	asl 
	asl 
	sta source
	lda hi_rows,x
	sta source+1
	lda #<buf_u	; ziel: buffer_u
	ldx #>buf_u
	sta target
	stx target+1
	ldx #0
	lda #40
	sta tcnt
-- 	ldy #0
- 	lda (source),y
	pha 
	lsr 
	lsr 
	lsr 
	lsr 
	sta (target,x)
	inc target
	bne +
	inc target+1
+	pla 
	and #$0f
	sta (target,x)
	inc target
	bne +
	inc target+1
+ 	iny 
	cpy #4
	bne -
	lda source
	clc 
	adc #32
	sta source
	bcc +
	inc source+1
+ 	dec tcnt
	bne --
	lda buf_u		; die ersten beiden werte davor (definierter rand)
	sta buf_u-1
	sta buf_u-2
	lda buf_u+319	; der letzte zweimal dahinter
	sta buf_u+320
	sta buf_u+321
	rts

; --- ergebnispuffer buffer_result nach 4bit schreiben
 
w_ergeb 
	lda rline
	pha 
	lsr 
	lsr 
	lsr 
	tax 
	pla 
	and #$07		; ziel: 4bit
	asl 
	asl 
	sta source
	lda hi_rows,x
	sta source+1
	lda #<buf_r	; quelle: buffer_result
	ldx #>buf_r
	sta target
	stx target+1
	ldx #0
	lda #40
	sta tcnt
--	ldy #$00
-	lda (target,x)
	asl 
	asl 
	asl 
	asl 
	inc target
	bne +
	inc target+1
+ 	ora (target,x)
	inc target
	bne +
	inc target+1
+ 	sta (source),y
	iny 
	cpy #4
	bne -
	lda source
	clc 
	adc #32
	sta source
	bcc +
	inc source+1
+ 	dec tcnt
	bne --
	rts 

; --- 4bit-high-adressen der kachelzeilen

hi_rows 
	!by $40, $45, $4a, $4f, $54, $59, $5e, $63
	!by $68, $6d, $72, $77, $7c, $81, $86, $8b
	!by $90, $95, $9a, $9f, $a4, $a9, $ae, $b3, $b8 

; --- abschluss

abschl 
	lda $d015		; sprites aus
	and #$f3
	sta $d015
	lda $d010
	and #$f3
	sta $d010
	lda #$ff		; redisp setzen
	sta gr_redisp
	clc 		; fertig
	rts 

; --- sprite-activity initialisieren

init_sa 
	ldy #60		; 60 (plus 3) Bytes
	lda #$00		; Sprite-Block 255 löschen
- 	sta $3fc3,y
	dey 
	bpl -
	sty $3fc0		; dünner Strich oben
	sty $3fc1
	sty $3fc2
	lda #$0f		; Farbe weiß
	sta $d029
	sta $d02a
	lda $d01d		; doppelt breit
	ora #$0c
	sta $d01d
	lda $d010		; Position setzen
	ora #$0c
	sta $d010
	lda #$08
	sta $d004
	lda #$20
	sta $d006
	lda #$92
	sta $d005
	sta $d007
	sty $07fa		; Sprite-Block 255 setzen
	sty $07fb
	lda $d015
	ora #$0c
	sta $d015
	lda #5		; Zähler initialisieren
	sta acnt
	rts 

modend 	!eof
